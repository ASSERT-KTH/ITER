bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	3	None	replace
2	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	3	None	replace
3	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	3	None	replace
4	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getParent())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getParent())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getParent())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	3	None	replace
6	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	33	None	replace
7	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	33	None	replace
8	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	33	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME);  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	33	None	replace
10	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	33	None	replace
11	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	33	None	replace
12	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	33	None	replace
13	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	33	None	replace
14	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
15	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
16	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
17	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
18	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
19	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
20	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
21	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
22	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	9	None	replace
24	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	9	None	replace
25	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	9	None	replace
26	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	9	None	replace
27	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	9	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	31	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastChild()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	31	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getNext()));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getNext()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getNext()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	31	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastArg()));  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastArg()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastArg()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	31	None	replace
32	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	6	None	replace
33	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	6	None	replace
35	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	6	None	replace
36	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	6	None	replace
37	[BUG]  [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	6	None	replace
38	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	6	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	28	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	28	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	28	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  lastArg));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  lastArg));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  lastArg));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	28	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getVar(function.getString())!=  null);  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(parentScope.getVar(function.getString())!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getVar(function.getString())!=  null);	      Preconditions.checkState(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	34	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString())  ==  null);  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString())  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString())  ==  null);	      Preconditions.checkState(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	34	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(function.getVar(function.getString())!=  null);  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.getVar(function.getString())!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getVar(function.getString())!=  null);	      Preconditions.checkState(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	34	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()  +  1)!=  null);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()  +  1)!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString()  +  1)!=  null);	      Preconditions.checkState(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	34	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(scope.getVar(function.getString())!=  null);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(scope.getVar(function.getString())!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getVar(function.getString())!=  null);	      Preconditions.checkState(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	34	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(function.getVar(fnScope.getString())!=  null);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.getVar(fnScope.getString())!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getVar(fnScope.getString())!=  null);	      Preconditions.checkState(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	34	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  isPropertyAssign);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString()),  isPropertyAssign);	      Preconditions.checkState(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	34	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString())!=  null);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString())!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.getVar(function.getString())!=  null);	      Preconditions.checkState(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	34	None	replace
51	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg!=  null);  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg!=  null);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	35	None	replace
52	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg!=  null);  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg!=  null);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	35	None	replace
53	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg  ==  null);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg  ==  null);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	35	None	replace
54	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg!=  null);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg!=  null);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	35	None	replace
55	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg!=  null);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg!=  null);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	35	None	replace
56	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg  ==  null);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg  ==  null);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	35	None	replace
57	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	11	None	replace
58	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	11	None	replace
59	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	11	None	replace
60	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	11	None	replace
61	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	11	None	replace
62	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	11	None	replace
63	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	11	None	replace
64	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	13	None	replace
65	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	13	None	replace
66	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	13	None	replace
67	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	13	None	replace
68	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	13	None	replace
69	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	13	None	replace
70	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	12	None	replace
71	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	12	None	replace
72	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	12	None	replace
73	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	12	None	replace
74	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	12	None	replace
75	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	12	None	replace
76	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	12	None	replace
77	[BUG]  [BUGGY]  Node  parent  =  function.getParent();  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  function.getParent();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getParent();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	16	None	replace
78	[BUG]  [BUGGY]  Node  parent  =  fnScope.getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getLastChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getLastChild();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	16	None	replace
79	[BUG]  [BUGGY]  Node  parent  =  fnScope.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getFirstChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getFirstChild();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	16	None	replace
80	[BUG]  [BUGGY]  Node  parent  =  fnScope.getNext();  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getNext();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getNext();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	16	None	replace
81	[BUG]  [BUGGY]  Node  parent  =  fnScope.getNameNode();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getNameNode();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getNameNode();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	16	None	replace
82	[BUG]  [BUGGY]  Node  parent  =  scope.getParent();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  scope.getParent();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  scope.getParent();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	16	None	replace
83	[BUG]  [BUGGY]  Node  parent  =  fnScope.getCurrentNode();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getCurrentNode();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getCurrentNode();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	16	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isFunction());	      Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	20	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(parentScope.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.isFunction());	      Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	20	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isFunction());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!fnScope.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.isFunction());	      Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	20	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.isConstructor());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isConstructor());	      Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	20	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced());  [CE]  [FE]                          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isUnreferenced());	      Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	20	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isConstructor());  [CE]  [FE]                            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isConstructor());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isConstructor());	      Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	20	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isUnreferenced());  [CE]  [FE]                              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isUnreferenced());	      Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	20	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced());  [CE]  [FE]                                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isUnreferenced());	      Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	20	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1));  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	26	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	26	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	26	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope);	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	26	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	26	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	26	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  lastArg));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  lastArg));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  lastArg));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	26	None	replace
99	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	25	None	replace
100	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	25	None	replace
101	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	25	None	replace
102	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	25	None	replace
103	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	25	None	replace
104	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getShortName()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getShortName()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getShortName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	25	None	replace
105	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	8	None	replace
106	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	8	None	replace
107	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	8	None	replace
108	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	8	None	replace
109	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	8	None	replace
110	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	8	None	replace
111	[BUG]  [BUGGY]  Node  parent  =  function.getParentNode();  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  function.getParentNode();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getParentNode();	      Node    parent    =    fnScope.getParentNode();    	non-compiled	[CE]  	17	None	replace
112	[BUG]  [BUGGY]  Node  parent  =  scope.getParentNode();  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  scope.getParentNode();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  scope.getParentNode();	      Node    parent    =    fnScope.getParentNode();    	non-compiled	[CE]  	17	None	replace
113	[BUG]  [BUGGY]  Node  parent  =  fnScope.getPreviousNode();  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getPreviousNode();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getPreviousNode();	      Node    parent    =    fnScope.getParentNode();    	non-compiled	[CE]  	17	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getRootNode()!=  null);  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getRootNode()!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getRootNode()!=  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	32	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(function.getRootNode()  ==  null);  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.getRootNode()  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getRootNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	32	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getParentNode()  ==  null);  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getParentNode()  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getParentNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	32	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getRootNode()  ==  null);  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(parentScope.getRootNode()  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getRootNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	32	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(function.getRootNode()!=  null);  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.getRootNode()!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getRootNode()!=  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	32	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFunctionNode()  ==  null);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getFunctionNode()  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getFunctionNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	32	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getNode()  ==  null);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getNode()  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	32	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getNameNode()  ==  null);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getNameNode()  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getNameNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	32	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext()));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	22	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastArg()));  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastArg()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastArg()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	22	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getParent()));  [CE]  [FE]                          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getParent()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getParent()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	22	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));  [CE]  [FE]                            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	22	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFunction()));  [CE]  [FE]                              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFunction()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFunction()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	22	None	replace
127	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
128	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
130	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
131	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
132	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
133	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
134	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
135	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
136	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
137	[BUG]  [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
138	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString()  +  1))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString()  +  1))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString()  +  1))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
139	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
140	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString()))  {  [CE]  [FE]                          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isImmutableValue(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
141	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString()))  {  [CE]  [FE]                            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isExpressionNode(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
142	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isImmutableValue(function.getString()))  {  [CE]  [FE]                              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isImmutableValue(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isImmutableValue(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [CE]  [FE]                                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	30	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	30	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()  +  1));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()  +  1));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()  +  1));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	30	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString()));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isName(function.getString()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	30	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	30	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName()));  [CE]  [FE]                          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	30	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(function.getParent()!=  null);  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.getParent()!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getParent()!=  null);	      Preconditions.checkState(fnScope.getParent()!=    null);    	non-compiled	[CE]  	18	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getParent()!=  null);  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(parentScope.getParent()!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getParent()!=  null);	      Preconditions.checkState(fnScope.getParent()!=    null);    	non-compiled	[CE]  	18	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getNameNode()!=  null);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getNameNode()!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getNameNode()!=  null);	      Preconditions.checkState(fnScope.getParent()!=    null);    	non-compiled	[CE]  	18	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(function.getParent()  ==  null);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.getParent()  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getParent()  ==  null);	      Preconditions.checkState(fnScope.getParent()!=    null);    	non-compiled	[CE]  	18	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getNext()!=  null);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getNext()!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getNext()!=  null);	      Preconditions.checkState(fnScope.getParent()!=    null);    	non-compiled	[CE]  	18	None	replace
161	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	10	None	replace
162	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	10	None	replace
163	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	10	None	replace
164	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	2	None	replace
165	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	2	None	replace
166	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	2	None	replace
167	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getFirstChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild();	      Node    lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	15	None	replace
168	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getLastChild();	      Node    lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	15	None	replace
169	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getFirstChild();	      Node    lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	15	None	replace
170	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getNext();  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getNext();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild().getNext();	      Node    lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	15	None	replace
171	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild()  +  1;  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  fnScope.getLastChild()  +  1;  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild()  +  1;	      Node    lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	15	None	replace
172	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.removeFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  fnScope.removeFirstChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.removeFirstChild();	      Node    lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	15	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getLastChild()!=  function);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getLastChild()!=  function);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getLastChild()!=  function);	      Node    lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	15	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getLastChild()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getLastChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getLastChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	29	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	29	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	29	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	29	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isSetKey(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isSetKey(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isSetKey(function.getFirstChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	29	None	replace
179	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	36	None	replace
180	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	36	None	replace
181	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getParent())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getParent())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getParent())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	36	None	replace
182	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	36	None	replace
183	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	36	None	replace
184	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  	7	None	replace
185	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isFunction());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isFunction());  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isFunction());	      	non-compiled	[CE]  	7	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getParentNode()!=  null);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getParentNode()!=  null);  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getParentNode()!=  null);	      	non-compiled	[CE]  	7	None	replace
187	[BUG]  [BUGGY]  Node  lastArg  =  function  ==  null?  null  :  function.getLastChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function  ==  null?  null  :  function.getLastChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function  ==  null?  null  :  function.getLastChild();	      Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	23	None	replace
188	[BUG]  [BUGGY]  Node  lastArg  =  function.removeFirstChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.removeFirstChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.removeFirstChild();	      Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	23	None	replace
189	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild()  +  1;  [CE]  [FE]                            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getLastChild()  +  1;  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild()  +  1;	      Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	23	None	replace
190	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild().getNext();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getLastChild().getNext();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild().getNext();	      Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	23	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getParent()  ==  null);  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(parentScope.getParent()  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getParent()  ==  null);	      Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	19	None	replace
192	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	4	None	replace
193	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	4	None	replace
194	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	4	None	replace
195	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	4	None	replace
196	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	4	None	replace
197	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	4	None	replace
198	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	1	None	replace
199	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	1	None	replace
200	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	1	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	21	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  lastArg));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  lastArg));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  lastArg));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	21	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()  +  1));  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()  +  1));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()  +  1));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	21	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));  [CE]  [FE]                          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	21	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope);	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	21	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()  +  1)  ==  null);  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()  +  1)  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString()  +  1)  ==  null);	      Preconditions.checkState(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	34	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  scope!=  null);  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  scope!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString()),  scope!=  null);	      Preconditions.checkState(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	34	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	26	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	26	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	26	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	26	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getLastChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getLastChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getLastChild();	      Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	23	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  lastArg  =  function.getLastChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  lastArg  =  function.getLastChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  lastArg  =  function.getLastChild();	      Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	23	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  lastArg  =  function.getLastChild();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  lastArg  =  function.getLastChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  lastArg  =  function.getLastChild();	      Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	23	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getFirstChild()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isFunction(function.getFirstChild()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	28	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getFirstChild()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isName(function.getFirstChild()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	28	None	replace
217	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	13	None	replace
218	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	13	None	replace
219	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	13	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	29	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	29	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	29	None	replace
223	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);	      	non-compiled	[CE]  	7	None	replace
224	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);	      	non-compiled	[CE]  	7	None	replace
225	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	9	None	replace
226	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	9	None	replace
227	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	9	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	22	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	22	None	replace
230	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	10	None	replace
231	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	10	None	replace
232	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	10	None	replace
233	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	36	None	replace
234	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [CE]  [FE]                          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.hasChildren());	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isFunction());	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
236	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [CE]  [FE]                              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
239	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
240	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
241	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
242	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString()))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
243	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isName(function.getString()))  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isName(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isName(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
244	[BUG]  [BUGGY]  Node  lastArg  =  scope.getLastChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  scope.getLastChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  scope.getLastChild();	      Node    lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	15	None	replace
245	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getString();  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getString();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild().getString();	      Node    lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	15	None	replace
246	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
247	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
248	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	3	None	replace
249	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	3	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isUnreferenced());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.isUnreferenced());	      Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	20	None	replace
251	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	4	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null);  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function!=  null);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	35	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(function.getNext()  ==  null);  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.getNext()  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getNext()  ==  null);	      Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	19	None	replace
254	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	25	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	30	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	30	None	replace
257	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	30	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  fnScope);	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	30	None	replace
259	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	8	None	replace
260	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
261	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParent(parent);  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getParent(parent);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParent(parent);	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	16	None	replace
262	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOperator();  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getParentOperator();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentOperator();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	16	None	replace
263	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnScope();  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getOwnScope();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getOwnScope();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	16	None	replace
264	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	1	None	replace
265	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	1	None	replace
266	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	1	None	replace
267	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	6	None	replace
268	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	6	None	replace
269	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	6	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkState(scope.getRootNode()  ==  null);  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(scope.getRootNode()  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getRootNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	32	None	replace
271	[BUG]  [BUGGY]  Node  parent  =  fnScope.getConstructorNode();  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getConstructorNode();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getConstructorNode();	      Node    parent    =    fnScope.getParentNode();    	non-compiled	[CE]  	17	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  lastArg);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  lastArg);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  lastArg);	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	21	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(function.getNext()!=  null);  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.getNext()!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getNext()!=  null);	      Preconditions.checkState(fnScope.getParent()!=    null);    	non-compiled	[CE]  	18	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR);  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR);	      Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	19	None	replace
275	[BUG]  [BUGGY]  Node  lastArg  =  function.cloneTree();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.cloneTree();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.cloneTree();	      Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	23	None	replace
276	[BUG]  [BUGGY]  Node  lastArg  =  function.getlastChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getlastChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getlastChild();	      Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	23	None	replace
277	[BUG]  [BUGGY]  Node  lastArg  =  function.lastChild();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.lastChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.lastChild();	      Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	23	None	replace
278	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(lastArg!=  null);  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(lastArg!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg!=  null);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	35	None	replace
281	[BUG]  [BUGGY]  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg!=  null);  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg!=  null);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	35	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	29	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getLastChild()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getLastChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getLastChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	29	None	replace
284	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	1	None	replace
285	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	1	None	replace
286	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isVar(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	1	None	replace
287	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	6	None	replace
288	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	6	None	replace
289	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function))  {	  if(NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	6	None	replace
290	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isFunction(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	36	None	replace
291	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isVar(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	36	None	replace
292	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isFunction(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	36	None	replace
293	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	25	None	replace
294	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	25	None	replace
295	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  function.getLastChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  function.getLastChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  function.getLastChild();	      Node    lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	15	None	replace
296	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  function;  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  function;  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  function;	      Node    lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	15	None	replace
297	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  function.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  function.getFirstChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  function.getFirstChild();	      Node    lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	15	None	replace
298	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.getLastChild()  :  fnScope.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.getLastChild()  :  fnScope.getLastChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  function.getLastChild()  :  fnScope.getLastChild();	      Node    lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	15	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	28	None	replace
300	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	28	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isVar(function.getFirstChild()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isVar(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isVar(function.getFirstChild()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	28	None	replace
302	[BUG]  [BUGGY]  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	33	None	replace
303	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.NAME);	      Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	33	None	replace
304	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	9	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getVar(function.getString())!=  null);  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkArgument(fnScope.getVar(function.getString())!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getVar(function.getString())!=  null);	      Preconditions.checkState(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	34	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.hasVar(function.getString())!=  null);  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.hasVar(function.getString())!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.hasVar(function.getString())!=  null);	      Preconditions.checkState(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	34	None	replace
307	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	4	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getParent()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getParent()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isFunction(function.getParent()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	31	None	replace
309	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	11	None	replace
310	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	11	None	replace
311	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	11	None	replace
312	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	13	None	replace
313	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	13	None	replace
314	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.isFunction());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkArgument(fnScope.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.isFunction());	      Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	20	None	replace
315	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isAll());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isAll());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isAll());	      Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	20	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	20	None	replace
317	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getString()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isFunction(function.getString()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	30	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(function.getString()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(function.getString()));	      Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	30	None	replace
319	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	12	None	replace
320	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	12	None	replace
321	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	12	None	replace
322	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	12	None	replace
323	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getString()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getString()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	26	None	replace
324	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
325	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
326	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [CE]  [FE]                                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
328	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	10	None	replace
329	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getRootNode()!=  null);  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkArgument(fnScope.getRootNode()!=  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getRootNode()!=  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	32	None	replace
330	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getRootNode()  ==  null);  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Preconditions.checkArgument(fnScope.getRootNode()  ==  null);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getRootNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	32	None	replace
331	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfThis();  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getParentOfThis();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentOfThis();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	16	None	replace
332	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfRootNode();  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getParentOfRootNode();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentOfRootNode();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	16	None	replace
333	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentRootNode();  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getParentRootNode();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentRootNode();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	16	None	replace
334	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getParentFirstChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentFirstChild();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	16	None	replace
335	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isFunction(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
336	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
337	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isVar(function.getString()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
338	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	5	None	replace
339	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	8	None	replace
340	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	8	None	replace
341	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerNode();  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  Node  parent  =  fnScope.getOwnerNode();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getOwnerNode();	      Node    parent    =    fnScope.getParentNode();    	non-compiled	[CE]  	17	None	replace
342	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
343	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]          Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());    [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [BUGGY]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
