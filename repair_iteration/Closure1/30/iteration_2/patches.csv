bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function  ==  null);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	252	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope!=  null);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	252	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	252	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(parentScope!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope!=  null);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	252	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	252	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	252	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(fnScope  ==  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope  ==  null);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	252	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isSetKey(function.getString()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isSetKey(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()    +    1));    	non-compiled	[CE]  	92	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getString()  +  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getString()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getString()  +  1));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()    +    1));    	non-compiled	[CE]  	92	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()  +  1));  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()  +  1));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()    +    1));    	non-compiled	[CE]  	92	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()    +    1));    	non-compiled	[CE]  	92	None	replace
12	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	165	None	replace
13	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	165	None	replace
14	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	165	None	replace
15	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	165	None	replace
16	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	165	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isFunction()  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	316	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	316	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isFunction()  &&  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	316	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.getType()!=  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.getType()!=  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	316	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	316	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isFunction()  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	316	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	316	None	replace
24	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	69	None	replace
25	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	69	None	replace
26	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	69	None	replace
27	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	69	None	replace
28	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	69	None	replace
29	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isVar(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isVar(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isVar(function.getFirstChild()))  {	  if(NodeUtil.isVar(function.getFirstChild()))    {    	non-compiled	[CE]  	286	None	replace
30	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isFunction(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isFunction(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isFunction(function.getFirstChild()))  {	  if(NodeUtil.isVar(function.getFirstChild()))    {    	non-compiled	[CE]  	286	None	replace
31	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isVar(function.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isVar(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isVar(function.getLastChild()))  {	  if(NodeUtil.isVar(function.getFirstChild()))    {    	non-compiled	[CE]  	286	None	replace
32	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getLastChild()))  {	  if(NodeUtil.isVar(function.getFirstChild()))    {    	non-compiled	[CE]  	286	None	replace
33	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isVar(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isVar(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isVar(function.getLastChild()))  {	  if(NodeUtil.isVar(function.getFirstChild()))    {    	non-compiled	[CE]  	286	None	replace
34	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isVar(function.getFirstChild()))    {    	non-compiled	[CE]  	286	None	replace
35	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isVar(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isVar(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isVar(function.getFirstChild()))  {	  if(NodeUtil.isVar(function.getFirstChild()))    {    	non-compiled	[CE]  	286	None	replace
36	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isVar(function.getLastChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isVar(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isVar(function.getLastChild()))  {	  if(NodeUtil.isVar(function.getFirstChild()))    {    	non-compiled	[CE]  	286	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(parentScope.getLastChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(parentScope.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(parentScope.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getLastChild()));    	non-compiled	[CE]  	174	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(scope.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(scope.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(scope.getFirstChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getLastChild()));    	non-compiled	[CE]  	174	None	replace
39	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
40	[BUG]  [BUGGY]  if(!isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
41	[BUG]  [BUGGY]  if(isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
42	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  FunctionUtil.mayHaveSecondarySideEffects(function))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  FunctionUtil.mayHaveSecondarySideEffects(function))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)||  FunctionUtil.mayHaveSecondarySideEffects(function))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
43	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  function.isFunction())  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  function.isFunction())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)||  function.isFunction())  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
44	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  isPropertyAssign)  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  isPropertyAssign)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  isPropertyAssign)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
45	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.mayHaveSecondarySideEffects(function))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
46	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
47	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(scope))  {  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(scope))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(scope))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(function.getNameNode()  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getNameNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getNameNode()  ==  null);	  Preconditions.checkState(fnScope.getNameNode()    ==    null);    	non-compiled	[CE]  	121	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(function.getNameNode()!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getNameNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getNameNode()!=  null);	  Preconditions.checkState(fnScope.getNameNode()    ==    null);    	non-compiled	[CE]  	121	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getNameNode()  ==  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getNameNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getNameNode()  ==  null);	  Preconditions.checkState(fnScope.getNameNode()    ==    null);    	non-compiled	[CE]  	121	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFunctionNameNode()  ==  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getFunctionNameNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getFunctionNameNode()  ==  null);	  Preconditions.checkState(fnScope.getNameNode()    ==    null);    	non-compiled	[CE]  	121	None	replace
52	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	342	None	replace
53	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	342	None	replace
54	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	342	None	replace
55	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	342	None	replace
56	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	342	None	replace
57	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	342	None	replace
58	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()!=  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()!=  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()!=  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	342	None	replace
59	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	342	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString())  ==  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString())  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.getVar(function.getString())  ==  null);	  Preconditions.checkState(!fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	50	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString()  +  1)!=  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString()  +  1)!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.getVar(function.getString()  +  1)!=  null);	  Preconditions.checkState(!fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	50	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString()),  isPropertyAssign);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.getVar(function.getString()),  isPropertyAssign);	  Preconditions.checkState(!fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	50	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(!parentScope.getVar(function.getString())!=  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!parentScope.getVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!parentScope.getVar(function.getString())!=  null);	  Preconditions.checkState(!fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	50	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString()),  true);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString()),  true);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.getVar(function.getString()),  true);	  Preconditions.checkState(!fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	50	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString()).isEmpty());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString()).isEmpty());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.getVar(function.getString()).isEmpty());	  Preconditions.checkState(!fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	50	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString()),  isPropertyAssign)  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString()),  isPropertyAssign)  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.getVar(function.getString()),  isPropertyAssign)	  Preconditions.checkState(!fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	50	None	replace
67	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	62	None	replace
68	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	62	None	replace
69	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	62	None	replace
70	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	62	None	replace
71	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	62	None	replace
72	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	62	None	replace
73	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	62	None	replace
74	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	62	None	replace
75	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);	  Node    lastArg    =    function.getFirstChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	128	None	replace
76	[BUG]  [BUGGY]  Node  parent  =  function.getOwnerNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getOwnerNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getOwnerNode();	  Node    parent    =    fnScope.getOwnerNode();    	non-compiled	[CE]  	341	None	replace
77	[BUG]  [BUGGY]  Node  parent  =  scope.getOwnerNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  scope.getOwnerNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  scope.getOwnerNode();	  Node    parent    =    fnScope.getOwnerNode();    	non-compiled	[CE]  	341	None	replace
78	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getOwnerParent();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getOwnerParent();	  Node    parent    =    fnScope.getOwnerNode();    	non-compiled	[CE]  	341	None	replace
79	[BUG]  [BUGGY]  Node  lastArg  =  function.removeLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.removeLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.removeLastChild();	  Node    lastArg    =    fnScope.removeFirstChild();    	non-compiled	[CE]  	172	None	replace
80	[BUG]  [BUGGY]  Node  lastArg  =  function.replaceFirst(fnScope.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.replaceFirst(fnScope.getLastChild());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.replaceFirst(fnScope.getLastChild());	  Node    lastArg    =    fnScope.removeFirstChild();    	non-compiled	[CE]  	172	None	replace
81	[BUG]  [BUGGY]  Node  lastArg  =  function.replaceChild(fnScope.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.replaceChild(fnScope.getLastChild());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.replaceChild(fnScope.getLastChild());	  Node    lastArg    =    fnScope.removeFirstChild();    	non-compiled	[CE]  	172	None	replace
82	[BUG]  [BUGGY]  Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  null);	  Node    lastArg    =    fnScope.removeFirstChild();    	non-compiled	[CE]  	172	None	replace
83	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.removeFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.removeFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.removeFirstChild();	  Node    lastArg    =    fnScope.removeFirstChild();    	non-compiled	[CE]  	172	None	replace
84	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.removeLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.removeLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.removeLastChild();	  Node    lastArg    =    fnScope.removeFirstChild();    	non-compiled	[CE]  	172	None	replace
85	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	64	None	replace
86	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	64	None	replace
87	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	64	None	replace
88	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	64	None	replace
89	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getChildCount()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getChildCount()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getChildCount()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	64	None	replace
90	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	260	None	replace
91	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()!=  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()!=  Token.FUNCTION);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	260	None	replace
92	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	260	None	replace
93	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	260	None	replace
94	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
95	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
96	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
97	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
98	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
99	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isExpressionNode(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	320	None	replace
100	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isExpressionNode(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	320	None	replace
101	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isExpressionNode(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	320	None	replace
102	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isExpressionNode(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	320	None	replace
103	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isExpressionNode(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	320	None	replace
104	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isExpressionNode(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	320	None	replace
105	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isExpressionNode(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	320	None	replace
106	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
107	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
108	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
109	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
110	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
111	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLocalName()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLocalName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLocalName()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
112	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
113	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
114	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);	  Node    lastArg    =    fnScope.getFirstChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	10	None	replace
115	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg  ==  null);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg    ==    null);    	non-compiled	[CE]  	53	None	replace
116	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg  ==  null);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg    ==    null);    	non-compiled	[CE]  	53	None	replace
117	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg  ==  null);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg    ==    null);    	non-compiled	[CE]  	53	None	replace
118	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);	  Node    lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg.getType()!=    Token.NAME);    	non-compiled	[CE]  	13	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()!=  Token.NAME);	  Node    lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg.getType()!=    Token.NAME);    	non-compiled	[CE]  	13	None	replace
120	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(function.getType()!=  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(function.getType()!=  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(function.getType()!=  Token.NAME);	  Node    lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg.getType()!=    Token.NAME);    	non-compiled	[CE]  	13	None	replace
121	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);	  Node    lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg.getType()!=    Token.NAME);    	non-compiled	[CE]  	13	None	replace
122	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	269	None	replace
123	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	269	None	replace
124	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	269	None	replace
125	[BUG]  [BUGGY]  if(!isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	269	None	replace
126	[BUG]  [BUGGY]  if(isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	269	None	replace
127	[BUG]  [BUGGY]  if(NodeUtil.canHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.canHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.canHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	269	None	replace
128	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	269	None	replace
129	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	269	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getType()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getType()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getNext()));    	non-compiled	[CE]  	30	None	replace
131	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(function.getString()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isExpressionNode(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isExpressionNode(function.getString()))  {	  if(NodeUtil.isExpressionNode(function.getString()))    {    	non-compiled	[CE]  	141	None	replace
132	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getType())||  NodeUtil.isExpressionNode(function.getString()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getType())||  NodeUtil.isExpressionNode(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getType())||  NodeUtil.isExpressionNode(function.getString()))  {	  if(NodeUtil.isExpressionNode(function.getString()))    {    	non-compiled	[CE]  	141	None	replace
133	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getQualifiedName()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getQualifiedName()))  {	  if(NodeUtil.isExpressionNode(function.getString()))    {    	non-compiled	[CE]  	141	None	replace
134	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isExpressionNode(function.getString()))    {    	non-compiled	[CE]  	141	None	replace
135	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getType()))  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getType()))  {	  if(NodeUtil.isExpressionNode(function.getString()))    {    	non-compiled	[CE]  	141	None	replace
136	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isExpressionNode(function.getString()))    {    	non-compiled	[CE]  	141	None	replace
137	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isExpressionNode(function.getType()))  {  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isExpressionNode(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isExpressionNode(function.getType()))  {	  if(NodeUtil.isExpressionNode(function.getString()))    {    	non-compiled	[CE]  	141	None	replace
138	[BUG]  [BUGGY]  Node  parent  =  function.getParentNode();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getParentNode();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getParentNode();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	184	None	replace
139	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	184	None	replace
140	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	184	None	replace
141	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	184	None	replace
142	[BUG]  [BUGGY]  Node  parent  =  fnScope.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	184	None	replace
143	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode();  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentNode();  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode();  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	184	None	replace
144	[BUG]  [BUGGY]  Node  parent  =  fnScope.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	184	None	replace
145	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	60	None	replace
146	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	60	None	replace
147	[BUG]  [BUGGY]  if(NodeUtil.isSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	60	None	replace
148	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild();  preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild();  preconditions.checkState(lastArg.getType()  ==  Token.NAME);	  Node    lastArg    =    function.getLastChild();    preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	303	None	replace
149	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(function.getType()  ==  Token.NAME);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  preconditions.checkState(function.getType()  ==  Token.NAME);	  Node    lastArg    =    function.getLastChild();    preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	303	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.NAME);	  Node    lastArg    =    function.getLastChild();    preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	303	None	replace
151	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()!=  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()!=  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()!=  Token.NAME);	  Node    lastArg    =    function.getLastChild();    preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	303	None	replace
152	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(fnScope.getType()  ==  Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(fnScope.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  preconditions.checkState(fnScope.getType()  ==  Token.NAME);	  Node    lastArg    =    function.getLastChild();    preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	303	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getVar(function.getString()),  scope!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getVar(function.getString()),  scope!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getVar(function.getString()),  scope!=  null);	  Preconditions.checkState(fnScope.getVar(function.getString()),    scope!=    null);    	non-compiled	[CE]  	207	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  parentScope!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  parentScope!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString()),  parentScope!=  null);	  Preconditions.checkState(fnScope.getVar(function.getString()),    scope!=    null);    	non-compiled	[CE]  	207	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(function.getVar(function.getString()),  scope!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getVar(function.getString()),  scope!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getVar(function.getString()),  scope!=  null);	  Preconditions.checkState(fnScope.getVar(function.getString()),    scope!=    null);    	non-compiled	[CE]  	207	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(scope.getVar(function.getString()),  function!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getVar(function.getString()),  function!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getVar(function.getString()),  function!=  null);	  Preconditions.checkState(fnScope.getVar(function.getString()),    scope!=    null);    	non-compiled	[CE]  	207	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  scope  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  scope  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString()),  scope  ==  null);	  Preconditions.checkState(fnScope.getVar(function.getString()),    scope!=    null);    	non-compiled	[CE]  	207	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(scope.getVar(function.getString()),  fnScope!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getVar(function.getString()),  fnScope!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getVar(function.getString()),  fnScope!=  null);	  Preconditions.checkState(fnScope.getVar(function.getString()),    scope!=    null);    	non-compiled	[CE]  	207	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  var!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  var!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString()),  var!=  null);	  Preconditions.checkState(fnScope.getVar(function.getString()),    scope!=    null);    	non-compiled	[CE]  	207	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  function!=  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  function!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString()),  function!=  null);	  Preconditions.checkState(fnScope.getVar(function.getString()),    scope!=    null);    	non-compiled	[CE]  	207	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	146	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	146	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	146	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.FUNCTION);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	146	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	146	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	146	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	146	None	replace
168	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	246	None	replace
169	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	246	None	replace
170	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isAssignmentOp(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isAssignmentOp(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isAssignmentOp(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	246	None	replace
171	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isForIn(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isForIn(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isForIn(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	246	None	replace
172	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	246	None	replace
173	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getChildCount()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getChildCount()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getChildCount()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	246	None	replace
174	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetAndSetKey(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetAndSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetAndSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	246	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.isFunction()  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.isFunction()  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.isFunction()  &&  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(fnScope.isFunction());    	non-compiled	[CE]  	314	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.isFunction());	  Preconditions.checkArgument(fnScope.isFunction());    	non-compiled	[CE]  	314	None	replace
177	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isFunction(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	304	None	replace
178	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isFunction(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	304	None	replace
179	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isFunction(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	304	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	154	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()  +  1));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()  +  1));	  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	154	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()),  fnScope);	  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	154	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isImmutableValue(function.getString()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isImmutableValue(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isImmutableValue(function.getString()));	  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	154	None	replace
184	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	251	None	replace
185	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	251	None	replace
186	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	251	None	replace
187	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	251	None	replace
188	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	251	None	replace
189	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	251	None	replace
190	[BUG]  [BUGGY]  if(!NodeUtil.isName(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isName(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isName(function.getString()))  {	  if(NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	242	None	replace
191	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	242	None	replace
192	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getQualifiedName()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getQualifiedName()))  {	  if(NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	242	None	replace
193	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isImmutableValue(function.getString()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isImmutableValue(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isImmutableValue(function.getString()))  {	  if(NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	242	None	replace
194	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString()  +  1))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString()  +  1))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString()  +  1))  {	  if(NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	242	None	replace
195	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isFunction(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	217	None	replace
196	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isFunction(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	217	None	replace
197	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isFunction(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	217	None	replace
198	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild();  preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild();  preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);	  Node    lastArg    =    function.getLastChild();    preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	278	None	replace
199	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  preconditions.checkState(function.getType()  ==  Token.FUNCTION);	  Node    lastArg    =    function.getLastChild();    preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	278	None	replace
200	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);	  Node    lastArg    =    function.getLastChild();    preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	278	None	replace
201	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);	  Node    lastArg    =    function.getLastChild();    preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	278	None	replace
202	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getFirstChild()  :  function;  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getFirstChild()  :  function;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  fnScope.getFirstChild()  :  function;	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function;    	non-compiled	[CE]  	296	None	replace
203	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  null;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  null;	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function;    	non-compiled	[CE]  	296	None	replace
204	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  parentScope;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  parentScope;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  parentScope;	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function;    	non-compiled	[CE]  	296	None	replace
205	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  node;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  node;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  node;	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function;    	non-compiled	[CE]  	296	None	replace
206	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  parentScope.getLastChild()  :  function;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  parentScope.getLastChild()  :  function;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  parentScope.getLastChild()  :  function;	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function;    	non-compiled	[CE]  	296	None	replace
207	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  nameNode;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  nameNode;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  nameNode;	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function;    	non-compiled	[CE]  	296	None	replace
208	[BUG]  [BUGGY]  Node  lastArg  =  function!=  null?  function.hasChildren()  :  fnScope.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function!=  null?  function.hasChildren()  :  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function!=  null?  function.hasChildren()  :  fnScope.getLastChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function;    	non-compiled	[CE]  	296	None	replace
209	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.hasChildren()?  function.getLastChild()  :  function;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.hasChildren()?  function.getLastChild()  :  function;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.hasChildren()?  function.getLastChild()  :  function;	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function;    	non-compiled	[CE]  	296	None	replace
210	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	5	None	replace
211	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent())  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent())	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	5	None	replace
212	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	5	None	replace
213	[BUG]  [BUGGY]  if(NodeUtil.isSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	5	None	replace
214	[BUG]  [BUGGY]  if(NodeUtil.isForIn(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isForIn(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isForIn(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	5	None	replace
215	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	5	None	replace
216	[BUG]  [BUGGY]  Node  lastArg  =  function!=  null?  function.getLastChild()  :  function.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function!=  null?  function.getLastChild()  :  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function!=  null?  function.getLastChild()  :  function.getLastChild();	  Node    lastArg    =    function.getlastChild();    	non-compiled	[CE]  	276	None	replace
217	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getlastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getlastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getlastChild();	  Node    lastArg    =    function.getlastChild();    	non-compiled	[CE]  	276	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getlastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getlastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getlastChild();	  Node    lastArg    =    function.getlastChild();    	non-compiled	[CE]  	276	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(function.getParentNode()  ==  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getParentNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getParentNode()  ==  null);	  Preconditions.checkState(fnScope.getParentNode()    ==    null);    	non-compiled	[CE]  	116	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getParentNode()  ==  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getParentNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getParentNode()  ==  null);	  Preconditions.checkState(fnScope.getParentNode()    ==    null);    	non-compiled	[CE]  	116	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkState(function.getParentNode()!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getParentNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getParentNode()!=  null);	  Preconditions.checkState(fnScope.getParentNode()    ==    null);    	non-compiled	[CE]  	116	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getNextNode()  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getNextNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getNextNode()  ==  null);	  Preconditions.checkState(fnScope.getParentNode()    ==    null);    	non-compiled	[CE]  	116	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getParentNode()!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getParentNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getParentNode()!=  null);	  Preconditions.checkState(fnScope.getParentNode()    ==    null);    	non-compiled	[CE]  	116	None	replace
224	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(fnScope.getType()  ==  Token.NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(fnScope.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(fnScope.getType()  ==  Token.NAME);	  Node    lastArg    =    function.getFirstChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	7	None	replace
225	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	259	None	replace
226	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	259	None	replace
227	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	259	None	replace
228	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	259	None	replace
229	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	259	None	replace
230	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getLastChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	259	None	replace
231	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	57	None	replace
232	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	57	None	replace
233	[BUG]  [BUGGY]  Node  parent  =  fnScope.getNextNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getNextNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getNextNode();	  Node    parent    =    scope.getParentNode();    	non-compiled	[CE]  	112	None	replace
234	[BUG]  [BUGGY]  Node  parent  =  this.parentScope.getParentNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  this.parentScope.getParentNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  this.parentScope.getParentNode();	  Node    parent    =    scope.getParentNode();    	non-compiled	[CE]  	112	None	replace
235	[BUG]  [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
236	[BUG]  [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getFirstChild())||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getFirstChild())||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isGetOrSetKey(function.getFirstChild())||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
237	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&!NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&!NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&!NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
238	[BUG]  [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getFirstChild())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getFirstChild())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isGetOrSetKey(function.getFirstChild())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
239	[BUG]  [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getFirstChild())&&!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getFirstChild())&&!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isGetOrSetKey(function.getFirstChild())&&!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
240	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
241	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&!NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&!NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&!NodeUtil.isGetOrSetKey(function.getString()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
242	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	103	None	replace
243	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	103	None	replace
244	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	103	None	replace
245	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	103	None	replace
246	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	103	None	replace
247	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	103	None	replace
248	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	103	None	replace
249	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	100	None	replace
250	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	100	None	replace
251	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	100	None	replace
252	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	100	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(scope.getRootNode()!=  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getRootNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getRootNode()!=  null);	  Preconditions.checkState(scope.getRootNode()    ==    null);    	non-compiled	[CE]  	270	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(this.parentScope.getRootNode()  ==  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(this.parentScope.getRootNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(this.parentScope.getRootNode()  ==  null);	  Preconditions.checkState(scope.getRootNode()    ==    null);    	non-compiled	[CE]  	270	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getRootNode()!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getRootNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getRootNode()!=  null);	  Preconditions.checkState(scope.getRootNode()    ==    null);    	non-compiled	[CE]  	270	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	257	None	replace
257	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	257	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getNext()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	257	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	257	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isName(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	257	None	replace
261	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getType())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getType())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getType())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getType())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	180	None	replace
262	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getType())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getType())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getType())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getType())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	180	None	replace
263	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getType())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getType())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getType())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getType())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	180	None	replace
264	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getType())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getType())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getType())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getType())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	180	None	replace
265	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getType())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	180	None	replace
266	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getType())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	180	None	replace
267	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getType())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getType())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getType())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getType())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	180	None	replace
268	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getType())&&  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getType())&&  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getType())&&  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getType())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	180	None	replace
269	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getType())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getType())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getType())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getType())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	180	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	145	None	replace
271	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	145	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	145	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	145	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.VAR);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	145	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	145	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	145	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	145	None	replace
278	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);	  Node    lastArg    =    fnScope.getFirstChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	131	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkState(function.isFunction());    	non-compiled	[CE]  	84	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!function.isFunction());	  Preconditions.checkState(function.isFunction());    	non-compiled	[CE]  	84	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  function.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  function.isFunction());	  Preconditions.checkState(function.isFunction());    	non-compiled	[CE]  	84	None	replace
282	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	266	None	replace
283	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	266	None	replace
284	[BUG]  [BUGGY]  if(NodeUtil.isSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	266	None	replace
285	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	266	None	replace
286	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	266	None	replace
287	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	249	None	replace
288	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	249	None	replace
289	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent())  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent())	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	249	None	replace
290	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	249	None	replace
291	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	249	None	replace
292	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	249	None	replace
293	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	249	None	replace
294	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	249	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	147	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.GETPROP);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.GETPROP);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	147	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.GETPROP);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.GETPROP);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	147	None	replace
298	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	147	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.GETPROP);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.GETPROP);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	147	None	replace
300	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	147	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.GETPROP  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.GETPROP  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.GETPROP  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	147	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	147	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	238	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getRootNode()!=  null);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getRootNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	238	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	238	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParentNode()!=  null);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParentNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParentNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	238	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	238	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getRootNode()!=  null);  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getRootNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	238	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [CE]  [FE]                                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	238	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getParentNode()  ==  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getParentNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getParentNode()  ==  null);	  Preconditions.checkArgument(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	330	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getRootNode()  ==  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getRootNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getRootNode()  ==  null);	  Preconditions.checkArgument(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	330	None	replace
312	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getRootNode()!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getRootNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getRootNode()!=  null);	  Preconditions.checkArgument(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	330	None	replace
313	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getFunctionNode()  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getFunctionNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getFunctionNode()  ==  null);	  Preconditions.checkArgument(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	330	None	replace
314	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getParentNode()!=  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getParentNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getParentNode()!=  null);	  Preconditions.checkArgument(fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	329	None	replace
315	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getFunctionNode()!=  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getFunctionNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getFunctionNode()!=  null);	  Preconditions.checkArgument(fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	329	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getNode()!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getNode()!=  null);	  Preconditions.checkArgument(fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	329	None	replace
317	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkArgument(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	324	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()!=  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	324	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);	  Preconditions.checkArgument(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	324	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()!=  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	324	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkArgument(parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	324	None	replace
322	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild()  +  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild()  +  1;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild()  +  1;	  Node    lastArg    =    function.getLastChild()    +    1;    	non-compiled	[CE]  	189	None	replace
323	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild()  /  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild()  /  1;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild()  /  1;	  Node    lastArg    =    function.getLastChild()    +    1;    	non-compiled	[CE]  	189	None	replace
324	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild()  /  1;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild()  /  1;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild()  /  1;	  Node    lastArg    =    function.getLastChild()    +    1;    	non-compiled	[CE]  	189	None	replace
325	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  parent));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  parent));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  parent));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    lastArg));    	non-compiled	[CE]  	98	None	replace
326	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getParent()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    lastArg));    	non-compiled	[CE]  	98	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  nameNode));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  nameNode));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  nameNode));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    lastArg));    	non-compiled	[CE]  	98	None	replace
328	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  predicate));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  predicate));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  predicate));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    lastArg));    	non-compiled	[CE]  	98	None	replace
329	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    lastArg));    	non-compiled	[CE]  	98	None	replace
330	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  argList));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  argList));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  argList));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    lastArg));    	non-compiled	[CE]  	98	None	replace
331	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  null));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  null));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  null));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    lastArg));    	non-compiled	[CE]  	98	None	replace
332	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString(),  lastArg));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString(),  lastArg));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString(),  lastArg));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    lastArg));    	non-compiled	[CE]  	98	None	replace
333	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getName()));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getName()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    lastArg));    	non-compiled	[CE]  	98	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	299	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	299	None	replace
336	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  lastArg));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  lastArg));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  lastArg));	  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	299	None	replace
337	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isSetKey(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isSetKey(function.getFirstChild()));	  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	299	None	replace
338	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isFunction(function.getNext())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	292	None	replace
339	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isFunction(function.getNext())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	292	None	replace
340	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isFunction(function.getNext())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	292	None	replace
341	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getType())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getType())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getType())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isFunction(function.getNext())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	292	None	replace
342	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  isPropertyAssign);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));    	non-compiled	[CE]  	229	None	replace
343	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()  +  1));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()  +  1));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));    	non-compiled	[CE]  	229	None	replace
344	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getQualifiedName()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getQualifiedName()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getQualifiedName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));    	non-compiled	[CE]  	229	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  fnScope);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));    	non-compiled	[CE]  	229	None	replace
346	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  false);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  false);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  false);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));    	non-compiled	[CE]  	229	None	replace
347	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  parent));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  parent));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  parent));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	42	None	replace
348	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastChild(),  lastArg));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastChild(),  lastArg));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastChild(),  lastArg));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	42	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	42	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild(),  lastArg));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild(),  lastArg));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild(),  lastArg));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	42	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getParent()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getParent()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	42	None	replace
352	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getNext()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getNext()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getNext()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	42	None	replace
353	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	42	None	replace
354	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getFirstChild(),  lastArg));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getFirstChild(),  lastArg));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getFirstChild(),  lastArg));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	42	None	replace
355	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	3	None	replace
356	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	3	None	replace
357	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	3	None	replace
358	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	3	None	replace
359	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	3	None	replace
360	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	3	None	replace
361	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isVar(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	291	None	replace
362	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getParent())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getParent())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getParent())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isVar(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	291	None	replace
363	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isImmutableValue(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	232	None	replace
364	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isImmutableValue(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	232	None	replace
365	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {	  if(NodeUtil.isImmutableValue(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	232	None	replace
366	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isImmutableValue(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	232	None	replace
367	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isLiteralValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isLiteralValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isImmutableValue(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	232	None	replace
368	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	192	None	replace
369	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	192	None	replace
370	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	192	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	210	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getNext()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	210	None	replace
373	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	210	None	replace
374	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	210	None	replace
375	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getType()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	210	None	replace
376	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	210	None	replace
377	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGet(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	322	None	replace
378	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isGet(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	322	None	replace
379	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())||  NodeUtil.isSetKey(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())||  NodeUtil.isSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getFirstChild())||  NodeUtil.isSetKey(function.getString()))  {	  if(NodeUtil.isGet(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	322	None	replace
380	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGet(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	322	None	replace
381	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGet(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	322	None	replace
382	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getLastChild())&&  NodeUtil.isSetKey(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getLastChild())&&  NodeUtil.isSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getLastChild())&&  NodeUtil.isSetKey(function.getString()))  {	  if(NodeUtil.isGet(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	322	None	replace
383	[BUG]  [BUGGY]  if(NodeUtil.isGet(fnScope.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(fnScope.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(fnScope.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGet(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	322	None	replace
384	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isGet(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	322	None	replace
385	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	247	None	replace
386	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	247	None	replace
387	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getType())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	247	None	replace
388	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	32	None	replace
389	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isSetKey(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	32	None	replace
390	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	32	None	replace
391	[BUG]  [BUGGY]  if(NodeUtil.isType(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isType(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isType(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	32	None	replace
392	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	32	None	replace
393	[BUG]  [BUGGY]  Node  parent  =  function.getNext();  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getNext();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getNext();	  Node    parent    =    function.getParent();    	non-compiled	[CE]  	77	None	replace
394	[BUG]  [BUGGY]  Node  parent  =  function.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getLastChild();	  Node    parent    =    function.getParent();    	non-compiled	[CE]  	77	None	replace
395	[BUG]  [BUGGY]  Node  parent  =  function.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getFirstChild();	  Node    parent    =    function.getParent();    	non-compiled	[CE]  	77	None	replace
396	[BUG]  [BUGGY]  Node  parent  =  function.getImmediateParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getImmediateParent();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getImmediateParent();	  Node    parent    =    function.getParent();    	non-compiled	[CE]  	77	None	replace
397	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  isPropertyAssign);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	93	None	replace
398	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  isPropertyAssign);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	93	None	replace
399	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1),  isPropertyAssign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	93	None	replace
400	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign,  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign,  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	93	None	replace
401	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign,  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign,  parent);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign,  parent);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	93	None	replace
402	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign,  lastArg);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign,  lastArg);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign,  lastArg);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	93	None	replace
403	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	65	None	replace
404	[BUG]  [BUGGY]  if(NodeUtil.isName(fnScope.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(fnScope.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(fnScope.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	65	None	replace
405	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isVar(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	309	None	replace
406	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isVar(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	309	None	replace
407	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isVar(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	309	None	replace
408	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	136	None	replace
409	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	136	None	replace
410	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	136	None	replace
411	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getType())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getType())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getType())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	136	None	replace
412	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getName())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getName())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getName())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	136	None	replace
413	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	136	None	replace
414	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	136	None	replace
415	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isVar(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	294	None	replace
416	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isVar(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	294	None	replace
417	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isVar(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	294	None	replace
418	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isVar(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	294	None	replace
419	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getNext())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getNext())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getNext())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getParent())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	181	None	replace
420	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	148	None	replace
421	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	148	None	replace
422	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	148	None	replace
423	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	148	None	replace
424	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	148	None	replace
425	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	148	None	replace
426	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	148	None	replace
427	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	148	None	replace
428	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getNext()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	228	None	replace
429	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()),  mayHaveSecondarySideEffects);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()),  mayHaveSecondarySideEffects);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()),  mayHaveSecondarySideEffects);	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	228	None	replace
430	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()),  isPropertyAssign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	228	None	replace
431	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getType()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	228	None	replace
432	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastArg()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastArg()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastArg()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	228	None	replace
433	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	72	None	replace
434	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	72	None	replace
435	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	72	None	replace
436	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	72	None	replace
437	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isVar(function.getString())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	26	None	replace
438	[BUG]  [BUGGY]  Preconditions.checkState(function.getNode()!=  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getNode()!=  null);	  Preconditions.checkState(function.getRootNode()    ==    null);    	non-compiled	[CE]  	115	None	replace
439	[BUG]  [BUGGY]  Preconditions.checkState(function.getFirstChild()  ==  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getFirstChild()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getFirstChild()  ==  null);	  Preconditions.checkState(function.getRootNode()    ==    null);    	non-compiled	[CE]  	115	None	replace
440	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	241	None	replace
441	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	241	None	replace
442	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	241	None	replace
443	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	241	None	replace
444	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	241	None	replace
445	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	241	None	replace
446	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getName()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	241	None	replace
447	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isName(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));    	non-compiled	[CE]  	300	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(fnScope.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(fnScope.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isFunction(fnScope.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));    	non-compiled	[CE]  	300	None	replace
449	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isImmutableValue(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));    	non-compiled	[CE]  	300	None	replace
450	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVar(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isVar(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isVar(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));    	non-compiled	[CE]  	300	None	replace
451	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(function.getFirstChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isAssignmentOp(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));    	non-compiled	[CE]  	300	None	replace
452	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	209	None	replace
453	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	209	None	replace
454	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	209	None	replace
455	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	209	None	replace
456	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	209	None	replace
457	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getType()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	209	None	replace
458	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	209	None	replace
459	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNameNode()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNameNode()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNameNode()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	209	None	replace
460	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	25	None	replace
461	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isSetKey(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	25	None	replace
462	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	25	None	replace
463	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	25	None	replace
464	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isSetKey(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	25	None	replace
465	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getPrevious()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getPrevious()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getPrevious()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext()));    	non-compiled	[CE]  	122	None	replace
466	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext()));    	non-compiled	[CE]  	122	None	replace
467	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	71	None	replace
468	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	71	None	replace
469	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	71	None	replace
470	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	71	None	replace
471	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastChild()),  isPropertyAssign);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastChild()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastChild()),  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	41	None	replace
472	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild())||  isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild())||  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild())||  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	41	None	replace
473	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild())&&  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild())&&  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild())&&  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	41	None	replace
474	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(isPropertyAssign  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	41	None	replace
475	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  isPropertyAssign);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	41	None	replace
476	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isPropertyAssign(function.getFirstChild()),  isPropertyAssign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isPropertyAssign(function.getFirstChild()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isPropertyAssign(function.getFirstChild()),  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	41	None	replace
477	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  isPropertyAssign);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	41	None	replace
478	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));	  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	28	None	replace
479	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getNext()));	  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	28	None	replace
480	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getType()));	  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	28	None	replace
481	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getLastArg()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getLastArg()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getLastArg()));	  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	28	None	replace
482	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	194	None	replace
483	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	194	None	replace
484	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	194	None	replace
485	[BUG]  [BUGGY]  if(NodeUtil.isSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	194	None	replace
486	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getParent())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getParent())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getParent())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isFunction(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	290	None	replace
487	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isFunction(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	290	None	replace
488	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
489	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetAndSetKey(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetAndSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetAndSetKey(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
490	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isFunctionDeclaration(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isFunctionDeclaration(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isFunctionDeclaration(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
491	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isAssignmentOp(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isAssignmentOp(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isAssignmentOp(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
492	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isConstructorOp(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isConstructorOp(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isConstructorOp(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
493	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
494	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString())||  node.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString())||  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString())||  node.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
495	[BUG]  [BUGGY]  Preconditions.checkState(!function.isUnreferenced());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!function.isUnreferenced());	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	91	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isUnreferenced());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isUnreferenced());	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	91	None	replace
497	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isUnreferenced());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.isUnreferenced());	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	91	None	replace
498	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isName(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isName(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isName(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	243	None	replace
499	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isFunction(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isFunction(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isFunction(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	243	None	replace
500	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isAssignmentOp(function.getString()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isAssignmentOp(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isAssignmentOp(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	243	None	replace
501	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isVar(function.getString()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isVar(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isVar(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	243	None	replace
502	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isFunction(function.getString()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isFunction(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isFunction(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	243	None	replace
503	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isName(function.getString()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isName(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isName(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	243	None	replace
504	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isExpressionNode(function.getString()))  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isExpressionNode(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isExpressionNode(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	243	None	replace
505	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isName(function.getString())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isName(function.getString())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isName(function.getString())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	243	None	replace
506	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	17	None	replace
507	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	17	None	replace
508	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	17	None	replace
509	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	17	None	replace
510	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getLastCh  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getLastCh  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getLastCh	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	17	None	replace
511	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	108	None	replace
512	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isSetKey(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	108	None	replace
513	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	108	None	replace
514	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	108	None	replace
515	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isFunction(function.getParent()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isFunction(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isFunction(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	108	None	replace
516	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isSetKey(function.getNext()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	108	None	replace
517	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	108	None	replace
518	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFunctionNode()!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getFunctionNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getFunctionNode()!=  null);	  Preconditions.checkState(fnScope.getFunctionNode()    ==    null);    	non-compiled	[CE]  	119	None	replace
519	[BUG]  [BUGGY]  Preconditions.checkState(function.getFunctionNode()  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getFunctionNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getFunctionNode()  ==  null);	  Preconditions.checkState(fnScope.getFunctionNode()    ==    null);    	non-compiled	[CE]  	119	None	replace
520	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getFunctionNode()  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getFunctionNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getFunctionNode()  ==  null);	  Preconditions.checkState(fnScope.getFunctionNode()    ==    null);    	non-compiled	[CE]  	119	None	replace
521	[BUG]  [BUGGY]  Preconditions.checkState(function.getFunctionNode()!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getFunctionNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getFunctionNode()!=  null);	  Preconditions.checkState(fnScope.getFunctionNode()    ==    null);    	non-compiled	[CE]  	119	None	replace
522	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getCurrentNode()  ==  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getCurrentNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getCurrentNode()  ==  null);	  Preconditions.checkState(fnScope.getFunctionNode()    ==    null);    	non-compiled	[CE]  	119	None	replace
523	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getType()))    {    	non-compiled	[CE]  	231	None	replace
524	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getType()))    {    	non-compiled	[CE]  	231	None	replace
525	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getType()))    {    	non-compiled	[CE]  	231	None	replace
526	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getType()))    {    	non-compiled	[CE]  	231	None	replace
527	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getType()))    {    	non-compiled	[CE]  	231	None	replace
528	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getType()))    {    	non-compiled	[CE]  	231	None	replace
529	[BUG]  [BUGGY]  if(NodeUtil.isGetProp(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetProp(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetProp(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getType()))    {    	non-compiled	[CE]  	231	None	replace
530	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getType()))    {    	non-compiled	[CE]  	231	None	replace
531	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType())||  function.hasChildren())  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType())||  function.hasChildren())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType())||  function.hasChildren())  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getType()))    {    	non-compiled	[CE]  	231	None	replace
532	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	67	None	replace
533	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	67	None	replace
534	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	67	None	replace
535	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	67	None	replace
536	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	67	None	replace
537	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	67	None	replace
538	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()  +  1))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()  +  1))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()  +  1))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	67	None	replace
539	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	67	None	replace
540	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName())||  function.isFunction())  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName())||  function.isFunction())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName())||  function.isFunction())  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	67	None	replace
541	[BUG]  [BUGGY]  Preconditions.checkState(function.getVar(function.getString())  ==  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getVar(function.getString())  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getVar(function.getString())  ==  null);	  Preconditions.checkState(fnScope.getVar(function.getString()    +    1)    ==    null);    	non-compiled	[CE]  	206	None	replace
542	[BUG]  [BUGGY]  Preconditions.checkState(function.getVar(function.getString()  +  1)  ==  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getVar(function.getString()  +  1)  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getVar(function.getString()  +  1)  ==  null);	  Preconditions.checkState(fnScope.getVar(function.getString()    +    1)    ==    null);    	non-compiled	[CE]  	206	None	replace
543	[BUG]  [BUGGY]  Preconditions.checkState(function.getVar(function.getString()  +  1)!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getVar(function.getString()  +  1)!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getVar(function.getString()  +  1)!=  null);	  Preconditions.checkState(fnScope.getVar(function.getString()    +    1)    ==    null);    	non-compiled	[CE]  	206	None	replace
544	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getVar(function.getString()  +  1)  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getVar(function.getString()  +  1)  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getVar(function.getString()  +  1)  ==  null);	  Preconditions.checkState(fnScope.getVar(function.getString()    +    1)    ==    null);    	non-compiled	[CE]  	206	None	replace
545	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isSetKey(function.getNext()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	24	None	replace
546	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getType()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getType()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));    	non-compiled	[CE]  	204	None	replace
547	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()),  isPropertyAssign);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));    	non-compiled	[CE]  	204	None	replace
548	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));    	non-compiled	[CE]  	204	None	replace
549	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType(),  lastArg));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType(),  lastArg));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType(),  lastArg));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));    	non-compiled	[CE]  	204	None	replace
550	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	267	None	replace
551	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	267	None	replace
552	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	267	None	replace
553	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	267	None	replace
554	[BUG]  [BUGGY]  if(NodeUtil.canHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.canHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.canHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	267	None	replace
555	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild())  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild())	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	267	None	replace
556	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isSetKey(function.getFirstChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	267	None	replace
557	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isAssignmentOp(function.getLastChild()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isAssignmentOp(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isAssignmentOp(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	267	None	replace
558	[BUG]  [BUGGY]  Preconditions.checkState(function.getFirstChild()!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getFirstChild()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getFirstChild()!=  null);	  Preconditions.checkState(function.getRootNode()!=    null);    	non-compiled	[CE]  	118	None	replace
559	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	198	None	replace
560	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	198	None	replace
561	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isSetKey(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	198	None	replace
562	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	198	None	replace
563	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getQualifiedName())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	182	None	replace
564	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getQualifiedName())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	182	None	replace
565	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getQualifiedName())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	182	None	replace
566	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getQualifiedName())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	182	None	replace
567	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getQualifiedName())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	182	None	replace
568	[BUG]  [BUGGY]  if(NodeUtil.isQualifiedName(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isQualifiedName(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isQualifiedName(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getQualifiedName())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	182	None	replace
569	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getQualifiedName())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	182	None	replace
570	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getQualifiedName())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	182	None	replace
571	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getQualifiedName())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	182	None	replace
572	[BUG]  [BUGGY]  Node  parent  =  function.getPreviousNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getPreviousNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getPreviousNode();	  Node    parent    =    fnScope.getPreviousNode();    	non-compiled	[CE]  	113	None	replace
573	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	63	None	replace
574	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	63	None	replace
575	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getChildCount()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getChildCount()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getChildCount()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	63	None	replace
576	[BUG]  [BUGGY]  Node  parent  =  function.getOwnScope();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getOwnScope();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getOwnScope();	  Node    parent    =    fnScope.getOwnScope();    	non-compiled	[CE]  	263	None	replace
577	[BUG]  [BUGGY]  Node  parent  =  scope.getOwnScope();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  scope.getOwnScope();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  scope.getOwnScope();	  Node    parent    =    fnScope.getOwnScope();    	non-compiled	[CE]  	263	None	replace
578	[BUG]  [BUGGY]  Node  parent  =  fnScope.getNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getNode();	  Node    parent    =    fnScope.getOwnScope();    	non-compiled	[CE]  	263	None	replace
579	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	35	None	replace
580	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isSetKey(function.getLastChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isSetKey(function.getLastChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	35	None	replace
581	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	35	None	replace
582	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	35	None	replace
583	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isSetKey(function.getLastChild()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isSetKey(function.getLastChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	35	None	replace
584	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isExpressionNode(function.getLastChild()))    {    	non-compiled	[CE]  	200	None	replace
585	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isExpressionNode(function.getLastChild()))    {    	non-compiled	[CE]  	200	None	replace
586	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isExpressionNode(function.getLastChild()))    {    	non-compiled	[CE]  	200	None	replace
587	[BUG]  [BUGGY]  if(NodeUtil.isSetKey(function.getFirstChild())&&  NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isSetKey(function.getFirstChild())&&  NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isSetKey(function.getFirstChild())&&  NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isExpressionNode(function.getLastChild()))    {    	non-compiled	[CE]  	200	None	replace
588	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isAssignmentOp(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isAssignmentOp(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isAssignmentOp(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isExpressionNode(function.getLastChild()))    {    	non-compiled	[CE]  	200	None	replace
589	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isExpressionNode(function.getLastChild()))    {    	non-compiled	[CE]  	200	None	replace
590	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function)||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function)||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function)||  NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isExpressionNode(function.getLastChild()))    {    	non-compiled	[CE]  	200	None	replace
591	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParent(lastArg);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParent(lastArg);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParent(lastArg);	  Node    parent    =    fnScope.getParent(parent);    	non-compiled	[CE]  	261	None	replace
592	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode(parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentNode(parent);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode(parent);	  Node    parent    =    fnScope.getParent(parent);    	non-compiled	[CE]  	261	None	replace
593	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParent(parent,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParent(parent,  scope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParent(parent,  scope);	  Node    parent    =    fnScope.getParent(parent);    	non-compiled	[CE]  	261	None	replace
594	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParent(parent,  lastArg);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParent(parent,  lastArg);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParent(parent,  lastArg);	  Node    parent    =    fnScope.getParent(parent);    	non-compiled	[CE]  	261	None	replace
595	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getParent()))    {    	non-compiled	[CE]  	230	None	replace
596	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getParent()))    {    	non-compiled	[CE]  	230	None	replace
597	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getLastChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getParent()))    {    	non-compiled	[CE]  	230	None	replace
598	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getParent()))    {    	non-compiled	[CE]  	230	None	replace
599	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getParent()))    {    	non-compiled	[CE]  	230	None	replace
600	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getRootNode()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getRootNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getRootNode()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getParent()))    {    	non-compiled	[CE]  	230	None	replace
601	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getType()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getType()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getParent()))    {    	non-compiled	[CE]  	230	None	replace
602	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  >=  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  >=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  >=  Token.FUNCTION);	  Preconditions.checkState(function.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	237	None	replace
603	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	  Preconditions.checkState(function.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	237	None	replace
604	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);	  Preconditions.checkState(function.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	237	None	replace
605	[BUG]  [BUGGY]  Preconditions.checkState(scope.getVar(function.getString())  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getVar(function.getString())  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getVar(function.getString())  ==  null);	  Preconditions.checkState(scope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	47	None	replace
606	[BUG]  [BUGGY]  Preconditions.checkState(scope.getVar(function.getString()  +  1)!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getVar(function.getString()  +  1)!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getVar(function.getString()  +  1)!=  null);	  Preconditions.checkState(scope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	47	None	replace
607	[BUG]  [BUGGY]  Preconditions.checkState(scope.getVar(fnScope.getString())!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getVar(fnScope.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getVar(fnScope.getString())!=  null);	  Preconditions.checkState(scope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	47	None	replace
608	[BUG]  [BUGGY]  Preconditions.checkState(scope.getVar(function.getString()),  isPropertyAssign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getVar(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getVar(function.getString()),  isPropertyAssign);	  Preconditions.checkState(scope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	47	None	replace
609	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getString()!=  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getString()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getString()!=  null);	  Preconditions.checkState(scope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	47	None	replace
610	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	2	None	replace
611	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	2	None	replace
612	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	2	None	replace
613	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getParent())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getParent())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getParent())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	2	None	replace
614	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isAssignmentOp(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isAssignmentOp(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isAssignmentOp(function.getString()));	  Preconditions.checkState(!NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	317	None	replace
615	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isVar(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isVar(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isVar(function.getString()));	  Preconditions.checkState(!NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	317	None	replace
616	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isAssign(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isAssign(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isAssign(function.getString()));	  Preconditions.checkState(!NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	317	None	replace
617	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getType()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isFunction(function.getType()));	  Preconditions.checkState(!NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	317	None	replace
618	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getVar(function.getString()  +  1)!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getVar(function.getString()  +  1)!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getVar(function.getString()  +  1)!=  null);	  Preconditions.checkState(fnScope.getVar(function.getString()    +    1)!=    null);    	non-compiled	[CE]  	46	None	replace
619	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString(),  lastArg)!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString(),  lastArg)!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString(),  lastArg)!=  null);	  Preconditions.checkState(fnScope.getVar(function.getString()    +    1)!=    null);    	non-compiled	[CE]  	46	None	replace
620	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	313	None	replace
621	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	313	None	replace
622	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	313	None	replace
623	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	313	None	replace
624	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	313	None	replace
625	[BUG]  [BUGGY]  if(NodeUtil.isGetProp(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetProp(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetProp(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	313	None	replace
626	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	313	None	replace
627	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	220	None	replace
628	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild(),  lastArg));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild(),  lastArg));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild(),  lastArg));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	220	None	replace
629	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	220	None	replace
630	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	284	None	replace
631	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(fnScope.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(fnScope.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(fnScope.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	284	None	replace
632	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	284	None	replace
633	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  lastArg  ==  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  lastArg  ==  null)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  lastArg  ==  null)  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	284	None	replace
634	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||  isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	151	None	replace
635	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	151	None	replace
636	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&!NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&!NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(isPropertyAssign  &&!NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	151	None	replace
637	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||!NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||!NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(isPropertyAssign  ||!NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	151	None	replace
638	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isPropertyAssign(function.getString()),  isPropertyAssign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isPropertyAssign(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isPropertyAssign(function.getString()),  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	151	None	replace
639	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!isPropertyAssign);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	151	None	replace
640	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&!NodeUtil.isGetOrSetKey(function.getString()),  function);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&!NodeUtil.isGetOrSetKey(function.getString()),  function);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(isPropertyAssign  &&!NodeUtil.isGetOrSetKey(function.getString()),  function);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	151	None	replace
641	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	162	None	replace
642	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	162	None	replace
643	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	162	None	replace
644	[BUG]  [BUGGY]  if(NodeUtil.isName(fnScope.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(fnScope.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(fnScope.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	162	None	replace
645	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isSetKey(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	162	None	replace
646	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()  +  1));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()  +  1));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	96	None	replace
647	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  fnScope);	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	96	None	replace
648	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(fnScope.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(fnScope.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(fnScope.getString()));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	96	None	replace
649	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	96	None	replace
650	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getName()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getName()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getName()));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	96	None	replace
651	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	293	None	replace
652	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	293	None	replace
653	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	293	None	replace
654	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFunction()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFunction()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFunction()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	293	None	replace
655	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	293	None	replace
656	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isImmutableValue(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	312	None	replace
657	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {	  if(NodeUtil.isImmutableValue(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	312	None	replace
658	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isLiteralValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isLiteralValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isImmutableValue(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	312	None	replace
659	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isImmutableValue(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	312	None	replace
660	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	36	None	replace
661	[BUG]  [BUGGY]  if(NodeUtil.shouldHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.shouldHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.shouldHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	36	None	replace
662	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isAssignmentOp(function.getLastChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isAssignmentOp(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isAssignmentOp(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	36	None	replace
663	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	36	None	replace
664	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	311	None	replace
665	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	311	None	replace
666	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	311	None	replace
667	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getLastChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getLastChild()))  {	  if(NodeUtil.isFunction(function.getFirstChild()))    {    	non-compiled	[CE]  	285	None	replace
668	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {	  if(NodeUtil.isFunction(function.getFirstChild()))    {    	non-compiled	[CE]  	285	None	replace
669	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isFunction(function.getFirstChild()))    {    	non-compiled	[CE]  	285	None	replace
670	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isAssignmentOp(function.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isAssignmentOp(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isAssignmentOp(function.getLastChild()))  {	  if(NodeUtil.isFunction(function.getFirstChild()))    {    	non-compiled	[CE]  	285	None	replace
671	[BUG]  [BUGGY]  if(!NodeUtil.isFunction(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isFunction(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isFunction(function.getFirstChild()))  {	  if(NodeUtil.isFunction(function.getFirstChild()))    {    	non-compiled	[CE]  	285	None	replace
672	[BUG]  [BUGGY]  if(NodeUtil.isFunction(fnScope.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(fnScope.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(fnScope.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {	  if(NodeUtil.isFunction(function.getFirstChild()))    {    	non-compiled	[CE]  	285	None	replace
673	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getFirstChild()))  {	  if(NodeUtil.isFunction(function.getFirstChild()))    {    	non-compiled	[CE]  	285	None	replace
674	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isCall(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	321	None	replace
675	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isCall(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	321	None	replace
676	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isCall(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	321	None	replace
677	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isCall(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	321	None	replace
678	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	233	None	replace
679	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getNode()!=  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getNode()!=  null);	  Preconditions.checkState(fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	114	None	replace
680	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getFirstChild();	  Node    lastArg    =    fnScope.getFirstChild();    	non-compiled	[CE]  	169	None	replace
681	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	201	None	replace
682	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	201	None	replace
683	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  isPropertyAssign);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	201	None	replace
684	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  isPropertyAssign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	201	None	replace
685	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign,  fnScope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign,  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign,  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	201	None	replace
686	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign,  lastArg);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign,  lastArg);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign,  lastArg);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	201	None	replace
687	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  mayHaveSecondarySideEffects)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  mayHaveSecondarySideEffects)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  mayHaveSecondarySideEffects)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	265	None	replace
688	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	265	None	replace
689	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	265	None	replace
690	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	265	None	replace
691	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGet(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	219	None	replace
692	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isGet(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	219	None	replace
693	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGet(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	219	None	replace
694	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())||  NodeUtil.isSetKey(function.getNext()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getString())||  NodeUtil.isSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())||  NodeUtil.isSetKey(function.getNext()))  {	  if(NodeUtil.isGet(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	219	None	replace
695	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isGet(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	219	None	replace
696	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNext()!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNext()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNext()!=  null);	  Preconditions.checkState(function.getNext()!=    null);    	non-compiled	[CE]  	273	None	replace
697	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getNext()!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getNext()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getNext()!=  null);	  Preconditions.checkState(function.getNext()!=    null);    	non-compiled	[CE]  	273	None	replace
698	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getNext()))    {    	non-compiled	[CE]  	218	None	replace
699	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getLocalPart()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getLocalPart()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getNext()))    {    	non-compiled	[CE]  	218	None	replace
700	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getNext()))    {    	non-compiled	[CE]  	218	None	replace
701	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getChildCount()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getChildCount()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getChildCount()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getNext()))    {    	non-compiled	[CE]  	218	None	replace
702	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getName()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getName()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getName()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	155	None	replace
703	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	155	None	replace
704	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getName()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getName()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isName(function.getName()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	155	None	replace
705	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);	  Node    lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	127	None	replace
706	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	105	None	replace
707	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	105	None	replace
708	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	105	None	replace
709	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	105	None	replace
710	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isImmutableValue(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	74	None	replace
711	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isImmutableValue(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	74	None	replace
712	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isImmutableValue(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	74	None	replace
713	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isImmutableValue(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	74	None	replace
714	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isLiteralValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isLiteralValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isImmutableValue(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	74	None	replace
715	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg!=  null);	  Node    lastArg    =    function.getFirstChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	52	None	replace
716	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg  >=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg  >=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg  >=  null);	  Node    lastArg    =    function.getFirstChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	52	None	replace
717	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	9	None	replace
718	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	9	None	replace
719	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	9	None	replace
720	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME,  fnScope.getParent());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME,  fnScope.getParent());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME,  fnScope.getParent());	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	9	None	replace
721	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.GETPROP);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.GETPROP);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	9	None	replace
722	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.CALL);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.CALL);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	9	None	replace
723	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()!=    null);    	non-compiled	[CE]  	149	None	replace
724	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getParent()!=  null);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getParent()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getParent()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()!=    null);    	non-compiled	[CE]  	149	None	replace
725	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getParent()!=  null);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getParent()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getParent()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()!=    null);    	non-compiled	[CE]  	149	None	replace
726	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getParent()!=  null);  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getParent()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getParent()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()!=    null);    	non-compiled	[CE]  	149	None	replace
727	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [CE]  [FE]                                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()!=    null);    	non-compiled	[CE]  	149	None	replace
728	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()!=  null);  [CE]  [FE]                                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()!=    null);    	non-compiled	[CE]  	149	None	replace
729	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getVar(function.getString())  ==  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getVar(function.getString())  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getVar(function.getString())  ==  null);	  Preconditions.checkArgument(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	305	None	replace
730	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getVar(fnScope.getString())!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getVar(fnScope.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getVar(fnScope.getString())!=  null);	  Preconditions.checkArgument(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	305	None	replace
731	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getVar(function.getString())!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getVar(function.getString())!=  null);	  Preconditions.checkArgument(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	305	None	replace
732	[BUG]  [BUGGY]  Preconditions.checkArgument(parentScope.getVar(function.getString())!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(parentScope.getVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(parentScope.getVar(function.getString())!=  null);	  Preconditions.checkArgument(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	305	None	replace
733	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getVar(function.getString()  +  1)!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getVar(function.getString()  +  1)!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getVar(function.getString()  +  1)!=  null);	  Preconditions.checkArgument(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	305	None	replace
734	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getVar(function.getString()),  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getVar(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getVar(function.getString()),  isPropertyAssign);	  Preconditions.checkArgument(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	305	None	replace
735	[BUG]  [BUGGY]  Preconditions.checkArgument(scope.getVar(function.getString())!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(scope.getVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(scope.getVar(function.getString())!=  null);	  Preconditions.checkArgument(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	305	None	replace
736	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  function.isFunction());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  function.isFunction());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	235	None	replace
737	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isUnreferenced());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isUnreferenced());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	235	None	replace
738	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	235	None	replace
739	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isConstructor());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isConstructor());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	235	None	replace
740	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	235	None	replace
741	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isAssignmentOp());  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isAssignmentOp());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	235	None	replace
742	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNameNode())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNameNode())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getNameNode())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getParent())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	4	None	replace
743	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getParent())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	4	None	replace
744	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getParent())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	4	None	replace
745	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getParent())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	4	None	replace
746	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  mayHaveSecondarySideEffects);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  mayHaveSecondarySideEffects);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  mayHaveSecondarySideEffects);	  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	39	None	replace
747	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	234	None	replace
748	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  function.hasChildren());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  function.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	234	None	replace
749	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	234	None	replace
750	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  function.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	234	None	replace
751	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  function.hasChildren());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  function.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	234	None	replace
752	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  function.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	234	None	replace
753	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.hasChildren());  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	234	None	replace
754	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  isPropertyAssign);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	175	None	replace
755	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  mayHaveSecondarySideEffects);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  mayHaveSecondarySideEffects);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  mayHaveSecondarySideEffects);	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	175	None	replace
756	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()  +  1));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()  +  1));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	175	None	replace
757	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()).isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()).isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()).isFunction());	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	175	None	replace
758	[BUG]  [BUGGY]  Preconditions.checkState(lastArg  ==  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg  ==  null);	  Node    lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg    ==    null);    	non-compiled	[CE]  	56	None	replace
759	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	23	None	replace
760	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	227	None	replace
761	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.get  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.get  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.get	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	227	None	replace
762	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	227	None	replace
763	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	227	None	replace
764	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	227	None	replace
765	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	227	None	replace
766	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	227	None	replace
767	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isUnreferenced());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.isUnreferenced());	  Preconditions.checkState(fnScope.isUnreferenced());    	non-compiled	[CE]  	88	None	replace
768	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  fnScope.isFunction());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isUnreferenced()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isUnreferenced());    	non-compiled	[CE]  	88	None	replace
769	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isAssignmentOp());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isAssignmentOp());	  Preconditions.checkState(fnScope.isUnreferenced());    	non-compiled	[CE]  	88	None	replace
770	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isAll());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isAll());	  Preconditions.checkState(fnScope.isUnreferenced());    	non-compiled	[CE]  	88	None	replace
771	[BUG]  [BUGGY]  Node  parent  =  fnScope.getPreviousParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getPreviousParent();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getPreviousParent();	  Node    parent    =    scope.getParent();    	non-compiled	[CE]  	82	None	replace
772	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	199	None	replace
773	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	199	None	replace
774	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isSetKey(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isSetKey(function.getFirstChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	199	None	replace
775	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getType())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getType())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getType())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	199	None	replace
776	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	199	None	replace
777	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGet(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	339	None	replace
778	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isGet(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	339	None	replace
779	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())||  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())||  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getFirstChild())||  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isGet(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	339	None	replace
780	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGet(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	339	None	replace
781	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGet(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	339	None	replace
782	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isSetKey(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isSetKey(function.getString()))  {	  if(NodeUtil.isGet(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	339	None	replace
783	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isFunction(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	319	None	replace
784	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isFunction(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	319	None	replace
785	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isFunction(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	319	None	replace
786	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	240	None	replace
787	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()  +  1))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()  +  1))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString()  +  1))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	240	None	replace
788	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	240	None	replace
789	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	240	None	replace
790	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	240	None	replace
791	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	240	None	replace
792	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild().getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild().getNext();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild().getNext();	  Node    lastArg    =    fnScope.getLastChild().getNext();    	non-compiled	[CE]  	170	None	replace
793	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild().getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getFirstChild().getNext();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getFirstChild().getNext();	  Node    lastArg    =    fnScope.getLastChild().getNext();    	non-compiled	[CE]  	170	None	replace
794	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getLastChild().getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.getLastChild().getNext();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getLastChild().getNext();	  Node    lastArg    =    fnScope.getLastChild().getNext();    	non-compiled	[CE]  	170	None	replace
795	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getParent();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild().getParent();	  Node    lastArg    =    fnScope.getLastChild().getNext();    	non-compiled	[CE]  	170	None	replace
796	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild().getFirstChild();	  Node    lastArg    =    fnScope.getLastChild().getNext();    	non-compiled	[CE]  	170	None	replace
797	[BUG]  [BUGGY]  Node  lastArg  =  function.getPreviousScope().getLastChild().getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getPreviousScope().getLastChild().getNext();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getPreviousScope().getLastChild().getNext();	  Node    lastArg    =    fnScope.getLastChild().getNext();    	non-compiled	[CE]  	170	None	replace
798	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isFunction(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	307	None	replace
799	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isFunction(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	307	None	replace
800	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isAssignmentOp(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isAssignmentOp(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isAssignmentOp(function.getFirstChild()));	  Preconditions.checkState(!NodeUtil.isVar(function.getFirstChild()));    	non-compiled	[CE]  	301	None	replace
801	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isVar(function.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isVar(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isVar(function.getLastChild()));	  Preconditions.checkState(!NodeUtil.isVar(function.getFirstChild()));    	non-compiled	[CE]  	301	None	replace
802	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isAssign(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isAssign(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isAssign(function.getFirstChild()));	  Preconditions.checkState(!NodeUtil.isVar(function.getFirstChild()));    	non-compiled	[CE]  	301	None	replace
803	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isExpressionNode(function.getFirstChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isExpressionNode(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isExpressionNode(function.getFirstChild()));	  Preconditions.checkState(!NodeUtil.isVar(function.getFirstChild()));    	non-compiled	[CE]  	301	None	replace
804	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	274	None	replace
805	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()!=  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	274	None	replace
806	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	274	None	replace
807	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.GETPROP);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.GETPROP);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	274	None	replace
808	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	274	None	replace
809	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	274	None	replace
810	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getLastChild();	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	212	None	replace
811	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getFirstChild();	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	212	None	replace
812	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFunctionType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getFunctionType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getFunctionType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getLastChild();	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	212	None	replace
813	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  fnScope.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  fnScope.getLastChild();	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	212	None	replace
814	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  Node  lastArg  =  fnScope.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  Node  lastArg  =  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  Node  lastArg  =  fnScope.getLastChild();	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	212	None	replace
815	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getFirstChild();	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	212	None	replace
816	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	143	None	replace
817	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	143	None	replace
818	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.VAR);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	143	None	replace
819	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	143	None	replace
820	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.NAME);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.NAME);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	143	None	replace
821	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isName(function.getString()));	  Preconditions.checkState(NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	323	None	replace
822	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(function.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isImmutableValue(function.getString()));	  Preconditions.checkState(NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	323	None	replace
823	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVar(function.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isVar(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isVar(function.getString()));	  Preconditions.checkState(NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	323	None	replace
824	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isAssignmentOp(function.getString()));	  Preconditions.checkState(NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	323	None	replace
825	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(fnScope.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(fnScope.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isFunction(fnScope.getString()));	  Preconditions.checkState(NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	323	None	replace
826	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	27	None	replace
827	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isFunction(function.getParent()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isFunction(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isFunction(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	27	None	replace
828	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())&&  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	27	None	replace
829	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isAssignmentOp(function.getParent()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isAssignmentOp(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isAssignmentOp(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	27	None	replace
830	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetProp(function.getParent()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetProp(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetProp(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	27	None	replace
831	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()!=  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()!=  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	144	None	replace
832	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()!=  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getType()!=  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	144	None	replace
833	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.lastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.lastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.lastChild();	  Node    lastArg    =    function.lastChild();    	non-compiled	[CE]  	277	None	replace
834	[BUG]  [BUGGY]  Node  lastArg  =  function.removeChild(fnScope.getLastChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.removeChild(fnScope.getLastChild());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.removeChild(fnScope.getLastChild());	  Node    lastArg    =    function.lastChild();    	non-compiled	[CE]  	277	None	replace
835	[BUG]  [BUGGY]  Node  lastArg  =  function.next();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.next();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.next();	  Node    lastArg    =    function.lastChild();    	non-compiled	[CE]  	277	None	replace
836	[BUG]  [BUGGY]  Node  lastArg  =  function!=  null?  function.lastChild()  :  null;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function!=  null?  function.lastChild()  :  null;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function!=  null?  function.lastChild()  :  null;	  Node    lastArg    =    function.lastChild();    	non-compiled	[CE]  	277	None	replace
837	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getVar(function.getString())  ==  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getVar(function.getString())  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getVar(function.getString())  ==  null);	  Preconditions.checkState(fnScope.getVar(function.getString())    ==    null);    	non-compiled	[CE]  	44	None	replace
838	[BUG]  [BUGGY]  Node  parent  =  function.getParentOfThis();  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getParentOfThis();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getParentOfThis();	  Node    parent    =    fnScope.getParentOfThis();    	non-compiled	[CE]  	331	None	replace
839	[BUG]  [BUGGY]  Node  parent  =  scope.getParentOfThis();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  scope.getParentOfThis();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  scope.getParentOfThis();	  Node    parent    =    fnScope.getParentOfThis();    	non-compiled	[CE]  	331	None	replace
840	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSideEffects(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getLastChild()));    	non-compiled	[CE]  	283	None	replace
841	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.canHaveSideEffects(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.canHaveSideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.canHaveSideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getLastChild()));    	non-compiled	[CE]  	283	None	replace
842	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.shouldHaveSideEffects(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.shouldHaveSideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.shouldHaveSideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getLastChild()));    	non-compiled	[CE]  	283	None	replace
843	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getLastChild()),  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getLastChild()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getLastChild()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getLastChild()));    	non-compiled	[CE]  	283	None	replace
844	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.mayHaveSideEffects(function.getFirstChild()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.mayHaveSideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.mayHaveSideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getLastChild()));    	non-compiled	[CE]  	283	None	replace
845	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFunction()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFunction()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFunction()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFunction()));    	non-compiled	[CE]  	126	None	replace
846	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFunction()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFunction()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFunction()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFunction()));    	non-compiled	[CE]  	126	None	replace
847	[BUG]  [BUGGY]  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);	  lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	302	None	replace
848	[BUG]  [BUGGY]  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);	  lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	302	None	replace
849	[BUG]  [BUGGY]  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);	  lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	302	None	replace
850	[BUG]  [BUGGY]  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);	  lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	302	None	replace
851	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.isUnreferenced());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isFunction()  ||  fnScope.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isUnreferenced());    	non-compiled	[CE]  	90	None	replace
852	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  fnScope.isFunction());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isUnreferenced());    	non-compiled	[CE]  	90	None	replace
853	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isUnreferenced());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isUnreferenced());    	non-compiled	[CE]  	90	None	replace
854	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isUnreferenced());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isUnreferenced());    	non-compiled	[CE]  	90	None	replace
855	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||  fnScope.isUnreferenced());  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||  fnScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.isFunction()  ||  fnScope.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isUnreferenced());    	non-compiled	[CE]  	90	None	replace
856	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  fnScope.isUnreferenced());  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  fnScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isAll()  ||  fnScope.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isUnreferenced());    	non-compiled	[CE]  	90	None	replace
857	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.hasChildren());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.hasChildren());    	non-compiled	[CE]  	236	None	replace
858	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.hasChildren());    	non-compiled	[CE]  	236	None	replace
859	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.hasChildren());    	non-compiled	[CE]  	236	None	replace
860	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.hasChildren());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.hasChildren());    	non-compiled	[CE]  	236	None	replace
861	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.hasChildren());    	non-compiled	[CE]  	236	None	replace
862	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.hasChildren());    	non-compiled	[CE]  	236	None	replace
863	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	256	None	replace
864	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	256	None	replace
865	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	256	None	replace
866	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	256	None	replace
867	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	256	None	replace
868	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	256	None	replace
869	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	256	None	replace
870	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isName(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	256	None	replace
871	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()),  isPropertyAssign);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()));    	non-compiled	[CE]  	94	None	replace
872	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getFirstChild()  :  function.getLastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getFirstChild()  :  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  fnScope.getFirstChild()  :  function.getLastChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getLastChild();    	non-compiled	[CE]  	295	None	replace
873	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  parentScope.getLastChild()  :  function.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  parentScope.getLastChild()  :  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  parentScope.getLastChild()  :  function.getLastChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getLastChild();    	non-compiled	[CE]  	295	None	replace
874	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild().hasChildren()?  fnScope.getLastChild()  :  function.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild().hasChildren()?  fnScope.getLastChild()  :  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild().hasChildren()?  fnScope.getLastChild()  :  function.getLastChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getLastChild();    	non-compiled	[CE]  	295	None	replace
875	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  function.getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  function.getNext();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  fnScope.getLastChild()  :  function.getNext();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getLastChild();    	non-compiled	[CE]  	295	None	replace
876	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.getFirstChild()  :  function.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.getFirstChild()  :  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  function.getFirstChild()  :  function.getLastChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getLastChild();    	non-compiled	[CE]  	295	None	replace
877	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.getLastChild()  :  function.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.getLastChild()  :  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  function.getLastChild()  :  function.getFirstChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getLastChild();    	non-compiled	[CE]  	295	None	replace
878	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  scope.getLastChild()  :  function.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  scope.getLastChild()  :  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  scope.getLastChild()  :  function.getLastChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getLastChild();    	non-compiled	[CE]  	295	None	replace
879	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isSetKey(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isSetKey(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()    +    1));    	non-compiled	[CE]  	152	None	replace
880	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()    +    1));    	non-compiled	[CE]  	152	None	replace
881	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetValue(function.getString()  +  1));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetValue(function.getString()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetValue(function.getString()  +  1));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()    +    1));    	non-compiled	[CE]  	152	None	replace
882	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetValue(function.getString()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetValue(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetValue(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()    +    1));    	non-compiled	[CE]  	152	None	replace
883	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	102	None	replace
884	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	102	None	replace
885	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	102	None	replace
886	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	102	None	replace
887	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	102	None	replace
888	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	102	None	replace
889	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()  +  1))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()  +  1))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()  +  1))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	102	None	replace
890	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName())||  function.isUnreferenced())  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName())||  function.isUnreferenced())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName())||  function.isUnreferenced())  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	102	None	replace
891	[BUG]  [BUGGY]  Preconditions.checkState(scope.getParent()!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getParent()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getParent()!=  null);	  Preconditions.checkState(parentScope.getParent()!=    null);    	non-compiled	[CE]  	157	None	replace
892	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	106	None	replace
893	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	106	None	replace
894	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	106	None	replace
895	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	106	None	replace
896	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNext()  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNext()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNext()  ==  null);	  Preconditions.checkState(function.getNext()    ==    null);    	non-compiled	[CE]  	253	None	replace
897	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getNext()  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getNext()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getNext()  ==  null);	  Preconditions.checkState(function.getNext()    ==    null);    	non-compiled	[CE]  	253	None	replace
898	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	196	None	replace
899	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	196	None	replace
900	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	196	None	replace
901	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	196	None	replace
902	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	8	None	replace
903	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	8	None	replace
904	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(function.getType()  ==  Token.NAME);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	8	None	replace
905	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()!=  Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()!=  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()!=  Token.NAME);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	8	None	replace
906	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()),  isPropertyAssign);  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	208	None	replace
907	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()  +  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()  +  1));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	208	None	replace
908	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()),  mayHaveSecondarySideEffects);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()),  mayHaveSecondarySideEffects);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()),  mayHaveSecondarySideEffects);	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	208	None	replace
909	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	208	None	replace
910	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getNextNode()!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getNextNode()!=  null);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getNextNode()!=  null);	  Preconditions.checkState(fnScope.getParentNode()!=    null);    	non-compiled	[CE]  	186	None	replace
911	[BUG]  [BUGGY]  Node  parent  =  function.getNameNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getNameNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getNameNode();	  Node    parent    =    fnScope.getNameNode();    	non-compiled	[CE]  	81	None	replace
912	[BUG]  [BUGGY]  Node  parent  =  fnScope.getPrefixNode();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getPrefixNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getPrefixNode();	  Node    parent    =    fnScope.getNameNode();    	non-compiled	[CE]  	81	None	replace
913	[BUG]  [BUGGY]  Preconditions.checkState(scope.getParent()  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getParent()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getParent()  ==  null);	  Preconditions.checkState(parentScope.getParent()    ==    null);    	non-compiled	[CE]  	191	None	replace
914	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	34	None	replace
915	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	34	None	replace
916	[BUG]  [BUGGY]  if(NodeUtil.isName(fnScope.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(fnScope.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(fnScope.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	34	None	replace
917	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	34	None	replace
918	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getLastChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getLastChild()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));    	non-compiled	[CE]  	40	None	replace
919	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFirstChild()!=  function);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getFirstChild()!=  function);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getFirstChild()!=  function);	  Preconditions.checkState(fnScope.getLastChild()!=    function);    	non-compiled	[CE]  	173	None	replace
920	[BUG]  [BUGGY]  Preconditions.checkState(function.getLastChild()!=  fnScope.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getLastChild()!=  fnScope.getLastChild());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getLastChild()!=  fnScope.getLastChild());	  Preconditions.checkState(fnScope.getLastChild()!=    function);    	non-compiled	[CE]  	173	None	replace
921	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFirstChild()  ==  function);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getFirstChild()  ==  function);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getFirstChild()  ==  function);	  Preconditions.checkState(fnScope.getLastChild()!=    function);    	non-compiled	[CE]  	173	None	replace
922	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getLastChild()  ==  function);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getLastChild()  ==  function);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getLastChild()  ==  function);	  Preconditions.checkState(fnScope.getLastChild()!=    function);    	non-compiled	[CE]  	173	None	replace
923	[BUG]  [BUGGY]  Preconditions.checkState(function.getLastChild()!=  fnScope.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getLastChild()!=  fnScope.getFirstChild());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getLastChild()!=  fnScope.getFirstChild());	  Preconditions.checkState(fnScope.getLastChild()!=    function);    	non-compiled	[CE]  	173	None	replace
924	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getLastChild()!=  function);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getLastChild()!=  function);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getLastChild()!=  function);	  Preconditions.checkState(fnScope.getLastChild()!=    function);    	non-compiled	[CE]  	173	None	replace
925	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getLastChild()  ==  lastArg);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getLastChild()  ==  lastArg);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getLastChild()  ==  lastArg);	  Preconditions.checkState(fnScope.getLastChild()!=    function);    	non-compiled	[CE]  	173	None	replace
926	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getLastChild()!=  lastArg);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getLastChild()!=  lastArg);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getLastChild()!=  lastArg);	  Preconditions.checkState(fnScope.getLastChild()!=    function);    	non-compiled	[CE]  	173	None	replace
927	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isCall(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	340	None	replace
928	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isCall(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	340	None	replace
929	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isCall(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	340	None	replace
930	[BUG]  [BUGGY]  if(NodeUtil.isSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	193	None	replace
931	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	193	None	replace
932	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()  +  1));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()  +  1));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	97	None	replace
933	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getName()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getName()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isName(function.getName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	97	None	replace
934	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()),  fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	97	None	replace
935	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(function.getType()!=  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(function.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(function.getType()!=  Token.FUNCTION);	  Node    lastArg    =    function.getLastChild();    Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	133	None	replace
936	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);	  Node    lastArg    =    function.getLastChild();    Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	133	None	replace
937	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isImmutableValue(function.getString()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isImmutableValue(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isImmutableValue(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	142	None	replace
938	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	142	None	replace
939	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isLiteralValue(function.getString()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isLiteralValue(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isLiteralValue(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	142	None	replace
940	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isImmutableValue(function.getString()))  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isImmutableValue(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.isImmutableValue(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	142	None	replace
941	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isImmutableValue(function.getCharn()))  {  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isImmutableValue(function.getCharn()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isImmutableValue(function.getCharn()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	142	None	replace
942	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getFirstChild()  :  function.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getFirstChild()  :  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  fnScope.getFirstChild()  :  function.getFirstChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getFirstChild();    	non-compiled	[CE]  	297	None	replace
943	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  parentScope.getLastChild()  :  function.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  parentScope.getLastChild()  :  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  parentScope.getLastChild()  :  function.getFirstChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getFirstChild();    	non-compiled	[CE]  	297	None	replace
944	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild().hasChildren()?  fnScope.getLastChild()  :  function.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild().hasChildren()?  fnScope.getLastChild()  :  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild().hasChildren()?  fnScope.getLastChild()  :  function.getFirstChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getFirstChild();    	non-compiled	[CE]  	297	None	replace
945	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.getLastChild()  :  function.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.getLastChild()  :  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  function.getLastChild()  :  function.getLastChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getFirstChild();    	non-compiled	[CE]  	297	None	replace
946	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.getFirstChild()  :  fnScope.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.getFirstChild()  :  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  function.getFirstChild()  :  fnScope.getLastChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getFirstChild();    	non-compiled	[CE]  	297	None	replace
947	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  scope.getLastChild()  :  function.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  scope.getLastChild()  :  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  scope.getLastChild()  :  function.getFirstChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getFirstChild();    	non-compiled	[CE]  	297	None	replace
948	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isFunction());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	89	None	replace
949	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.isConstructor());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isFunction()  ||  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	89	None	replace
950	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isConstructor());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	89	None	replace
951	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  fnScope.isConstructor());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  fnScope.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isFunction()  &&  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	89	None	replace
952	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||  fnScope.isConstructor());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||  fnScope.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.isFunction()  ||  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	89	None	replace
953	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  fnScope.isFunction());  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isConstructor()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	89	None	replace
954	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isConstructor());  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	89	None	replace
955	[BUG]  [BUGGY]  Preconditions.checkState(scope.isFunction()  ||  fnScope.isConstructor());  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.isFunction()  ||  fnScope.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.isFunction()  ||  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	89	None	replace
956	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isVar(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isVar(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isVar(function.getString()))  {	  if(NodeUtil.isVar(function.getString()))    {    	non-compiled	[CE]  	337	None	replace
957	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isVar(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isVar(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.isVar(function.getString()))  {	  if(NodeUtil.isVar(function.getString()))    {    	non-compiled	[CE]  	337	None	replace
958	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isFunction(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isFunction(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isFunction(function.getString()))  {	  if(NodeUtil.isVar(function.getString()))    {    	non-compiled	[CE]  	337	None	replace
959	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getType())||  NodeUtil.isFunction(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getType())||  NodeUtil.isFunction(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getType())||  NodeUtil.isFunction(function.getString()))  {	  if(NodeUtil.isVar(function.getString()))    {    	non-compiled	[CE]  	337	None	replace
960	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getString()))  {	  if(NodeUtil.isVar(function.getString()))    {    	non-compiled	[CE]  	337	None	replace
961	[BUG]  [BUGGY]  if(!NodeUtil.isFunction(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isFunction(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isFunction(function.getString()))  {	  if(NodeUtil.isFunction(function.getString()))    {    	non-compiled	[CE]  	335	None	replace
962	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getType())||  NodeUtil.isFunction(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getType())||  NodeUtil.isFunction(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getType())||  NodeUtil.isFunction(function.getString()))  {	  if(NodeUtil.isFunction(function.getString()))    {    	non-compiled	[CE]  	335	None	replace
963	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getType())||  NodeUtil.isExpressionNode(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getType())||  NodeUtil.isExpressionNode(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getType())||  NodeUtil.isExpressionNode(function.getString()))  {	  if(NodeUtil.isFunction(function.getString()))    {    	non-compiled	[CE]  	335	None	replace
964	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isName(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isName(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.isName(function.getString()))  {	  if(NodeUtil.isFunction(function.getString()))    {    	non-compiled	[CE]  	335	None	replace
965	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getQualifiedName()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getQualifiedName()))  {	  if(NodeUtil.isFunction(function.getString()))    {    	non-compiled	[CE]  	335	None	replace
966	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getNext())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	179	None	replace
967	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getNext())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	179	None	replace
968	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGet(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	226	None	replace
969	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isGet(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	226	None	replace
970	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())||  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getString())||  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())||  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isGet(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	226	None	replace
971	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGet(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	226	None	replace
972	[BUG]  [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	139	None	replace
973	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()  +  1))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()  +  1))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getQualifiedName()  +  1))  {	  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	139	None	replace
974	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isImmutableValue(function.getQualifiedName()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isImmutableValue(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isImmutableValue(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	139	None	replace
975	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getQualifiedName()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	139	None	replace
976	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isExpressionNode(function.getQualifiedName()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isExpressionNode(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isExpressionNode(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	139	None	replace
977	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isFunction(function.getQualifiedName()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isFunction(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isFunction(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	139	None	replace
978	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isAssignmentOp(function.getQualifiedName()))  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isAssignmentOp(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isAssignmentOp(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	139	None	replace
979	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	327	None	replace
980	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getParent()  ==  null);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getParent()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getParent()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	327	None	replace
981	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  null);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	327	None	replace
982	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getParent()  ==  null);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getParent()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getParent()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	327	None	replace
983	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	327	None	replace
984	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getFirstChild()  ==  null);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getFirstChild()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getFirstChild()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	327	None	replace
985	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	33	None	replace
986	[BUG]  [BUGGY]  if(NodeUtil.isSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	33	None	replace
987	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	19	None	replace
988	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isAssignmentOp(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isAssignmentOp(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isAssignmentOp(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	19	None	replace
989	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isForIn(function.getFirstChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isForIn(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isForIn(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	19	None	replace
990	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	19	None	replace
991	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isFunctionDeclaration(function.getFirstChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isFunctionDeclaration(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isFunctionDeclaration(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	19	None	replace
992	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getChildCount()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getChildCount()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getChildCount()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	19	None	replace
993	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()),  function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()),  function);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()),  function);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	95	None	replace
994	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  parentScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  parentScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	95	None	replace
995	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1),  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	95	None	replace
996	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  scope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  scope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	95	None	replace
997	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope,  parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope,  parentScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope,  parentScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	95	None	replace
998	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope.getParent());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope.getParent());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope.getParent());	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	95	None	replace
999	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	95	None	replace
1000	[BUG]  [BUGGY]  Node  lastArg  =  function!=  null?  null  :  function.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function!=  null?  null  :  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function!=  null?  null  :  function.getLastChild();	  Node    lastArg    =    function    ==    null?    null    :    function.getLastChild();    	non-compiled	[CE]  	187	None	replace
1001	[BUG]  [BUGGY]  Node  lastArg  =  function  ==  null?  null  :  function.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function  ==  null?  null  :  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function  ==  null?  null  :  function.getFirstChild();	  Node    lastArg    =    function    ==    null?    null    :    function.getLastChild();    	non-compiled	[CE]  	187	None	replace
1002	[BUG]  [BUGGY]  Node  lastArg  =  function!=  null?  null  :  function.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function!=  null?  null  :  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function!=  null?  null  :  function.getFirstChild();	  Node    lastArg    =    function    ==    null?    null    :    function.getLastChild();    	non-compiled	[CE]  	187	None	replace
1003	[BUG]  [BUGGY]  Node  lastArg  =  function  >=  null?  null  :  function.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function  >=  null?  null  :  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function  >=  null?  null  :  function.getLastChild();	  Node    lastArg    =    function    ==    null?    null    :    function.getLastChild();    	non-compiled	[CE]  	187	None	replace
1004	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	61	None	replace
1005	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getChildCount()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getChildCount()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getChildCount()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	61	None	replace
1006	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString())||!NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString())||!NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isName(function.getString())||!NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(!NodeUtil.isName(function.getString()));    	non-compiled	[CE]  	153	None	replace
1007	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString())||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString())||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isName(function.getString())||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(!NodeUtil.isName(function.getString()));    	non-compiled	[CE]  	153	None	replace
1008	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	248	None	replace
1009	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	248	None	replace
1010	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	248	None	replace
1011	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	248	None	replace
1012	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent())  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent())	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	248	None	replace
1013	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent())  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent())	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	248	None	replace
1014	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(fnScope.getLastChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(fnScope.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isFunction(fnScope.getLastChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));    	non-compiled	[CE]  	221	None	replace
1015	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(function.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isImmutableValue(function.getLastChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));    	non-compiled	[CE]  	221	None	replace
1016	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isAssign(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isAssign(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isAssign(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));    	non-compiled	[CE]  	221	None	replace
1017	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME);  Node  lastArg  =  function.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME);  Node  lastArg  =  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.NAME);  Node  lastArg  =  function.getLastChild();	  Preconditions.checkState(function.getType()    ==    Token.NAME);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	214	None	replace
1018	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  lastArg  =  function.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  lastArg  =  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  lastArg  =  function.getFirstChild();	  Preconditions.checkState(function.getType()    ==    Token.NAME);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	214	None	replace
1019	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	214	None	replace
1020	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  function  =  function.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  function  =  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  function  =  function.getFirstChild();	  Preconditions.checkState(function.getType()    ==    Token.NAME);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	214	None	replace
1021	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  lastArg  =  fnScope.getLastChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  lastArg  =  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  lastArg  =  fnScope.getLastChild();	  Preconditions.checkState(function.getType()    ==    Token.NAME);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	214	None	replace
1022	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.NAME);  Node  lastArg  =  function.getLastChild();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.NAME);  Node  lastArg  =  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()!=  Token.NAME);  Node  lastArg  =  function.getLastChild();	  Preconditions.checkState(function.getType()    ==    Token.NAME);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	214	None	replace
1023	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME);  Node  lastArg  =  function.getFirstChild();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME);  Node  lastArg  =  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.NAME);  Node  lastArg  =  function.getFirstChild();	  Preconditions.checkState(function.getType()    ==    Token.NAME);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	214	None	replace
1024	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isFunction(function.getLastChild()));	  Preconditions.checkState(!NodeUtil.isFunction(function.getParent()));    	non-compiled	[CE]  	308	None	replace
1025	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getNext()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getNext()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isFunction(function.getNext()));	  Preconditions.checkState(!NodeUtil.isFunction(function.getParent()));    	non-compiled	[CE]  	308	None	replace
1026	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isAssignmentOp(function.getParent()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isAssignmentOp(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isAssignmentOp(function.getParent()));	  Preconditions.checkState(!NodeUtil.isFunction(function.getParent()));    	non-compiled	[CE]  	308	None	replace
1027	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	21	None	replace
1028	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	21	None	replace
1029	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	21	None	replace
1030	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString())  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString())	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	21	None	replace
1031	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	21	None	replace
1032	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getLastChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	107	None	replace
1033	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isVar(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	287	None	replace
1034	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isVar(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	287	None	replace
1035	[BUG]  [BUGGY]  Node  parent  =  scope.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  scope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  scope.getLastChild();	  Node    parent    =    fnScope.getLastChild();    	non-compiled	[CE]  	78	None	replace
1036	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isFunction(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	163	None	replace
1037	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	70	None	replace
1038	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	70	None	replace
1039	[BUG]  [BUGGY]  if(NodeUtil.isName(fnScope.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(fnScope.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(fnScope.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	70	None	replace
1040	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	70	None	replace
1041	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	70	None	replace
1042	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	75	None	replace
1043	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	75	None	replace
1044	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	75	None	replace
1045	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	75	None	replace
1046	[BUG]  [BUGGY]  if(NodeUtil.isGetProp(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetProp(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetProp(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	75	None	replace
1047	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getFirstChild();  Preconditions.checkState(lastArg!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.getFirstChild();  Preconditions.checkState(lastArg!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getFirstChild();  Preconditions.checkState(lastArg!=  null);	  Node    lastArg    =    fnScope.getFirstChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	55	None	replace
1048	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isAssign(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	288	None	replace
1049	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isAssign(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	288	None	replace
1050	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isAssign(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	288	None	replace
1051	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isAssign(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	288	None	replace
1052	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getNameNode()!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getNameNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getNameNode()!=  null);	  Preconditions.checkState(fnScope.getNameNode()!=    null);    	non-compiled	[CE]  	158	None	replace
1053	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFunctionNameNode()!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getFunctionNameNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getFunctionNameNode()!=  null);	  Preconditions.checkState(fnScope.getNameNode()!=    null);    	non-compiled	[CE]  	158	None	replace
1054	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(function.getString()),  isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(function.getString()),  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isImmutableValue(function.getString()));    	non-compiled	[CE]  	318	None	replace
1055	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isLiteralValue(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isLiteralValue(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isLiteralValue(function.getString()));	  Preconditions.checkState(!NodeUtil.isImmutableValue(function.getString()));    	non-compiled	[CE]  	318	None	replace
1056	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(function.getString()  +  1));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(function.getString()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(function.getString()  +  1));	  Preconditions.checkState(!NodeUtil.isImmutableValue(function.getString()));    	non-compiled	[CE]  	318	None	replace
1057	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.GETPROP);  Node  lastArg  =  function.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.GETPROP);  Node  lastArg  =  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.GETPROP);  Node  lastArg  =  function.getLastChild();	  Preconditions.checkState(function.getType()    ==    Token.GETPROP);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	213	None	replace
1058	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  lastArg  =  function.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  lastArg  =  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  lastArg  =  function.getFirstChild();	  Preconditions.checkState(function.getType()    ==    Token.GETPROP);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	213	None	replace
1059	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);	  Preconditions.checkState(function.getType()    ==    Token.GETPROP);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	213	None	replace
1060	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  lastArg  =  fnScope.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  lastArg  =  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  lastArg  =  fnScope.getLastChild();	  Preconditions.checkState(function.getType()    ==    Token.GETPROP);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	213	None	replace
1061	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  function  =  function.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  function  =  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  function  =  function.getFirstChild();	  Preconditions.checkState(function.getType()    ==    Token.GETPROP);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	213	None	replace
1062	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.GETPROP);  Node  lastArg  =  function.getLastChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.GETPROP);  Node  lastArg  =  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()!=  Token.GETPROP);  Node  lastArg  =  function.getLastChild();	  Preconditions.checkState(function.getType()    ==    Token.GETPROP);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	213	None	replace
1063	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.GETPROP);  Node  lastArg  =  function.getFirstChild();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.GETPROP);  Node  lastArg  =  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.GETPROP);  Node  lastArg  =  function.getFirstChild();	  Preconditions.checkState(function.getType()    ==    Token.GETPROP);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	213	None	replace
1064	[BUG]  [BUGGY]  Node  lastArg  =  function.getType()  ==  Token.FUNCTION?  function.getLastChild()  :  function.cloneTree();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getType()  ==  Token.FUNCTION?  function.getLastChild()  :  function.cloneTree();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getType()  ==  Token.FUNCTION?  function.getLastChild()  :  function.cloneTree();	  Node    lastArg    =    function.cloneTree();    	non-compiled	[CE]  	275	None	replace
1065	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.cloneTree();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.cloneTree();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.cloneTree();	  Node    lastArg    =    function.cloneTree();    	non-compiled	[CE]  	275	None	replace
1066	[BUG]  [BUGGY]  Node  lastArg  =  function  ==  null?  null  :  function.cloneTree();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function  ==  null?  null  :  function.cloneTree();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function  ==  null?  null  :  function.cloneTree();	  Node    lastArg    =    function.cloneTree();    	non-compiled	[CE]  	275	None	replace
1067	[BUG]  [BUGGY]  Node  lastArg  =  function!=  null?  null  :  function.cloneTree();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function!=  null?  null  :  function.cloneTree();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function!=  null?  null  :  function.cloneTree();	  Node    lastArg    =    function.cloneTree();    	non-compiled	[CE]  	275	None	replace
1068	[BUG]  [BUGGY]  Node  lastArg  =  function.getType()  ==  Token.NAME?  function.getLastChild()  :  function.cloneTree();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getType()  ==  Token.NAME?  function.getLastChild()  :  function.cloneTree();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getType()  ==  Token.NAME?  function.getLastChild()  :  function.cloneTree();	  Node    lastArg    =    function.cloneTree();    	non-compiled	[CE]  	275	None	replace
1069	[BUG]  [BUGGY]  Node  lastArg  =  function.getType()  ==  Token.FUNCTION?  function.getLastChild()  :  null;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getType()  ==  Token.FUNCTION?  function.getLastChild()  :  null;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getType()  ==  Token.FUNCTION?  function.getLastChild()  :  null;	  Node    lastArg    =    function.cloneTree();    	non-compiled	[CE]  	275	None	replace
1070	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.getLastChild()  :  fnScope.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.getLastChild()  :  fnScope.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  function.getLastChild()  :  fnScope.getFirstChild();	  Node    lastArg    =    function.hasChildren()?    function.getLastChild()    :    fnScope.getLastChild();    	non-compiled	[CE]  	298	None	replace
1071	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.hasChildren()?  function.getFirstChild()  :  fnScope.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.hasChildren()?  function.getFirstChild()  :  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.hasChildren()?  function.getFirstChild()  :  fnScope.getLastChild();	  Node    lastArg    =    function.hasChildren()?    function.getLastChild()    :    fnScope.getLastChild();    	non-compiled	[CE]  	298	None	replace
1072	[BUG]  [BUGGY]  Node  lastArg  =  function.hasNext()?  function.getLastChild()  :  fnScope.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasNext()?  function.getLastChild()  :  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasNext()?  function.getLastChild()  :  fnScope.getLastChild();	  Node    lastArg    =    function.hasChildren()?    function.getLastChild()    :    fnScope.getLastChild();    	non-compiled	[CE]  	298	None	replace
1073	[BUG]  [BUGGY]  Node  lastArg  =  function.hasOneChild()?  function.getLastChild()  :  fnScope.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasOneChild()?  function.getLastChild()  :  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasOneChild()?  function.getLastChild()  :  fnScope.getLastChild();	  Node    lastArg    =    function.hasChildren()?    function.getLastChild()    :    fnScope.getLastChild();    	non-compiled	[CE]  	298	None	replace
1074	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.getLastChild()  :  parentScope.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.getLastChild()  :  parentScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  function.getLastChild()  :  parentScope.getLastChild();	  Node    lastArg    =    function.hasChildren()?    function.getLastChild()    :    fnScope.getLastChild();    	non-compiled	[CE]  	298	None	replace
1075	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild()?  function.getLastChild()  :  fnScope.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild()?  function.getLastChild()  :  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild()?  function.getLastChild()  :  fnScope.getLastChild();	  Node    lastArg    =    function.hasChildren()?    function.getLastChild()    :    fnScope.getLastChild();    	non-compiled	[CE]  	298	None	replace
1076	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.hasChildren()?  function.getLastChild()  :  function.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.hasChildren()?  function.getLastChild()  :  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.hasChildren()?  function.getLastChild()  :  function.getLastChild();	  Node    lastArg    =    function.hasChildren()?    function.getLastChild()    :    fnScope.getLastChild();    	non-compiled	[CE]  	298	None	replace
1077	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	255	None	replace
1078	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getNext()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	255	None	replace
1079	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	255	None	replace
1080	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	255	None	replace
1081	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getType()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	255	None	replace
1082	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	264	None	replace
1083	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	264	None	replace
1084	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	264	None	replace
1085	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	264	None	replace
1086	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	264	None	replace
1087	[BUG]  [BUGGY]  Node  parent  =  function.getCurrentNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getCurrentNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getCurrentNode();	  Node    parent    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	83	None	replace
1088	[BUG]  [BUGGY]  Node  parent  =  fnScope.getCurrentParentNode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getCurrentParentNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getCurrentParentNode();	  Node    parent    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	83	None	replace
1089	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  null);	  Preconditions.checkState(function.getParent()    ==    null);    	non-compiled	[CE]  	159	None	replace
1090	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.GETPROP);	  Preconditions.checkState(function.getParent()    ==    null);    	non-compiled	[CE]  	159	None	replace
1091	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isImmutableValue(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	109	None	replace
1092	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isLiteralValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isLiteralValue(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isImmutableValue(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	109	None	replace
1093	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()    +    1))    {    	non-compiled	[CE]  	138	None	replace
1094	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isPropertyAssign(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isPropertyAssign(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isPropertyAssign(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()    +    1))    {    	non-compiled	[CE]  	138	None	replace
1095	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()    +    1))    {    	non-compiled	[CE]  	138	None	replace
1096	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.hasChildren())    {    	non-compiled	[CE]  	343	None	replace
1097	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.hasChildren())    {    	non-compiled	[CE]  	343	None	replace
1098	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.hasChildren())    {    	non-compiled	[CE]  	343	None	replace
1099	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  function.hasChildren())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  function.hasChildren())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  function.hasChildren())  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.hasChildren())    {    	non-compiled	[CE]  	343	None	replace
1100	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.hasChildren())    {    	non-compiled	[CE]  	343	None	replace
1101	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.hasChildren())    {    	non-compiled	[CE]  	343	None	replace
1102	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  function.hasChildren())  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  function.hasChildren())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  function.hasChildren())  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.hasChildren())    {    	non-compiled	[CE]  	343	None	replace
1103	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isSetKey(function.getFirstChild())||  function.hasChildren())  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isSetKey(function.getFirstChild())||  function.hasChildren())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isSetKey(function.getFirstChild())||  function.hasChildren())  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.hasChildren())    {    	non-compiled	[CE]  	343	None	replace
1104	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(function.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(function.isFunction());  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(function.isFunction());	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.isFunction());    	non-compiled	[CE]  	185	None	replace
1105	[BUG]  [BUGGY]  Node  parent  =  function.getParentNode();  Preconditions.checkState(parent.isFunction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getParentNode();  Preconditions.checkState(parent.isFunction());  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getParentNode();  Preconditions.checkState(parent.isFunction());	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.isFunction());    	non-compiled	[CE]  	185	None	replace
1106	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isUnreferenced());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isUnreferenced());  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isUnreferenced());	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.isFunction());    	non-compiled	[CE]  	185	None	replace
1107	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParent();  Preconditions.checkState(parent.isFunction());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParent();  Preconditions.checkState(parent.isFunction());  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParent();  Preconditions.checkState(parent.isFunction());	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.isFunction());    	non-compiled	[CE]  	185	None	replace
1108	[BUG]  [BUGGY]  Node  parent  =  fnScope.getLastChild();  Preconditions.checkState(parent.isFunction());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getLastChild();  Preconditions.checkState(parent.isFunction());  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getLastChild();  Preconditions.checkState(parent.isFunction());	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.isFunction());    	non-compiled	[CE]  	185	None	replace
1109	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(function.isUnreferenced());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(function.isUnreferenced());  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(function.isUnreferenced());	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.isFunction());    	non-compiled	[CE]  	185	None	replace
1110	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode();  preconditions.checkState(parent.isFunction());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentNode();  preconditions.checkState(parent.isFunction());  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode();  preconditions.checkState(parent.isFunction());	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.isFunction());    	non-compiled	[CE]  	185	None	replace
1111	[BUG]  [BUGGY]  Preconditions.checkState(lastArg!=  null  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg!=  null  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg!=  null  &&  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	280	None	replace
1112	[BUG]  [BUGGY]  Preconditions.checkState(lastArg!=  null  &&  lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg!=  null  &&  lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg!=  null  &&  lastArg.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	280	None	replace
1113	[BUG]  [BUGGY]  Preconditions.checkState(lastArg  ==  null  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg  ==  null  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg  ==  null  &&  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	280	None	replace
1114	[BUG]  [BUGGY]  Preconditions.checkState(lastArg  ==  null  &&  lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg  ==  null  &&  lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg  ==  null  &&  lastArg.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	280	None	replace
1115	[BUG]  [BUGGY]  Preconditions.checkState(lastArg!=  null  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg!=  null  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg!=  null  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	280	None	replace
1116	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()),  isPropertyAssign);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()),  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	150	None	replace
1117	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()),  mayHaveSecondarySideEffects);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()),  mayHaveSecondarySideEffects);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()),  mayHaveSecondarySideEffects);	  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	150	None	replace
1118	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()  +  1));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()  +  1));	  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	150	None	replace
1119	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString(),  mayHaveSecondarySideEffects));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString(),  mayHaveSecondarySideEffects));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString(),  mayHaveSecondarySideEffects));	  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	150	None	replace
1120	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.canHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.canHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.canHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));    	non-compiled	[CE]  	176	None	replace
1121	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()),  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));    	non-compiled	[CE]  	176	None	replace
1122	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.shouldHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.shouldHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.shouldHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));    	non-compiled	[CE]  	176	None	replace
1123	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));    	non-compiled	[CE]  	176	None	replace
1124	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	135	None	replace
1125	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	135	None	replace
1126	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isSetKey(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	135	None	replace
1127	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstCh  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstCh  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstCh	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	38	None	replace
1128	[BUG]  [BUGGY]  if(NodeUtil.canHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.canHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.canHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	38	None	replace
1129	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getLastChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getLastChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getLastChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	38	None	replace
1130	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	279	None	replace
1131	[BUG]  [BUGGY]  Preconditions.checkState(!lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!lastArg.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	279	None	replace
1132	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	279	None	replace
1133	[BUG]  [BUGGY]  Preconditions.checkState(referenced.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(referenced.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(referenced.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	279	None	replace
1134	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.VAR);	  Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	279	None	replace
1135	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.isExpressionNode(function.getFirstChild()))    {    	non-compiled	[CE]  	338	None	replace
1136	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.isExpressionNode(function.getFirstChild()))    {    	non-compiled	[CE]  	338	None	replace
1137	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.isExpressionNode(function.getFirstChild()))    {    	non-compiled	[CE]  	338	None	replace
1138	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.isExpressionNode(function.getFirstChild()))    {    	non-compiled	[CE]  	338	None	replace
1139	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isAssignmentOp(function.getFirstChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isAssignmentOp(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isAssignmentOp(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.isExpressionNode(function.getFirstChild()))    {    	non-compiled	[CE]  	338	None	replace
1140	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.isExpressionNode(function.getFirstChild()))    {    	non-compiled	[CE]  	338	None	replace
1141	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isFunctionDeclaration(function.getFirstChild()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isFunctionDeclaration(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isFunctionDeclaration(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.isExpressionNode(function.getFirstChild()))    {    	non-compiled	[CE]  	338	None	replace
1142	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	195	None	replace
1143	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	195	None	replace
1144	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  parentScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  parentScope);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	258	None	replace
1145	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.isGetOrSetKey(function.getString()),  fnScope);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	258	None	replace
1146	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getString()),  function);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getString()),  function);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(fnScope.getString()),  function);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	258	None	replace
1147	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  fnScope,  parentScope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  fnScope,  parentScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  fnScope,  parentScope);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	258	None	replace
1148	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  scope);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  scope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  scope);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	258	None	replace
1149	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	258	None	replace
1150	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getShortName()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getShortName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getShortName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getShortName()))    {    	non-compiled	[CE]  	104	None	replace
1151	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getShortName()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getShortName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getShortName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getShortName()))    {    	non-compiled	[CE]  	104	None	replace
1152	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getName()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getShortName()))    {    	non-compiled	[CE]  	104	None	replace
1153	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalName()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getShortName()))    {    	non-compiled	[CE]  	104	None	replace
1154	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getShortName()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getShortName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getShortName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getShortName()))    {    	non-compiled	[CE]  	104	None	replace
1155	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getShortName()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getShortName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getShortName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getShortName()))    {    	non-compiled	[CE]  	104	None	replace
1156	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getFunctionName()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getFunctionName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getFunctionName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getShortName()))    {    	non-compiled	[CE]  	104	None	replace
1157	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild().getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild().getParent();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild().getParent();	  Node    lastArg    =    function.getLastChild().getNext();    	non-compiled	[CE]  	190	None	replace
1158	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild().getFirstChild().getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild().getFirstChild().getNext();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild().getFirstChild().getNext();	  Node    lastArg    =    function.getLastChild().getNext();    	non-compiled	[CE]  	190	None	replace
1159	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild().getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild().getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild().getFirstChild();	  Node    lastArg    =    function.getLastChild().getNext();    	non-compiled	[CE]  	190	None	replace
1160	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild().getString();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild().getString();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild().getString();	  Node    lastArg    =    function.getLastChild().getNext();    	non-compiled	[CE]  	190	None	replace
1161	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild().getLastChild();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild().getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild().getLastChild();	  Node    lastArg    =    function.getLastChild().getNext();    	non-compiled	[CE]  	190	None	replace
1162	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild().getLastChild().getNext();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild().getLastChild().getNext();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild().getLastChild().getNext();	  Node    lastArg    =    function.getLastChild().getNext();    	non-compiled	[CE]  	190	None	replace
1163	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getRootNode()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getRootNode()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getRootNode()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getParent()));    	non-compiled	[CE]  	124	None	replace
1164	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getNameNode()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getNameNode()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getNameNode()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getParent()));    	non-compiled	[CE]  	124	None	replace
1165	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getLastChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isName(function.getLastChild()));	  Preconditions.checkState(!NodeUtil.isName(function.getFirstChild()));    	non-compiled	[CE]  	216	None	replace
1166	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(function.getFirstChild()));	  Preconditions.checkState(!NodeUtil.isName(function.getFirstChild()));    	non-compiled	[CE]  	216	None	replace
1167	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild().getString();  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild().getString();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild().getString();	  Node    lastArg    =    fnScope.getLastChild().getString();    	non-compiled	[CE]  	245	None	replace
1168	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild().getString();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getFirstChild().getString();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getFirstChild().getString();	  Node    lastArg    =    fnScope.getLastChild().getString();    	non-compiled	[CE]  	245	None	replace
1169	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getLastChild().getString();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.getLastChild().getString();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getLastChild().getString();	  Node    lastArg    =    fnScope.getLastChild().getString();    	non-compiled	[CE]  	245	None	replace
1170	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getString()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getString()  +  1;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild().getString()  +  1;	  Node    lastArg    =    fnScope.getLastChild().getString();    	non-compiled	[CE]  	245	None	replace
1171	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getFirstChild().getString();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getFirstChild().getString();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild().getFirstChild().getString();	  Node    lastArg    =    fnScope.getLastChild().getString();    	non-compiled	[CE]  	245	None	replace
1172	[BUG]  [BUGGY]  Preconditions.checkState(function.getVar(fnScope.getString())  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getVar(fnScope.getString())  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getVar(fnScope.getString())  ==  null);	  Preconditions.checkState(function.getVar(fnScope.getString())!=    null);    	non-compiled	[CE]  	48	None	replace
1173	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getVar(fnScope.getString())!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getVar(fnScope.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getVar(fnScope.getString())!=  null);	  Preconditions.checkState(function.getVar(fnScope.getString())!=    null);    	non-compiled	[CE]  	48	None	replace
1174	[BUG]  [BUGGY]  Preconditions.checkState(function.getVar(fnScope.getName())!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getVar(fnScope.getName())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getVar(fnScope.getName())!=  null);	  Preconditions.checkState(function.getVar(fnScope.getString())!=    null);    	non-compiled	[CE]  	48	None	replace
1175	[BUG]  [BUGGY]  Preconditions.checkState(function.getVar(fnScope.getNameNode())!=  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getVar(fnScope.getNameNode())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getVar(fnScope.getNameNode())!=  null);	  Preconditions.checkState(function.getVar(fnScope.getString())!=    null);    	non-compiled	[CE]  	48	None	replace
1176	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getChildCount()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getChildCount()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getChildCount()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	58	None	replace
1177	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isConstructor());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.isConstructor());	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	86	None	replace
1178	[BUG]  [BUGGY]  Preconditions.checkState(!parentScope.isFunction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!parentScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!parentScope.isFunction());	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	86	None	replace
1179	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.isFunction()  &&  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	86	None	replace
1180	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isExtern());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.isExtern());	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	86	None	replace
1181	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isAll());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.isAll());	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	86	None	replace
1182	[BUG]  [BUGGY]  Node  parent  =  function.getImmediateParentNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getImmediateParentNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getImmediateParentNode();	  Node    parent    =    function.getParentNode();    	non-compiled	[CE]  	111	None	replace
1183	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getFirstChild()  +  1;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getFirstChild()  +  1;	  Node    lastArg    =    fnScope.getLastChild()    +    1;    	non-compiled	[CE]  	171	None	replace
1184	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getLastChild()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.getLastChild()  +  1;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getLastChild()  +  1;	  Node    lastArg    =    fnScope.getLastChild()    +    1;    	non-compiled	[CE]  	171	None	replace
1185	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getNext()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getNext()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getNext()!=  null);	  Preconditions.checkState(fnScope.getNext()!=    null);    	non-compiled	[CE]  	160	None	replace
1186	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFirstChild()!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getFirstChild()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getFirstChild()!=  null);	  Preconditions.checkState(fnScope.getNext()!=    null);    	non-compiled	[CE]  	160	None	replace
1187	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	59	None	replace
1188	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getChildCount()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getChildCount()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getChildCount()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	59	None	replace
1189	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getOwnerFunction()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getOwnerFunction()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getOwnerFunction()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	59	None	replace
1190	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	239	None	replace
1191	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	239	None	replace
1192	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	239	None	replace
1193	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	239	None	replace
1194	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getString()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	239	None	replace
1195	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isSetKey(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	239	None	replace
1196	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	239	None	replace
1197	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.VAR);    	non-compiled	[CE]  	224	None	replace
1198	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.VAR);    	non-compiled	[CE]  	224	None	replace
1199	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.VAR);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.VAR);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.VAR);    	non-compiled	[CE]  	224	None	replace
1200	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.VAR);    	non-compiled	[CE]  	224	None	replace
1201	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.VAR);    	non-compiled	[CE]  	224	None	replace
1202	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.VAR);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.VAR);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.VAR);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.VAR);    	non-compiled	[CE]  	224	None	replace
1203	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.VAR);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.VAR);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.VAR);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.VAR);    	non-compiled	[CE]  	224	None	replace
1204	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	223	None	replace
1205	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	223	None	replace
1206	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.GETPROP);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	223	None	replace
1207	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	223	None	replace
1208	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	223	None	replace
1209	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.GETPROP);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.GETPROP);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.GETPROP);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	223	None	replace
1210	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.GETPROP);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	223	None	replace
1211	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	222	None	replace
1212	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(fnScope.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(fnScope.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(fnScope.getFirstChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	222	None	replace
1213	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	222	None	replace
1214	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild(),  lastArg));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild(),  lastArg));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild(),  lastArg));	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	222	None	replace
1215	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()  +  1));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()  +  1));	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	222	None	replace
1216	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getType()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getType()));	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	222	None	replace
1217	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getString()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	222	None	replace
1218	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  fnScope);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	222	None	replace
1219	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	130	None	replace
1220	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	130	None	replace
1221	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstArg()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstArg()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstArg()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastArg()));    	non-compiled	[CE]  	31	None	replace
1222	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstArg()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstArg()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstArg()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastArg()));    	non-compiled	[CE]  	31	None	replace
1223	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstParent()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstParent()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastArg()));    	non-compiled	[CE]  	31	None	replace
1224	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()),  isPropertyAssign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()));    	non-compiled	[CE]  	282	None	replace
1225	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()  +  1));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()  +  1));	  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()));    	non-compiled	[CE]  	282	None	replace
1226	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getType()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getType()));	  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()));    	non-compiled	[CE]  	282	None	replace
1227	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()).isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()).isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()).isFunction());	  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()));    	non-compiled	[CE]  	282	None	replace
1228	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getNext()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getNext()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getNext()));	  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()));    	non-compiled	[CE]  	282	None	replace
1229	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.isSetKey(function.getNext()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.isSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())&&  NodeUtil.isSetKey(function.getNext()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	101	None	replace
1230	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	101	None	replace
1231	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	66	None	replace
1232	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	66	None	replace
1233	[BUG]  [BUGGY]  if(NodeUtil.isName(fnScope.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(fnScope.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(fnScope.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	66	None	replace
1234	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	66	None	replace
1235	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	211	None	replace
1236	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	211	None	replace
1237	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	211	None	replace
1238	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  FunctionUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  FunctionUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  FunctionUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	211	None	replace
1239	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getName()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getName()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	211	None	replace
1240	[BUG]  [BUGGY]  Preconditions.checkState(function.getVar(function.getString()),  isPropertyAssign);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getVar(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getVar(function.getString()),  isPropertyAssign);	  Preconditions.checkState(function.getVar(function.getString())!=    null);    	non-compiled	[CE]  	45	None	replace
1241	[BUG]  [BUGGY]  Preconditions.checkState(function.getNode()  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getNode()  ==  null);	  Preconditions.checkState(fnScope.getNode()    ==    null);    	non-compiled	[CE]  	120	None	replace
1242	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getNode()  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getNode()  ==  null);	  Preconditions.checkState(fnScope.getNode()    ==    null);    	non-compiled	[CE]  	120	None	replace
1243	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFirstChild()  ==  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getFirstChild()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getFirstChild()  ==  null);	  Preconditions.checkState(fnScope.getNode()    ==    null);    	non-compiled	[CE]  	120	None	replace
1244	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	325	None	replace
1245	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getRootNode()  ==  null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getRootNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	325	None	replace
1246	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	325	None	replace
1247	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParentNode()  ==  null);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParentNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParentNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	325	None	replace
1248	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	325	None	replace
1249	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getRootNode()  ==  null);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getRootNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	325	None	replace
1250	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	325	None	replace
1251	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isCall(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	328	None	replace
1252	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isCall(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	328	None	replace
1253	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isCall(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	328	None	replace
1254	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isCall(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	328	None	replace
1255	[BUG]  [BUGGY]  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg!=  null);	  lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	281	None	replace
1256	[BUG]  [BUGGY]  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg  ==  null);	  lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	281	None	replace
1257	[BUG]  [BUGGY]  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  function.getFirstChild();  Preconditions.checkState(lastArg  ==  null);	  lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	281	None	replace
1258	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	268	None	replace
1259	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	268	None	replace
1260	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isAssignmentOp(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isAssignmentOp(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isAssignmentOp(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	268	None	replace
1261	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	268	None	replace
1262	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	268	None	replace
1263	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetAndSetKey(function.getFirstChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetAndSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetAndSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	268	None	replace
1264	[BUG]  [BUGGY]  Preconditions.checkState(scope.isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.isFunction());	  Preconditions.checkState(parentScope.isFunction());    	non-compiled	[CE]  	85	None	replace
1265	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isExtern());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isExtern());	  Preconditions.checkState(parentScope.isFunction());    	non-compiled	[CE]  	85	None	replace
1266	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(function.getLastChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(function.getLastChild()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	29	None	replace
1267	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isSetKey(function.getLastChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isSetKey(function.getLastChild()));	  Preconditions.checkState(NodeUtil.isSetKey(function.getFirstChild()));    	non-compiled	[CE]  	178	None	replace
1268	[BUG]  [BUGGY]  if(NodeUtil.canHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.canHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.canHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	16	None	replace
1269	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isSetKey(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	16	None	replace
1270	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstCh  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstCh  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstCh	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	16	None	replace
1271	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isVar(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	68	None	replace
1272	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	326	None	replace
1273	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  &&  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  &&  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  &&  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	326	None	replace
1274	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	326	None	replace
1275	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  1);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  1);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  1);	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	326	None	replace
1276	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isUnreferenced());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isFunction()  ||  function.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	250	None	replace
1277	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	250	None	replace
1278	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  function.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isUnreferenced()  ||  function.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	250	None	replace
1279	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  function.isUnreferenced());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  function.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	250	None	replace
1280	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  function.isUnreferenced());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  function.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	250	None	replace
1281	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isReferenced()  ||  function.isUnreferenced());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isReferenced()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isReferenced()  ||  function.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	250	None	replace
1282	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  function.isUnreferenced());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isAll()  ||  function.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	250	None	replace
1283	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent())    	non-compiled	[CE]  	225	None	replace
1284	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent())    	non-compiled	[CE]  	225	None	replace
1285	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent())    	non-compiled	[CE]  	225	None	replace
1286	[BUG]  [BUGGY]  Node  parent  =  function.getParentOfRootNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getParentOfRootNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getParentOfRootNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	332	None	replace
1287	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfFunctionNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentOfFunctionNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentOfFunctionNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	332	None	replace
1288	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfVarNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentOfVarNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentOfVarNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	332	None	replace
1289	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentOfNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentOfNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	332	None	replace
1290	[BUG]  [BUGGY]  Node  parent  =  scope.getParentOfRootNode();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  scope.getParentOfRootNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  scope.getParentOfRootNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	332	None	replace
1291	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfChildNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentOfChildNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentOfChildNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	332	None	replace
1292	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getVar(function.getString()),  isPropertyAssign);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getVar(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getVar(function.getString()),  isPropertyAssign);	  Preconditions.checkState(fnScope.getVar(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
1293	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign.getVar(function.getString()),  function);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(isPropertyAssign.getVar(function.getString()),  function);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(isPropertyAssign.getVar(function.getString()),  function);	  Preconditions.checkState(fnScope.getVar(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
1294	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()  +  1),  isPropertyAssign);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()  +  1),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString()  +  1),  isPropertyAssign);	  Preconditions.checkState(fnScope.getVar(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
1295	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign.getVar(function.getString()),  isPropertyAssign);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(isPropertyAssign.getVar(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(isPropertyAssign.getVar(function.getString()),  isPropertyAssign);	  Preconditions.checkState(fnScope.getVar(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
1296	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign.getVar(function.getString()),  fnScope);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(isPropertyAssign.getVar(function.getString()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(isPropertyAssign.getVar(function.getString()),  fnScope);	  Preconditions.checkState(fnScope.getVar(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
1297	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString())||  isPropertyAssign);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString())||  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString())||  isPropertyAssign);	  Preconditions.checkState(fnScope.getVar(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
1298	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getNameNode()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getNameNode()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getNameNode()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));    	non-compiled	[CE]  	125	None	replace
1299	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()),  isPropertyAssign);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));    	non-compiled	[CE]  	125	None	replace
1300	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()  +  1));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()  +  1));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));    	non-compiled	[CE]  	125	None	replace
1301	[BUG]  [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(!NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	137	None	replace
1302	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.isGetOrSetKey(function.getString()))  {	  if(!NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	137	None	replace
1303	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.isGetOrSetKey(function.getString()))  {	  if(!NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	137	None	replace
1304	[BUG]  [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.isImmutableValue(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.isImmutableValue(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.isImmutableValue(function.getString()))  {	  if(!NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	137	None	replace
1305	[BUG]  [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.isName(function.getString()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.isName(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.isName(function.getString()))  {	  if(!NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	137	None	replace
1306	[BUG]  [BUGGY]  if(!NodeUtil.isImmutableValue(function.getString()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isImmutableValue(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isImmutableValue(function.getString()))  {	  if(!NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	137	None	replace
1307	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  fnScope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	205	None	replace
1308	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  function);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  function);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  function);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	205	None	replace
1309	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  parentScope);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  parentScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  parentScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	205	None	replace
1310	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  scope);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  scope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  scope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	205	None	replace
1311	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope,  parentScope);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope,  parentScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope,  parentScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	205	None	replace
1312	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope,  scope);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope,  scope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope,  scope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	205	None	replace
1313	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  lastArg);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  lastArg);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  lastArg);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    lastArg);    	non-compiled	[CE]  	272	None	replace
1314	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  function);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  function);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  function);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    lastArg);    	non-compiled	[CE]  	272	None	replace
1315	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  parent);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  parent);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    lastArg);    	non-compiled	[CE]  	272	None	replace
1316	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  argList);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  argList);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  argList);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    lastArg);    	non-compiled	[CE]  	272	None	replace
1317	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.getParent());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.getParent());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.getParent());	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    lastArg);    	non-compiled	[CE]  	272	None	replace
1318	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  varList);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  varList);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  varList);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    lastArg);    	non-compiled	[CE]  	272	None	replace
1319	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  lastArg);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  lastArg);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  lastArg);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    lastArg);    	non-compiled	[CE]  	272	None	replace
1320	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  lastArg);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  lastArg);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  lastArg);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    lastArg);    	non-compiled	[CE]  	272	None	replace
1321	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isFunction(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	310	None	replace
1322	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()  +  1));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()  +  1));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()    +    1));    	non-compiled	[CE]  	203	None	replace
1323	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getParent()!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getParent()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getParent()!=  null);	  Preconditions.checkState(function.getParent()!=    null);    	non-compiled	[CE]  	156	None	replace
1324	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getParent())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getParent())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getParent())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getNext())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	183	None	replace
1325	[BUG]  [BUGGY]  Node  parent  =  function.getConstructorNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getConstructorNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getConstructorNode();	  Node    parent    =    fnScope.getConstructorNode();    	non-compiled	[CE]  	271	None	replace
1326	[BUG]  [BUGGY]  Node  parent  =  scope.getConstructorNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  scope.getConstructorNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  scope.getConstructorNode();	  Node    parent    =    fnScope.getConstructorNode();    	non-compiled	[CE]  	271	None	replace
1327	[BUG]  [BUGGY]  Node  parent  =  function.getParentOperator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getParentOperator();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getParentOperator();	  Node    parent    =    fnScope.getParentOperator();    	non-compiled	[CE]  	262	None	replace
1328	[BUG]  [BUGGY]  Node  parent  =  scope.getParentOperator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  scope.getParentOperator();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  scope.getParentOperator();	  Node    parent    =    fnScope.getParentOperator();    	non-compiled	[CE]  	262	None	replace
1329	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.hasVar(function.getString())  ==  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.hasVar(function.getString())  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.hasVar(function.getString())  ==  null);	  Preconditions.checkState(fnScope.hasVar(function.getString())!=    null);    	non-compiled	[CE]  	306	None	replace
1330	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.hasVar(function.getString())!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.hasVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.hasVar(function.getString())!=  null);	  Preconditions.checkState(fnScope.hasVar(function.getString())!=    null);    	non-compiled	[CE]  	306	None	replace
1331	[BUG]  [BUGGY]  Preconditions.checkState(function.hasVar(fnScope.getString())!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.hasVar(fnScope.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.hasVar(fnScope.getString())!=  null);	  Preconditions.checkState(fnScope.hasVar(function.getString())!=    null);    	non-compiled	[CE]  	306	None	replace
1332	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.hasVar(function.getString())!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.hasVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.hasVar(function.getString())!=  null);	  Preconditions.checkState(fnScope.hasVar(function.getString())!=    null);    	non-compiled	[CE]  	306	None	replace
1333	[BUG]  [BUGGY]  Preconditions.checkState(function.hasVar(function.getString())!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.hasVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.hasVar(function.getString())!=  null);	  Preconditions.checkState(fnScope.hasVar(function.getString())!=    null);    	non-compiled	[CE]  	306	None	replace
1334	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.hasVar(function.getString()  +  1)!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.hasVar(function.getString()  +  1)!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.hasVar(function.getString()  +  1)!=  null);	  Preconditions.checkState(fnScope.hasVar(function.getString())!=    null);    	non-compiled	[CE]  	306	None	replace
1335	[BUG]  [BUGGY]  Preconditions.checkState(scope.hasVar(function.getString())!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.hasVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.hasVar(function.getString())!=  null);	  Preconditions.checkState(fnScope.hasVar(function.getString())!=    null);    	non-compiled	[CE]  	306	None	replace
1336	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.hasVar(function.getString()),  isPropertyAssign);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.hasVar(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.hasVar(function.getString()),  isPropertyAssign);	  Preconditions.checkState(fnScope.hasVar(function.getString())!=    null);    	non-compiled	[CE]  	306	None	replace
1337	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	166	None	replace
1338	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild()))  {	  if(NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	140	None	replace
1339	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(function.getString())||  NodeUtil.isImmutableValue(function.getString()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isLiteralValue(function.getString())||  NodeUtil.isImmutableValue(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isLiteralValue(function.getString())||  NodeUtil.isImmutableValue(function.getString()))  {	  if(NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	140	None	replace
1340	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString()  +  1))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString()  +  1))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString()  +  1))  {	  if(NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	140	None	replace
1341	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getLastChild()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getLastChild()))  {	  if(NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	140	None	replace
1342	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getQualifiedName()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getQualifiedName()))  {	  if(NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	140	None	replace
1343	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString(),  lastArg))  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString(),  lastArg))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString(),  lastArg))  {	  if(NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	140	None	replace
1344	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getLastArg()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getLastArg()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getLastArg()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastArg()));    	non-compiled	[CE]  	123	None	replace
1345	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstParent()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastArg()));    	non-compiled	[CE]  	123	None	replace
1346	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstArg()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstArg()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstArg()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastArg()));    	non-compiled	[CE]  	123	None	replace
1347	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()!=    Token.NAME);    	non-compiled	[CE]  	12	None	replace
1348	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()!=    Token.NAME);    	non-compiled	[CE]  	12	None	replace
1349	[BUG]  [BUGGY]  Preconditions.checkState(compiler.getVar(function.getString())!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(compiler.getVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(compiler.getVar(function.getString())!=  null);	  Preconditions.checkState(parentScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	43	None	replace
1350	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isConstructor());	  Preconditions.checkState(fnScope.isConstructor());    	non-compiled	[CE]  	87	None	replace
1351	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isConstructor());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isConstructor());    	non-compiled	[CE]  	87	None	replace
1352	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isConstructor());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.isConstructor());	  Preconditions.checkState(fnScope.isConstructor());    	non-compiled	[CE]  	87	None	replace
1353	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isInterface());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isInterface());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isInterface());	  Preconditions.checkState(fnScope.isConstructor());    	non-compiled	[CE]  	87	None	replace
1354	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.isConstructor());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.isConstructor());	  Preconditions.checkState(fnScope.isConstructor());    	non-compiled	[CE]  	87	None	replace
1355	[BUG]  [BUGGY]  Node  parent  =  function.getParentFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getParentFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getParentFirstChild();	  Node    parent    =    fnScope.getParentFirstChild();    	non-compiled	[CE]  	334	None	replace
1356	[BUG]  [BUGGY]  Node  parent  =  scope.getParentFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  scope.getParentFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  scope.getParentFirstChild();	  Node    parent    =    fnScope.getParentFirstChild();    	non-compiled	[CE]  	334	None	replace
1357	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	20	None	replace
1358	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	20	None	replace
1359	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.isAll());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isFunction()  ||  fnScope.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	315	None	replace
1360	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  fnScope.isAll());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  fnScope.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isAll()  ||  fnScope.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	315	None	replace
1361	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isAll());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	315	None	replace
1362	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  fnScope.isAll());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  fnScope.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isUnreferenced()  ||  fnScope.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	315	None	replace
1363	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  fnScope.isAll());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  fnScope.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isFunction()  &&  fnScope.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	315	None	replace
1364	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isAll());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	315	None	replace
1365	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||  fnScope.isAll());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||  fnScope.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.isFunction()  ||  fnScope.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	315	None	replace
1366	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  fnScope.isFunction());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isAll()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	315	None	replace
1367	[BUG]  [BUGGY]  Node  lastArg  =  function  ==  null?  null  :  function.removeFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function  ==  null?  null  :  function.removeFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function  ==  null?  null  :  function.removeFirstChild();	  Node    lastArg    =    function.removeFirstChild();    	non-compiled	[CE]  	188	None	replace
1368	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  parent));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  parent));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  parent));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	202	None	replace
1369	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild(),  lastArg));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild(),  lastArg));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild(),  lastArg));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	202	None	replace
1370	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	202	None	replace
1371	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getParent()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	202	None	replace
1372	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getNext()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getNext()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getNext()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	202	None	replace
1373	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	202	None	replace
1374	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild(),  lastArg));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild(),  lastArg));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild(),  lastArg));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	202	None	replace
1375	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLocalPart()));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLocalPart()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLocalPart()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	202	None	replace
1376	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  1);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  1);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	129	None	replace
1377	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isVar(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	76	None	replace
1378	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getNext())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getNext())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getNext())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isFunction(function.getNext())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	292	None	replace
1379	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	32	None	replace
1380	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	32	None	replace
1381	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.hasChildren());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.hasChildren());	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	274	None	replace
1382	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	274	None	replace
1383	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	274	None	replace
1384	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  &&  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  &&  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  &&  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	274	None	replace
1385	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	23	None	replace
1386	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isFunction(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isFunction(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isFunction(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	267	None	replace
1387	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	267	None	replace
1388	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {	  if(NodeUtil.isGet(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	226	None	replace
1389	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getReferenceNameNode()!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getReferenceNameNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getReferenceNameNode()!=  null);	  Preconditions.checkState(fnScope.getNameNode()!=    null);    	non-compiled	[CE]  	158	None	replace
1390	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isAll());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isFunction()  ||  function.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	315	None	replace
1391	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	129	None	replace
1392	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	129	None	replace
1393	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isConstructor());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isConstructor());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	129	None	replace
1394	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	129	None	replace
1395	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isVar(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isVar(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isVar(function.getString()))  {	  if(NodeUtil.isVar(function.getString()))    {    	non-compiled	[CE]  	337	None	replace
1396	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSideEffects(function.getString()))  {	  if(NodeUtil.isVar(function.getString()))    {    	non-compiled	[CE]  	337	None	replace
1397	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isVar(function.getType()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isVar(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isVar(function.getType()))  {	  if(NodeUtil.isVar(function.getString()))    {    	non-compiled	[CE]  	337	None	replace
1398	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isFunction());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function!=  null  ||  function.isFunction());	  Preconditions.checkState(function.isFunction());    	non-compiled	[CE]  	84	None	replace
1399	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction());    	non-compiled	[CE]  	84	None	replace
1400	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction());    	non-compiled	[CE]  	84	None	replace
1401	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(function.isFunction());    	non-compiled	[CE]  	84	None	replace
1402	[BUG]  [BUGGY]  if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  lastArg  =  function.getLastChild();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  lastArg  =  function.getLastChild();  }  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  lastArg  =  function.getLastChild();  }	  Preconditions.checkState(function.getType()    ==    Token.GETPROP);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	213	None	replace
1403	[BUG]  [BUGGY]  if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  function  =  function.getLastChild();  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  function  =  function.getLastChild();  }  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  function  =  function.getLastChild();  }	  Preconditions.checkState(function.getType()    ==    Token.GETPROP);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	213	None	replace
1404	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  Node  function  =  function.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  Node  function  =  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  Node  function  =  function.getLastChild();	  Preconditions.checkState(function.getType()    ==    Token.GETPROP);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	213	None	replace
1405	[BUG]  [BUGGY]  Node  parent  =  fnScope.getImmediateParentNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getImmediateParentNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getImmediateParentNode();	  Node    parent    =    fnScope.getLastChild();    	non-compiled	[CE]  	78	None	replace
1406	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	136	None	replace
1407	[BUG]  [BUGGY]  if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	136	None	replace
1408	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	136	None	replace
1409	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkArgument(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	324	None	replace
1410	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  function.hasChildren());	  Preconditions.checkArgument(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	324	None	replace
1411	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkArgument(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	324	None	replace
1412	[BUG]  [BUGGY]  if(NodeUtil.isGetProp(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetProp(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetProp(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	64	None	replace
1413	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||  fnScope.isUnreferenced());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||  fnScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isDefined()  ||  fnScope.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isUnreferenced());    	non-compiled	[CE]  	90	None	replace
1414	[BUG]  [BUGGY]  Node  lastArg  =  getLastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  getLastChild();	  Node    lastArg    =    scope.getLastChild();    	non-compiled	[CE]  	244	None	replace
1415	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSideEffects(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSideEffects(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getParent()))    {    	non-compiled	[CE]  	230	None	replace
1416	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSideEffects(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSideEffects(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getParent()))    {    	non-compiled	[CE]  	230	None	replace
1417	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getLastArg()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getLastArg()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getLastArg()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastArg()));    	non-compiled	[CE]  	123	None	replace
1418	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	139	None	replace
1419	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	139	None	replace
1420	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())&&  NodeUtil.mayHaveSecondarySideEffects(function))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())&&  NodeUtil.mayHaveSecondarySideEffects(function))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getQualifiedName())&&  NodeUtil.mayHaveSecondarySideEffects(function))  {	  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	139	None	replace
1421	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())&&  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())&&  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getQualifiedName())&&  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	139	None	replace
1422	[BUG]  [BUGGY]  Preconditions.checkArgument(!fnScope.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!fnScope.isFunction());	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	86	None	replace
1423	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isFunctionExpression());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.isFunctionExpression());	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	86	None	replace
1424	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	1	None	replace
1425	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isFunction(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	310	None	replace
1426	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	19	None	replace
1427	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isFunction(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isFunction(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isFunction(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	19	None	replace
1428	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetAndSetKey(function.getFirstChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetAndSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isGetAndSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	19	None	replace
1429	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	175	None	replace
1430	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGet(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGet(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGet(function.getFirstChild()));	  Preconditions.checkState(!NodeUtil.isVar(function.getFirstChild()));    	non-compiled	[CE]  	301	None	replace
1431	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isForIn(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isForIn(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isForIn(function.getFirstChild()));	  Preconditions.checkState(!NodeUtil.isVar(function.getFirstChild()));    	non-compiled	[CE]  	301	None	replace
1432	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),!isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),!isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),!isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	201	None	replace
1433	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	269	None	replace
1434	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	269	None	replace
1435	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	269	None	replace
1436	[BUG]  [BUGGY]  if(!isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.hasChildren())    {    	non-compiled	[CE]  	343	None	replace
1437	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isUnreferenced());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function!=  null  ||  function.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	250	None	replace
1438	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isUnreferenced());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	250	None	replace
1439	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),!isPropertyAssign);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),!isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),!isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	93	None	replace
1440	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!isPropertyAssign);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	93	None	replace
1441	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&!isPropertyAssign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&!isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&!isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	93	None	replace
1442	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isImmutableValue(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	312	None	replace
1443	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetProp(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetProp(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetProp(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	108	None	replace
1444	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	108	None	replace
1445	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	65	None	replace
1446	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isExpressionNode(function.getLastChild()))    {    	non-compiled	[CE]  	200	None	replace
1447	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isExpressionNode(function.getLastChild()))    {    	non-compiled	[CE]  	200	None	replace
1448	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild())  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild())	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isExpressionNode(function.getLastChild()))    {    	non-compiled	[CE]  	200	None	replace
1449	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChil  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChil  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChil	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isExpressionNode(function.getLastChild()))    {    	non-compiled	[CE]  	200	None	replace
1450	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isConstructor());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isFunction()  ||  function.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	89	None	replace
1451	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||  fnScope.isConstructor());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||  fnScope.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isDefined()  ||  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	89	None	replace
1452	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getShortName()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getShortName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getShortName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getShortName()))    {    	non-compiled	[CE]  	104	None	replace
1453	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLongName()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLongName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLongName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getShortName()))    {    	non-compiled	[CE]  	104	None	replace
1454	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getShortName()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getShortName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getShortName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getShortName()))    {    	non-compiled	[CE]  	104	None	replace
1455	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function,  fnScope.getLastChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function,  fnScope.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function,  fnScope.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getLastChild()));    	non-compiled	[CE]  	174	None	replace
1456	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));	  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	299	None	replace
1457	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.isExpressionNode(function.getFirstChild()))    {    	non-compiled	[CE]  	338	None	replace
1458	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.isExpressionNode(function.getFirstChild()))    {    	non-compiled	[CE]  	338	None	replace
1459	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.isExpressionNode(function.getFirstChild()))    {    	non-compiled	[CE]  	338	None	replace
1460	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.isExpressionNode(function.getFirstChild()))    {    	non-compiled	[CE]  	338	None	replace
1461	[BUG]  [BUGGY]  Node  parent  =  lastArg.getParent();  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  lastArg.getParent();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  lastArg.getParent();	  Node    parent    =    function.getParent();    	non-compiled	[CE]  	77	None	replace
1462	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	193	None	replace
1463	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	193	None	replace
1464	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||!NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||!NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||!NodeUtil.isGetOrSetKey(function.getString()))  {	  if(!NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	137	None	replace
1465	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&!NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&!NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&!NodeUtil.isGetOrSetKey(function.getString()))  {	  if(!NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	137	None	replace
1466	[BUG]  [BUGGY]  if(NodeUtil.isName(function)||!NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function)||!NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function)||!NodeUtil.isGetOrSetKey(function.getString()))  {	  if(!NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	137	None	replace
1467	[BUG]  [BUGGY]  if(function  ==  null  ||!NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(function  ==  null  ||!NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(function  ==  null  ||!NodeUtil.isGetOrSetKey(function.getString()))  {	  if(!NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	137	None	replace
1468	[BUG]  [BUGGY]  if(NodeUtil.isForIn(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isForIn(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isForIn(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isExpressionNode(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	320	None	replace
1469	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isFunction(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isFunction(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isFunction(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	246	None	replace
1470	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	246	None	replace
1471	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isFunction(function.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isFunction(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isFunction(function.getFirstChild()))  {	  if(NodeUtil.isFunction(function.getFirstChild()))    {    	non-compiled	[CE]  	285	None	replace
1472	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {	  if(NodeUtil.isFunction(function.getFirstChild()))    {    	non-compiled	[CE]  	285	None	replace
1473	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isFunction(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isFunction(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isFunction(function.getFirstChild()))  {	  if(NodeUtil.isFunction(function.getFirstChild()))    {    	non-compiled	[CE]  	285	None	replace
1474	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {	  if(NodeUtil.isFunction(function.getFirstChild()))    {    	non-compiled	[CE]  	285	None	replace
1475	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isFunction(function.getFirstChild()))    {    	non-compiled	[CE]  	285	None	replace
1476	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isFunction(function.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isFunction(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.isFunction(function.getFirstChild()))  {	  if(NodeUtil.isFunction(function.getFirstChild()))    {    	non-compiled	[CE]  	285	None	replace
1477	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	27	None	replace
1478	[BUG]  [BUGGY]  if(NodeUtil.isGetProp(function.getString())&&  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetProp(function.getString())&&  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetProp(function.getString())&&  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	27	None	replace
1479	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGet(function.getParent()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGet(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isGet(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	27	None	replace
1480	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  parentScope!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  parentScope!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  parentScope!=  null);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	95	None	replace
1481	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope,  scope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope,  scope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	95	None	replace
1482	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  mayHaveSecondarySideEffects)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  mayHaveSecondarySideEffects)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
1483	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
1484	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function.cloneTree()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function.cloneTree()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function.cloneTree()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
1485	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
1486	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
1487	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	166	None	replace
1488	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getName())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getName())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getName())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	21	None	replace
1489	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString())||  lastArg  ==  null)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString())||  lastArg  ==  null)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString())||  lastArg  ==  null)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	21	None	replace
1490	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {	  if(NodeUtil.isGet(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	219	None	replace
1491	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	102	None	replace
1492	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	102	None	replace
1493	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	102	None	replace
1494	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	102	None	replace
1495	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getParent()));    	non-compiled	[CE]  	124	None	replace
1496	[BUG]  [BUGGY]  if(NodeUtil.isGet(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	16	None	replace
1497	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOr  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOr  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOr	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	16	None	replace
1498	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChil  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChil  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChil	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	16	None	replace
1499	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetAndSetKey(function.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetAndSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetAndSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	34	None	replace
1500	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getString()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	323	None	replace
1501	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGet(function.getString()));	  Preconditions.checkState(NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	323	None	replace
1502	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	228	None	replace
1503	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function!=  null  &&  function.isFunction());	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	252	None	replace
1504	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.NAME);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	252	None	replace
1505	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	210	None	replace
1506	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	210	None	replace
1507	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.hasChildren());	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	326	None	replace
1508	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	326	None	replace
1509	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	326	None	replace
1510	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	326	None	replace
1511	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isVar(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	161	None	replace
1512	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	284	None	replace
1513	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChil  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChil  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChil	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	284	None	replace
1514	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	284	None	replace
1515	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	239	None	replace
1516	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	248	None	replace
1517	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	248	None	replace
1518	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.get  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.get  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.get	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	248	None	replace
1519	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	248	None	replace
1520	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getPar  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getPar  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getPar	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	248	None	replace
1521	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	25	None	replace
1522	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getName()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getName()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()));    	non-compiled	[CE]  	94	None	replace
1523	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	199	None	replace
1524	[BUG]  [BUGGY]  if(NodeUtil.isPropertyAssign(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isPropertyAssign(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isPropertyAssign(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	199	None	replace
1525	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	199	None	replace
1526	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	199	None	replace
1527	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnScope(scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getOwnScope(scope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getOwnScope(scope);	  Node    parent    =    fnScope.getOwnScope();    	non-compiled	[CE]  	263	None	replace
1528	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	2	None	replace
1529	[BUG]  [BUGGY]  lastArg  =  function.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  function.getLastChild();	  lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	281	None	replace
1530	[BUG]  [BUGGY]  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg!=  null);	  lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	281	None	replace
1531	[BUG]  [BUGGY]  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  function.getLastChild();  preconditions.checkState(lastArg!=  null);	  lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	281	None	replace
1532	[BUG]  [BUGGY]  lastArg  =  function.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  function.getFirstChild();	  lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	281	None	replace
1533	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	195	None	replace
1534	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext())  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext())	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	195	None	replace
1535	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	195	None	replace
1536	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSideEffects(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSideEffects(function.getString()));	  Preconditions.checkState(!NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	317	None	replace
1537	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGet(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGet(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGet(function.getString()));	  Preconditions.checkState(!NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	317	None	replace
1538	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.getVar(function.getString())!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.getVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.getVar(function.getString())!=  null);	  Preconditions.checkArgument(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	305	None	replace
1539	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getVar(function.getString()),  function!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getVar(function.getString()),  function!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getVar(function.getString()),  function!=  null);	  Preconditions.checkArgument(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	305	None	replace
1540	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	3	None	replace
1541	[BUG]  [BUGGY]  if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	3	None	replace
1542	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isVar(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	294	None	replace
1543	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isSetKey(function.getNext()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isSetKey(function.getNext()))  {	  if(NodeUtil.isVar(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	294	None	replace
1544	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	155	None	replace
1545	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	59	None	replace
1546	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	59	None	replace
1547	[BUG]  [BUGGY]  Node  parent  =  fnScope.getCurrentNameNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getCurrentNameNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getCurrentNameNode();	  Node    parent    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	83	None	replace
1548	[BUG]  [BUGGY]  Node  lastArg  =  function!=  null?  function.lastChild()  :  parentScope.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function!=  null?  function.lastChild()  :  parentScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function!=  null?  function.lastChild()  :  parentScope.getLastChild();	  Node    lastArg    =    function.lastChild();    	non-compiled	[CE]  	277	None	replace
1549	[BUG]  [BUGGY]  Node  lastArg  =  function.firstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.firstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.firstChild();	  Node    lastArg    =    function.lastChild();    	non-compiled	[CE]  	277	None	replace
1550	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	71	None	replace
1551	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	71	None	replace
1552	[BUG]  [BUGGY]  Preconditions.checkState(function.getLastChild()!=  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getLastChild()!=  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getLastChild()!=  fnScope);	  Preconditions.checkState(fnScope.getLastChild()!=    function);    	non-compiled	[CE]  	173	None	replace
1553	[BUG]  [BUGGY]  Preconditions.checkState(function.getFirstChild()!=  fnScope.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getFirstChild()!=  fnScope.getLastChild());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getFirstChild()!=  fnScope.getLastChild());	  Preconditions.checkState(fnScope.getLastChild()!=    function);    	non-compiled	[CE]  	173	None	replace
1554	[BUG]  [BUGGY]  Preconditions.checkState(lastArg!=  fnScope.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg!=  fnScope.getLastChild());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg!=  fnScope.getLastChild());	  Preconditions.checkState(fnScope.getLastChild()!=    function);    	non-compiled	[CE]  	173	None	replace
1555	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstCh  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstCh  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstCh	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	18	None	replace
1556	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isName(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isName(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.isName(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	243	None	replace
1557	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()  +  1));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()  +  1));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));    	non-compiled	[CE]  	176	None	replace
1558	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGet(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));    	non-compiled	[CE]  	300	None	replace
1559	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	194	None	replace
1560	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function)||  NodeUtil.isExpressionNode(function.getString()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function)||  NodeUtil.isExpressionNode(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function)||  NodeUtil.isExpressionNode(function.getString()))  {	  if(NodeUtil.isExpressionNode(function.getString()))    {    	non-compiled	[CE]  	141	None	replace
1561	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function)||  NodeUtil.isFunction(function.getString()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function)||  NodeUtil.isFunction(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function)||  NodeUtil.isFunction(function.getString()))  {	  if(NodeUtil.isExpressionNode(function.getString()))    {    	non-compiled	[CE]  	141	None	replace
1562	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function)&&  NodeUtil.isExpressionNode(function.getString()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function)&&  NodeUtil.isExpressionNode(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function)&&  NodeUtil.isExpressionNode(function.getString()))  {	  if(NodeUtil.isExpressionNode(function.getString()))    {    	non-compiled	[CE]  	141	None	replace
1563	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isFunction(function.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isFunction(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isFunction(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	268	None	replace
1564	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isForIn(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isForIn(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isForIn(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	268	None	replace
1565	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isName(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isName(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isName(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	268	None	replace
1566	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstArg()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstArg()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstArg()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastArg()));    	non-compiled	[CE]  	31	None	replace
1567	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstArg()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstArg()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstArg()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastArg()));    	non-compiled	[CE]  	31	None	replace
1568	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	5	None	replace
1569	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getName()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getName()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	5	None	replace
1570	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	5	None	replace
1571	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOr  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOr  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOr	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	5	None	replace
1572	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.hasChildren()?  function.getLastChild()  :  fnScope.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.hasChildren()?  function.getLastChild()  :  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.hasChildren()?  function.getLastChild()  :  fnScope.getLastChild();	  Node    lastArg    =    function.hasChildren()?    function.getLastChild()    :    fnScope.getLastChild();    	non-compiled	[CE]  	298	None	replace
1573	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.hasChildren()?  function.getLastChild()  :  function.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.hasChildren()?  function.getLastChild()  :  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.hasChildren()?  function.getLastChild()  :  function.getFirstChild();	  Node    lastArg    =    function.hasChildren()?    function.getLastChild()    :    fnScope.getLastChild();    	non-compiled	[CE]  	298	None	replace
1574	[BUG]  [BUGGY]  Node  lastArg  =  function.isFunction()?  function.getLastChild()  :  fnScope.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.isFunction()?  function.getLastChild()  :  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.isFunction()?  function.getLastChild()  :  fnScope.getLastChild();	  Node    lastArg    =    function.hasChildren()?    function.getLastChild()    :    fnScope.getLastChild();    	non-compiled	[CE]  	298	None	replace
1575	[BUG]  [BUGGY]  Node  lastArg  =  function!=  null?  function.getLastChild()  :  fnScope.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function!=  null?  function.getLastChild()  :  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function!=  null?  function.getLastChild()  :  fnScope.getLastChild();	  Node    lastArg    =    function.hasChildren()?    function.getLastChild()    :    fnScope.getLastChild();    	non-compiled	[CE]  	298	None	replace
1576	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString(),  lastArg)!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString(),  lastArg)!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.getVar(function.getString(),  lastArg)!=  null);	  Preconditions.checkState(!fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	50	None	replace
1577	[BUG]  [BUGGY]  Preconditions.checkArgument(!fnScope.getVar(function.getString())!=  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!fnScope.getVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!fnScope.getVar(function.getString())!=  null);	  Preconditions.checkState(!fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	50	None	replace
1578	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  mayHaveSecondarySideEffects)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  mayHaveSecondarySideEffects)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	240	None	replace
1579	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  isPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  isPropertyAssign)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  isPropertyAssign)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	240	None	replace
1580	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getJSDocInfo()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getJSDocInfo()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getJSDocInfo()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	240	None	replace
1581	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function)&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function)&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function)&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isFunction(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	217	None	replace
1582	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGet(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	339	None	replace
1583	[BUG]  [BUGGY]  if(!NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	24	None	replace
1584	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	24	None	replace
1585	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	75	None	replace
1586	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isImmutableValue(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	109	None	replace
1587	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParent(function);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParent(function);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParent(function);	  Node    parent    =    fnScope.getParent(parent);    	non-compiled	[CE]  	261	None	replace
1588	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentNode(function);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode(function);	  Node    parent    =    fnScope.getParent(parent);    	non-compiled	[CE]  	261	None	replace
1589	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString(),  mayHaveSecondarySideEffects));  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString(),  mayHaveSecondarySideEffects));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString(),  mayHaveSecondarySideEffects));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	208	None	replace
1590	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	39	None	replace
1591	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(lastArg));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(lastArg));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(lastArg));	  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	39	None	replace
1592	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isDefined());	  Preconditions.checkState(parentScope.isFunction());    	non-compiled	[CE]  	85	None	replace
1593	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isSetKey(function.getFirstChild()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getLastChild())&&  NodeUtil.isSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	264	None	replace
1594	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	264	None	replace
1595	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.hasChildren()?  function.getFirstChild()  :  function.getLastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.hasChildren()?  function.getFirstChild()  :  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.hasChildren()?  function.getFirstChild()  :  function.getLastChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getLastChild();    	non-compiled	[CE]  	295	None	replace
1596	[BUG]  [BUGGY]  if(NodeUtil.isName(function)||!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function)||!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function)||!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
1597	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
1598	[BUG]  [BUGGY]  if(NodeUtil.isName(function)&&!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function)&&!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function)&&!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
1599	[BUG]  [BUGGY]  if(NodeUtil.isGet(function)&&!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function)&&!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function)&&!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
1600	[BUG]  [BUGGY]  if(!NodeUtil.isName(function.getFirstChild()))  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isName(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isName(function.getFirstChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
1601	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getJSDocInfo())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getJSDocInfo())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getJSDocInfo())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getNext())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	183	None	replace
1602	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getLastChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	73	None	replace
1603	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	67	None	replace
1604	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.canModifyCallers(function.getQualifiedName()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.canModifyCallers(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.canModifyCallers(function.getQualifiedName()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	67	None	replace
1605	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.get  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.get  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName())||  NodeUtil.isGetOrSetKey(function.get	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	67	None	replace
1606	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	265	None	replace
1607	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChil  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChil  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChil	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	265	None	replace
1608	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	154	None	replace
1609	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	154	None	replace
1610	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.mayHaveSideEffects(function.getString()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.mayHaveSideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.mayHaveSideEffects(function.getString()));	  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	154	None	replace
1611	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	154	None	replace
1612	[BUG]  [BUGGY]  if(NodeUtil.isName(function)||  NodeUtil.isFunction(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function)||  NodeUtil.isFunction(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function)||  NodeUtil.isFunction(function.getString()))  {	  if(NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	242	None	replace
1613	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	242	None	replace
1614	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isFunction(function.getParentNode()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isFunction(function.getParentNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isFunction(function.getParentNode()))  {	  if(NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	242	None	replace
1615	[BUG]  [BUGGY]  if(NodeUtil.isGetProp(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetProp(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetProp(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	22	None	replace
1616	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isFunction(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isFunction(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isFunction(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
1617	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.is  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.is  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.is	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
1618	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.hasKey(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.hasKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.hasKey(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
1619	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
1620	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGet  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGet  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGet	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
1621	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.isGet  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.isGet  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.isGet	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
1622	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrCreateKey(function.getString()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrCreateKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrCreateKey(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
1623	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString(),  lastArg));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString(),  lastArg));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString(),  lastArg));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    lastArg));    	non-compiled	[CE]  	98	None	replace
1624	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  arg));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  arg));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  arg));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    lastArg));    	non-compiled	[CE]  	98	None	replace
1625	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));    	non-compiled	[CE]  	229	None	replace
1626	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isVar(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	309	None	replace
1627	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function)&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function)&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function)&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isFunction(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	163	None	replace
1628	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	227	None	replace
1629	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondaryS  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondaryS  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondaryS	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	227	None	replace
1630	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffect  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffect  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffect	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	227	None	replace
1631	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	227	None	replace
1632	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondaryS  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondaryS  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondaryS	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	227	None	replace
1633	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	227	None	replace
1634	[BUG]  [BUGGY]  if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  lastArg  =  function.getLastChild();  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  lastArg  =  function.getLastChild();  }  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  lastArg  =  function.getLastChild();  }	  Preconditions.checkState(function.getType()    ==    Token.NAME);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	214	None	replace
1635	[BUG]  [BUGGY]  if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  function  =  function.getLastChild();  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  function  =  function.getLastChild();  }  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.NAME);  Node  function  =  function.getLastChild();  }	  Preconditions.checkState(function.getType()    ==    Token.NAME);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	214	None	replace
1636	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isName(function.getParent())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	181	None	replace
1637	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext())||  lastArg  ==  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext())||  lastArg  ==  null)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext())||  lastArg  ==  null)  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getNext()))    {    	non-compiled	[CE]  	218	None	replace
1638	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	209	None	replace
1639	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getParent()!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getParent()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getParent()!=  null);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	143	None	replace
1640	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	143	None	replace
1641	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.hasChildren()?  fnScope.getLastChild()  :  function;  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  parentScope.hasChildren()?  fnScope.getLastChild()  :  function;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  parentScope.hasChildren()?  fnScope.getLastChild()  :  function;	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function;    	non-compiled	[CE]  	296	None	replace
1642	[BUG]  [BUGGY]  Node  parent  =  this.parentScope.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  this.parentScope.getParent();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  this.parentScope.getParent();	  Node    parent    =    scope.getParent();    	non-compiled	[CE]  	82	None	replace
1643	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	100	None	replace
1644	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	100	None	replace
1645	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild().getType()  ==  Token.FUNCTION?  function.getLastChild().getNext()  :  function.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild().getType()  ==  Token.FUNCTION?  function.getLastChild().getNext()  :  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild().getType()  ==  Token.FUNCTION?  function.getLastChild().getNext()  :  function.getLastChild();	  Node    lastArg    =    function.getLastChild().getNext();    	non-compiled	[CE]  	190	None	replace
1646	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild().getType()  ==  Token.FUNCTION?  function.getLastChild().getNext()  :  function.getFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild().getType()  ==  Token.FUNCTION?  function.getLastChild().getNext()  :  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild().getType()  ==  Token.FUNCTION?  function.getLastChild().getNext()  :  function.getFirstChild();	  Node    lastArg    =    function.getLastChild().getNext();    	non-compiled	[CE]  	190	None	replace
1647	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild().getType()  ==  Token.FUNCTION?  function.getLastChild().getNext()  :  null;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild().getType()  ==  Token.FUNCTION?  function.getLastChild().getNext()  :  null;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild().getType()  ==  Token.FUNCTION?  function.getLastChild().getNext()  :  null;	  Node    lastArg    =    function.getLastChild().getNext();    	non-compiled	[CE]  	190	None	replace
1648	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function.getLastChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGet(function.getLastChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));    	non-compiled	[CE]  	221	None	replace
1649	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isName(function.getLastChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));    	non-compiled	[CE]  	221	None	replace
1650	[BUG]  [BUGGY]  Preconditions.checkState(function.getName()  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getName()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getName()  ==  null);	  Preconditions.checkState(parentScope.getParent()    ==    null);    	non-compiled	[CE]  	191	None	replace
1651	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getQualifiedName())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getQualifiedName())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	182	None	replace
1652	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getQualifiedName())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getQualifiedName())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getQualifiedName())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	182	None	replace
1653	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
1654	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNameNode()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNameNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
1655	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
1656	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
1657	[BUG]  [BUGGY]  if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
1658	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	202	None	replace
1659	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild(),  lastArg));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild(),  lastArg));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild(),  lastArg));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	202	None	replace
1660	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isCall(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	340	None	replace
1661	[BUG]  [BUGGY]  if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isCall(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	340	None	replace
1662	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  parentScope.getVar(function.getString())!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  parentScope.getVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  parentScope.getVar(function.getString())!=  null);	  Preconditions.checkState(parentScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	43	None	replace
1663	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getVar(function.getString(),  lastArg)!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getVar(function.getString(),  lastArg)!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getVar(function.getString(),  lastArg)!=  null);	  Preconditions.checkState(parentScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	43	None	replace
1664	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isVar(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	110	None	replace
1665	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isAssign(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	288	None	replace
1666	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isAssign(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	288	None	replace
1667	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function)&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isAssign(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	288	None	replace
1668	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isVar(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isVar(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isVar(function.getFirstChild()))  {	  if(NodeUtil.isVar(function.getFirstChild()))    {    	non-compiled	[CE]  	286	None	replace
1669	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isVar(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isVar(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isVar(function.getLastChild()))  {	  if(NodeUtil.isVar(function.getFirstChild()))    {    	non-compiled	[CE]  	286	None	replace
1670	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  lastArg);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  lastArg);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  lastArg);	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	96	None	replace
1671	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	96	None	replace
1672	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getVar(function.getString())!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getVar(function.getString())!=  null);	  Preconditions.checkState(function.getVar(function.getString())!=    null);    	non-compiled	[CE]  	45	None	replace
1673	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	9	None	replace
1674	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	9	None	replace
1675	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.hasChildren());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.hasChildren());	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	9	None	replace
1676	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	9	None	replace
1677	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild().getLastChild();	  Node    lastArg    =    fnScope.getLastChild().getString();    	non-compiled	[CE]  	245	None	replace
1678	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isAll());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isAll());	  Preconditions.checkState(fnScope.isConstructor());    	non-compiled	[CE]  	87	None	replace
1679	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString()  +  1));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isName(function.getString()  +  1));	  Preconditions.checkState(!NodeUtil.isName(function.getString()));    	non-compiled	[CE]  	153	None	replace
1680	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfThis(parent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentOfThis(parent);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentOfThis(parent);	  Node    parent    =    fnScope.getParentOfThis();    	non-compiled	[CE]  	331	None	replace
1681	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfThisNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentOfThisNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentOfThisNode();	  Node    parent    =    fnScope.getParentOfThis();    	non-compiled	[CE]  	331	None	replace
1682	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfThis(lastArg);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentOfThis(lastArg);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentOfThis(lastArg);	  Node    parent    =    fnScope.getParentOfThis();    	non-compiled	[CE]  	331	None	replace
1683	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isVar(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	291	None	replace
1684	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfElementNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentOfElementNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentOfElementNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	332	None	replace
1685	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfElement();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentOfElement();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentOfElement();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	332	None	replace
1686	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	164	None	replace
1687	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getNameNode()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getNameNode()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getNameNode()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));    	non-compiled	[CE]  	125	None	replace
1688	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()),  fnScope);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));    	non-compiled	[CE]  	125	None	replace
1689	[BUG]  [BUGGY]  Preconditions.checkState(compiler.getRootNode()  ==  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(compiler.getRootNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(compiler.getRootNode()  ==  null);	  Preconditions.checkState(scope.getRootNode()    ==    null);    	non-compiled	[CE]  	270	None	replace
1690	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getRootNode()  ==  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getRootNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function!=  null  ||  function.getRootNode()  ==  null);	  Preconditions.checkState(scope.getRootNode()    ==    null);    	non-compiled	[CE]  	270	None	replace
1691	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getParent())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getParent())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getParent())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	233	None	replace
1692	[BUG]  [BUGGY]  Node  parent  =  function.getParentRootNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getParentRootNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getParentRootNode();	  Node    parent    =    fnScope.getParentRootNode();    	non-compiled	[CE]  	333	None	replace
1693	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentFunctionNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentFunctionNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentFunctionNode();	  Node    parent    =    fnScope.getParentRootNode();    	non-compiled	[CE]  	333	None	replace
1694	[BUG]  [BUGGY]  Preconditions.checkState(function.getLastChild()!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getLastChild()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getLastChild()!=  null);	  Preconditions.checkState(function.getNext()!=    null);    	non-compiled	[CE]  	273	None	replace
1695	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerNameNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getOwnerNameNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getOwnerNameNode();	  Node    parent    =    fnScope.getOwnerNode();    	non-compiled	[CE]  	341	None	replace
1696	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerNode(lastArg);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getOwnerNode(lastArg);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getOwnerNode(lastArg);	  Node    parent    =    fnScope.getOwnerNode();    	non-compiled	[CE]  	341	None	replace
1697	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	35	None	replace
1698	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	35	None	replace
1699	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString())  },  isPropertyAssign);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString())  },  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString())  },  isPropertyAssign);	  Preconditions.checkState(fnScope.getVar(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
1700	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  isPropertyAssign,  lastArg);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  isPropertyAssign,  lastArg);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString()),  isPropertyAssign,  lastArg);	  Preconditions.checkState(fnScope.getVar(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
1701	[BUG]  [BUGGY]  Preconditions.checkState(lastArg!=  null  &&  lastArg.getType()  ==  Token.NAME);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg!=  null  &&  lastArg.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg!=  null  &&  lastArg.getType()  ==  Token.NAME);	  Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	280	None	replace
1702	[BUG]  [BUGGY]  if(!NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(!NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(!NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getLastChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	107	None	replace
1703	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getNext()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getNext()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getNext()));	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	222	None	replace
1704	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  lastArg);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  lastArg);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  lastArg);	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	222	None	replace
1705	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function)||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function)||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function)||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isFunction(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	254	None	replace
1706	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isImmutableValue(function.getString()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isImmutableValue(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isImmutableValue(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	142	None	replace
1707	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isImmutableValue(function.getString()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isImmutableValue(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isImmutableValue(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	142	None	replace
1708	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isImmutableValue(function.getString()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isImmutableValue(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.isImmutableValue(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	142	None	replace
1709	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	342	None	replace
1710	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	198	None	replace
1711	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getPrevious())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getPrevious())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getPrevious())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	15	None	replace
1712	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetAndSetKey(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetAndSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetAndSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	15	None	replace
1713	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.canModifyCallers(function.getLocalPart()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.canModifyCallers(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.canModifyCallers(function.getLocalPart()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	66	None	replace
1714	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart())||  NodeUtil.isGetOrSetKey(function.get  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart())||  NodeUtil.isGetOrSetKey(function.get  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart())||  NodeUtil.isGetOrSetKey(function.get	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	66	None	replace
1715	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getType())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getType())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getType())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getType())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	180	None	replace
1716	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySide  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySide  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySide	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent())    	non-compiled	[CE]  	225	None	replace
1717	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideE  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideE  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideE	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent())    	non-compiled	[CE]  	225	None	replace
1718	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	33	None	replace
1719	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	33	None	replace
1720	[BUG]  [BUGGY]  if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	33	None	replace
1721	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isName(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	255	None	replace
1722	[BUG]  [BUGGY]  Preconditions.checkState(function.getVar(fnScope.getType())!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getVar(fnScope.getType())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getVar(fnScope.getType())!=  null);	  Preconditions.checkState(function.getVar(fnScope.getString())!=    null);    	non-compiled	[CE]  	48	None	replace
1723	[BUG]  [BUGGY]  Preconditions.checkState(function.getVar(fnScope.getName())  ==  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getVar(fnScope.getName())  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getVar(fnScope.getName())  ==  null);	  Preconditions.checkState(function.getVar(fnScope.getString())!=    null);    	non-compiled	[CE]  	48	None	replace
1724	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  lastArg!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  lastArg!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString()),  lastArg!=  null);	  Preconditions.checkState(fnScope.getVar(function.getString()),    scope!=    null);    	non-compiled	[CE]  	207	None	replace
1725	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  lastArg  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  lastArg  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString()),  lastArg  ==  null);	  Preconditions.checkState(fnScope.getVar(function.getString()),    scope!=    null);    	non-compiled	[CE]  	207	None	replace
1726	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()),  fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()),  fnScope);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	258	None	replace
1727	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	151	None	replace
1728	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasVar(function.getString())!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.hasVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.hasVar(function.getString())!=  null);	  Preconditions.checkState(fnScope.hasVar(function.getString())!=    null);    	non-compiled	[CE]  	306	None	replace
1729	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.hasVar(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.hasVar(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.hasVar(function.getString()));	  Preconditions.checkState(fnScope.hasVar(function.getString())!=    null);    	non-compiled	[CE]  	306	None	replace
1730	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	316	None	replace
1731	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isFunction()  &&  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	316	None	replace
1732	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnknown()  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isUnknown()  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isUnknown()  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	316	None	replace
1733	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()),  fnScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));    	non-compiled	[CE]  	204	None	replace
1734	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));    	non-compiled	[CE]  	204	None	replace
1735	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));    	non-compiled	[CE]  	204	None	replace
1736	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isCall(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	321	None	replace
1737	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	61	None	replace
1738	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	61	None	replace
1739	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	61	None	replace
1740	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	61	None	replace
1741	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	205	None	replace
1742	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	205	None	replace
1743	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getNext())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getNext())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getNext())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getNext())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	179	None	replace
1744	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getPrefix();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getPrefix();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild().getPrefix();	  Node    lastArg    =    fnScope.getLastChild().getNext();    	non-compiled	[CE]  	170	None	replace
1745	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isConstructor());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isConstructor());  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isConstructor());	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.isFunction());    	non-compiled	[CE]  	185	None	replace
1746	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isAssignment());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isAssignment());  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isAssignment());	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.isFunction());    	non-compiled	[CE]  	185	None	replace
1747	[BUG]  [BUGGY]  Node  parent  =  fnScope.getConstructorParent();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getConstructorParent();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getConstructorParent();	  Node    parent    =    fnScope.getConstructorNode();    	non-compiled	[CE]  	271	None	replace
1748	[BUG]  [BUGGY]  Preconditions.checkState(scope.getFunctionNode()  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getFunctionNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getFunctionNode()  ==  null);	  Preconditions.checkState(fnScope.getFunctionNode()    ==    null);    	non-compiled	[CE]  	119	None	replace
1749	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondaryS  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondaryS  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondaryS	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	241	None	replace
1750	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	241	None	replace
1751	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	241	None	replace
1752	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	42	None	replace
1753	[BUG]  [BUGGY]  Node  lastArg  =  function.replaceChild(node,  fnScope.getLastChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.replaceChild(node,  fnScope.getLastChild());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.replaceChild(node,  fnScope.getLastChild());	  Node    lastArg    =    function.removeFirstChild();    	non-compiled	[CE]  	188	None	replace
1754	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent())  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent())	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	192	None	replace
1755	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	192	None	replace
1756	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function)||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function)||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function)||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isFunction(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	290	None	replace
1757	[BUG]  [BUGGY]  Node  parent  =  function.getNextNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getNextNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getNextNode();	  Node    parent    =    function.getParentNode();    	non-compiled	[CE]  	111	None	replace
1758	[BUG]  [BUGGY]  if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getLastChild();  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getLastChild();  }  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getLastChild();  }	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	212	None	replace
1759	[BUG]  [BUGGY]  if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  function  =  function.getLastChild();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  function  =  function.getLastChild();  }  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  function  =  function.getLastChild();  }	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	212	None	replace
1760	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  function  =  function.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  function  =  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  function  =  function.getFirstChild();	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	212	None	replace
1761	[BUG]  [BUGGY]  if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getLastChild();  }  else  {  return;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getLastChild();  }  else  {  return;  }  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(lastArg!=  null)  {  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  lastArg  =  function.getLastChild();  }  else  {  return;  }	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	212	None	replace
1762	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.isUnreferenced());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.isUnreferenced());	  Preconditions.checkState(fnScope.isUnreferenced());    	non-compiled	[CE]  	88	None	replace
1763	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isUnreferenced());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.isUnreferenced());	  Preconditions.checkState(fnScope.isUnreferenced());    	non-compiled	[CE]  	88	None	replace
1764	[BUG]  [BUGGY]  Node  parent  =  fnScope.getNameNode(lastArg);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getNameNode(lastArg);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getNameNode(lastArg);	  Node    parent    =    fnScope.getNameNode();    	non-compiled	[CE]  	81	None	replace
1765	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSideEffects(function.getParent()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSideEffects(function.getParent()));	  Preconditions.checkState(!NodeUtil.isFunction(function.getParent()));    	non-compiled	[CE]  	308	None	replace
1766	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getFirstChild()  :  fnScope.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getFirstChild()  :  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  fnScope.getFirstChild()  :  fnScope.getLastChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getFirstChild();    	non-compiled	[CE]  	297	None	replace
1767	[BUG]  [BUGGY]  Node  lastArg  =  function.isFunction()?  fnScope.getLastChild()  :  function.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.isFunction()?  fnScope.getLastChild()  :  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.isFunction()?  fnScope.getLastChild()  :  function.getFirstChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getFirstChild();    	non-compiled	[CE]  	297	None	replace
1768	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  lastArg!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  lastArg!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  lastArg!=  null);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    lastArg);    	non-compiled	[CE]  	272	None	replace
1769	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  lastArg  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  lastArg  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  lastArg  ==  null);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    lastArg);    	non-compiled	[CE]  	272	None	replace
1770	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    lastArg);    	non-compiled	[CE]  	272	None	replace
1771	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isExpressionNode(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isExpressionNode(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.isExpressionNode(function.getString()))  {	  if(NodeUtil.isFunction(function.getString()))    {    	non-compiled	[CE]  	335	None	replace
1772	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isFunction(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isFunction(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.isFunction(function.getString()))  {	  if(NodeUtil.isFunction(function.getString()))    {    	non-compiled	[CE]  	335	None	replace
1773	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isVar(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isVar(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.isVar(function.getString()))  {	  if(NodeUtil.isFunction(function.getString()))    {    	non-compiled	[CE]  	335	None	replace
1774	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isAssignmentOp(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isAssignmentOp(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.isAssignmentOp(function.getString()))  {	  if(NodeUtil.isFunction(function.getString()))    {    	non-compiled	[CE]  	335	None	replace
1775	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetAndSetKey(function.getLastChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetAndSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetAndSetKey(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	36	None	replace
1776	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isForIn(function.getLastChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isForIn(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isForIn(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	36	None	replace
1777	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isFunction(function.getLastChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isFunction(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isFunction(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	36	None	replace
1778	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  lastArg  ==  null)  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  lastArg  ==  null)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  lastArg  ==  null)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	36	None	replace
1779	[BUG]  [BUGGY]  if(NodeUtil.isAssign(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssign(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssign(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isVar(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	287	None	replace
1780	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isVar(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	287	None	replace
1781	[BUG]  [BUGGY]  if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function)||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isVar(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	287	None	replace
1782	[BUG]  [BUGGY]  Node  lastArg  =  function.replaceFirstChild(fnScope.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.replaceFirstChild(fnScope.getLastChild());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.replaceFirstChild(fnScope.getLastChild());	  Node    lastArg    =    fnScope.removeFirstChild();    	non-compiled	[CE]  	172	None	replace
1783	[BUG]  [BUGGY]  Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  false);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  false);	  Node    lastArg    =    fnScope.removeFirstChild();    	non-compiled	[CE]  	172	None	replace
1784	[BUG]  [BUGGY]  Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  this);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  this);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  this);	  Node    lastArg    =    fnScope.removeFirstChild();    	non-compiled	[CE]  	172	None	replace
1785	[BUG]  [BUGGY]  Node  lastArg  =  function!=  null?  function.getLastChild()  :  function.cloneTree();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function!=  null?  function.getLastChild()  :  function.cloneTree();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function!=  null?  function.getLastChild()  :  function.cloneTree();	  Node    lastArg    =    function.cloneTree();    	non-compiled	[CE]  	275	None	replace
1786	[BUG]  [BUGGY]  Node  lastArg  =  function!=  null?  function.cloneTree()  :  null;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function!=  null?  function.cloneTree()  :  null;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function!=  null?  function.cloneTree()  :  null;	  Node    lastArg    =    function.cloneTree();    	non-compiled	[CE]  	275	None	replace
1787	[BUG]  [BUGGY]  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  function.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);	  Node    lastArg    =    function.getFirstChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	128	None	replace
1788	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString())||  lastArg  ==  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString())||  lastArg  ==  null)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString())||  lastArg  ==  null)  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	70	None	replace
1789	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString())||  lastArg!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString())||  lastArg!=  null)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString())||  lastArg!=  null)  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	70	None	replace
1790	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	103	None	replace
1791	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	97	None	replace
1792	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	97	None	replace
1793	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetAndSetKey(function.getString()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetAndSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetAndSetKey(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()    +    1));    	non-compiled	[CE]  	92	None	replace
1794	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	146	None	replace
1795	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  function.hasChildren());	  Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	279	None	replace
1796	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	279	None	replace
1797	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg!=  null);	  Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	279	None	replace
1798	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  isPropertyAssign);	  Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	279	None	replace
1799	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	91	None	replace
1800	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isUnreferenced()  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	91	None	replace
1801	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isUnreferenced()  &&  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	91	None	replace
1802	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	91	None	replace
1803	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	91	None	replace
1804	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSideEffects(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSideEffects(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString()    +    1))    {    	non-compiled	[CE]  	138	None	replace
1805	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentLastChild();	  Node    parent    =    fnScope.getParentFirstChild();    	non-compiled	[CE]  	334	None	replace
1806	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getType()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getType()))    {    	non-compiled	[CE]  	231	None	replace
1807	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType())||  lastArg  ==  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType())||  lastArg  ==  null)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getType())||  lastArg  ==  null)  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getType()))    {    	non-compiled	[CE]  	231	None	replace
1808	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	60	None	replace
1809	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	60	None	replace
1810	[BUG]  [BUGGY]  Node  lastArg  =  function.getPreviousChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getPreviousChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getPreviousChild();	  Node    lastArg    =    function.getLastChild()    +    1;    	non-compiled	[CE]  	189	None	replace
1811	[BUG]  [BUGGY]  Node  lastArg  =  function.getfirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getfirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getfirstChild();	  Node    lastArg    =    function.getLastChild()    +    1;    	non-compiled	[CE]  	189	None	replace
1812	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChil  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChil  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChil	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	38	None	replace
1813	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	38	None	replace
1814	[BUG]  [BUGGY]  lastArg  =  fnScope.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  fnScope.getLastChild();	  lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	302	None	replace
1815	[BUG]  [BUGGY]  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  parentScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);	  lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	302	None	replace
1816	[BUG]  [BUGGY]  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);	  lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	302	None	replace
1817	[BUG]  [BUGGY]  lastArg  =  fnScope.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  fnScope.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  fnScope.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.NAME);	  lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	302	None	replace
1818	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	249	None	replace
1819	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	249	None	replace
1820	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	249	None	replace
1821	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.get  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.get  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.get	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	249	None	replace
1822	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGet(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isGet(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isGet(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	135	None	replace
1823	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	211	None	replace
1824	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getParent())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	4	None	replace
1825	[BUG]  [BUGGY]  preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	preconditions.checkState(function.getType()  ==  Token.FUNCTION);	  Node    lastArg    =    function.getLastChild();    preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	278	None	replace
1826	[BUG]  [BUGGY]  Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);	  Node    lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	6	None	replace
1827	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getName()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getName()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isFunction(function.getName()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	155	None	replace
1828	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getName()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getName()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getName()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	155	None	replace
1829	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	3	None	replace
1830	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	3	None	replace
1831	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	3	None	replace
1832	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	3	None	replace
1833	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getParent()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getParent()));	  Preconditions.checkState(!NodeUtil.isFunction(function.getParent()));    	non-compiled	[CE]  	308	None	replace
1834	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isVar(function.getParent()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isVar(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isVar(function.getParent()));	  Preconditions.checkState(!NodeUtil.isFunction(function.getParent()));    	non-compiled	[CE]  	308	None	replace
1835	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getParent()!=  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getParent()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getParent()!=  null);	  Preconditions.checkArgument(fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	329	None	replace
1836	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	28	None	replace
1837	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild().removeFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getLastChild().removeFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild().removeFirstChild();	  Node    lastArg    =    fnScope.getLastChild().getNext();    	non-compiled	[CE]  	170	None	replace
1838	[BUG]  [BUGGY]  Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);	  Node    lastArg    =    function.getLastChild();    Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	133	None	replace
1839	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.removeFirstChild()  :  fnScope.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  function.removeFirstChild()  :  fnScope.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  function.removeFirstChild()  :  fnScope.getLastChild();	  Node    lastArg    =    function.hasChildren()?    function.getLastChild()    :    fnScope.getLastChild();    	non-compiled	[CE]  	298	None	replace
1840	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getNext()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getNext()))  {	  if(NodeUtil.isExpressionNode(function.getString()))    {    	non-compiled	[CE]  	141	None	replace
1841	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isExpressionNode(function.getString()))    {    	non-compiled	[CE]  	141	None	replace
1842	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isExpressionNode(function.getType()  ==  Token.FUNCTION))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isExpressionNode(function.getType()  ==  Token.FUNCTION))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isExpressionNode(function.getType()  ==  Token.FUNCTION))  {	  if(NodeUtil.isExpressionNode(function.getString()))    {    	non-compiled	[CE]  	141	None	replace
1843	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getNameNode()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getNameNode()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getNameNode()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));    	non-compiled	[CE]  	125	None	replace
1844	[BUG]  [BUGGY]  Preconditions.checkState(function.getName()  ==  null  ||  function.getVar(function.getString())!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getName()  ==  null  ||  function.getVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getName()  ==  null  ||  function.getVar(function.getString())!=  null);	  Preconditions.checkState(function.getVar(function.getString())!=    null);    	non-compiled	[CE]  	45	None	replace
1845	[BUG]  [BUGGY]  Preconditions.checkState(function.getName()  ==  null  ||  function.getString()!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getName()  ==  null  ||  function.getString()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getName()  ==  null  ||  function.getString()!=  null);	  Preconditions.checkState(function.getVar(function.getString())!=    null);    	non-compiled	[CE]  	45	None	replace
1846	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isVar(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isVar(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isVar(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	267	None	replace
1847	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isName(function.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isName(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.isName(function.getLastChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	267	None	replace
1848	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getFirstChil  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getFirstChil  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())||  NodeUtil.isGetOrSetKey(function.getFirstChil	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	18	None	replace
1849	[BUG]  [BUGGY]  Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);	  Node    lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	127	None	replace
1850	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())||!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())||!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
1851	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
1852	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())||!NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
1853	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
1854	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(!NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	37	None	replace
1855	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isName(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isName(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&  NodeUtil.isName(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	19	None	replace
1856	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getType())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getType())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	19	None	replace
1857	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isFunction(function.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isFunction(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.isFunction(function.getFirstChild()))  {	  if(NodeUtil.isVar(function.getString()))    {    	non-compiled	[CE]  	337	None	replace
1858	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isFunction(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isFunction(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isFunction(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));    	non-compiled	[CE]  	221	None	replace
1859	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isCall(function.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isCall(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isCall(function.getLastChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));    	non-compiled	[CE]  	221	None	replace
1860	[BUG]  [BUGGY]  Preconditions.checkState(scope.getVar(function.getName())!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.getVar(function.getName())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.getVar(function.getName())!=  null);	  Preconditions.checkState(scope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	47	None	replace
1861	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	238	None	replace
1862	[BUG]  [BUGGY]  Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.FUNCTION);	  Node    lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	134	None	replace
1863	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	62	None	replace
1864	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	62	None	replace
1865	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isFunction(function.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isFunction(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isFunction(function.getFirstChild()))  {	  if(NodeUtil.isFunction(function.getFirstChild()))    {    	non-compiled	[CE]  	285	None	replace
1866	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isFunction(function.getLastChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isFunction(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isFunction(function.getLastChild()))  {	  if(NodeUtil.isFunction(function.getFirstChild()))    {    	non-compiled	[CE]  	285	None	replace
1867	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isFunction(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isFunction(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isFunction(function.getString()));	  Preconditions.checkState(!NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	317	None	replace
1868	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	239	None	replace
1869	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	148	None	replace
1870	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	342	None	replace
1871	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	342	None	replace
1872	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	342	None	replace
1873	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isFunctionDeclaration());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isFunctionDeclaration());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isFunctionDeclaration());	  Preconditions.checkState(fnScope.isConstructor());    	non-compiled	[CE]  	87	None	replace
1874	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isFunctionPrototype());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isFunctionPrototype());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isFunctionPrototype());	  Preconditions.checkState(fnScope.isConstructor());    	non-compiled	[CE]  	87	None	replace
1875	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	240	None	replace
1876	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getName()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getName()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	240	None	replace
1877	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getMember()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getMember()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getMember()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	240	None	replace
1878	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefined());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isDefined());	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	91	None	replace
1879	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getRootNode()  ==  function);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getRootNode()  ==  function);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getRootNode()  ==  function);	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	91	None	replace
1880	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isAll());	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	91	None	replace
1881	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.hasChildren());    	non-compiled	[CE]  	236	None	replace
1882	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.hasOneChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.hasOneChild());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.hasOneChild());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.hasChildren());    	non-compiled	[CE]  	236	None	replace
1883	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.isConstructor()  ||  fnScope.isFunction());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.isConstructor()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.isConstructor()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	89	None	replace
1884	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild	  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	247	None	replace
1885	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChil  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChil  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChil	  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	247	None	replace
1886	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext())||  NodeUtil.isGetOrSetKey(function.getFirstChild	  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	247	None	replace
1887	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.containsKey(function.getString())!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.containsKey(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.containsKey(function.getString())!=  null);	  Preconditions.checkState(!fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	50	None	replace
1888	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString())!=  null  &&  function.isFunction());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.getVar(function.getString())!=  null  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.getVar(function.getString())!=  null  &&  function.isFunction());	  Preconditions.checkState(!fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	50	None	replace
1889	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFunction()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFunction()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFunction()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFunction()));    	non-compiled	[CE]  	126	None	replace
1890	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getFunction()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getFunction()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getFunction()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFunction()));    	non-compiled	[CE]  	126	None	replace
1891	[BUG]  [BUGGY]  Preconditions.checkState(function.getFirstChild()!=  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getFirstChild()!=  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getFirstChild()!=  fnScope);	  Preconditions.checkState(fnScope.getLastChild()!=    function);    	non-compiled	[CE]  	173	None	replace
1892	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getParent()!=  function);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getParent()!=  function);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getParent()!=  function);	  Preconditions.checkState(fnScope.getLastChild()!=    function);    	non-compiled	[CE]  	173	None	replace
1893	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	108	None	replace
1894	[BUG]  [BUGGY]  if(NodeUtil.isGetProp(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetProp(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetProp(function.getFirstChild())&&  NodeUtil.isSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	108	None	replace
1895	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerFunction();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getOwnerFunction();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getOwnerFunction();	  Node    parent    =    fnScope.getNext();    	non-compiled	[CE]  	80	None	replace
1896	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	139	None	replace
1897	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getQualifiedName()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	139	None	replace
1898	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isName(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isName(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isName(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	246	None	replace
1899	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getNext())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	183	None	replace
1900	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getNext())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isName(function.getNext())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	183	None	replace
1901	[BUG]  [BUGGY]  if(NodeUtil.isFunctionAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunctionAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunctionAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	196	None	replace
1902	[BUG]  [BUGGY]  Node  lastArg  =  function.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getNext();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getNext();	  Node    lastArg    =    function.cloneTree();    	non-compiled	[CE]  	275	None	replace
1903	[BUG]  [BUGGY]  Node  lastArg  =  function.toString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.toString();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.toString();	  Node    lastArg    =    function.cloneTree();    	non-compiled	[CE]  	275	None	replace
1904	[BUG]  [BUGGY]  Node  lastArg  =  function.node();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.node();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.node();	  Node    lastArg    =    function.cloneTree();    	non-compiled	[CE]  	275	None	replace
1905	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getFirstChild())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {	  if(NodeUtil.isImmutableValue(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	74	None	replace
1906	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getQualifiedName())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	182	None	replace
1907	[BUG]  [BUGGY]  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	223	None	replace
1908	[BUG]  [BUGGY]  Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	223	None	replace
1909	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.GETPROP);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	223	None	replace
1910	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP,  lastArg);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP,  lastArg);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.GETPROP,  lastArg);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	223	None	replace
1911	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isName(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isName(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isName(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
1912	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getName()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isGetOrSetKey(function.getName()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	336	None	replace
1913	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	146	None	replace
1914	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	249	None	replace
1915	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getParentNode()  ==  function);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getParentNode()  ==  function);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getParentNode()  ==  function);	  Preconditions.checkState(fnScope.getParentNode()!=    null);    	non-compiled	[CE]  	186	None	replace
1916	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getRootNode()  ==  null);  Node  lastArg  =  function.getLastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getRootNode()  ==  null);  Node  lastArg  =  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getRootNode()  ==  null);  Node  lastArg  =  function.getLastChild();	  Node    lastArg    =    function.getFirstChild();    	non-compiled	[CE]  	167	None	replace
1917	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getRootNode()!=  null);  Node  lastArg  =  function.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getRootNode()!=  null);  Node  lastArg  =  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getRootNode()!=  null);  Node  lastArg  =  function.getLastChild();	  Node    lastArg    =    function.getFirstChild();    	non-compiled	[CE]  	167	None	replace
1918	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString())!=  null);  Node  lastArg  =  function.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString())!=  null);  Node  lastArg  =  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString())!=  null);  Node  lastArg  =  function.getLastChild();	  Node    lastArg    =    function.getFirstChild();    	non-compiled	[CE]  	167	None	replace
1919	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString())  ==  null);  Node  lastArg  =  function.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString())  ==  null);  Node  lastArg  =  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString())  ==  null);  Node  lastArg  =  function.getLastChild();	  Node    lastArg    =    function.getFirstChild();    	non-compiled	[CE]  	167	None	replace
1920	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getRootNode()  ==  null);  Node  lastArg  =  function.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getRootNode()  ==  null);  Node  lastArg  =  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getRootNode()  ==  null);  Node  lastArg  =  function.getFirstChild();	  Node    lastArg    =    function.getFirstChild();    	non-compiled	[CE]  	167	None	replace
1921	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getType())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	180	None	replace
1922	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.CALL);	  Preconditions.checkState(function.getParent()    ==    null);    	non-compiled	[CE]  	159	None	replace
1923	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	284	None	replace
1924	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	284	None	replace
1925	[BUG]  [BUGGY]  Node  lastArg  =  function.replaceChild(node,  fnScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.replaceChild(node,  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.replaceChild(node,  fnScope);	  Node    lastArg    =    function.removeFirstChild();    	non-compiled	[CE]  	188	None	replace
1926	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isFunction(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isFunction(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isFunction(function.getFirstChild()))  {	  if(NodeUtil.isVar(function.getFirstChild()))    {    	non-compiled	[CE]  	286	None	replace
1927	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {	  if(NodeUtil.isVar(function.getFirstChild()))    {    	non-compiled	[CE]  	286	None	replace
1928	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isFunction(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isFunction(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getFirstChild())||  NodeUtil.isFunction(function.getFirstChild()))  {	  if(NodeUtil.isVar(function.getFirstChild()))    {    	non-compiled	[CE]  	286	None	replace
1929	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function.getFirstChild()))  {	  if(NodeUtil.isVar(function.getFirstChild()))    {    	non-compiled	[CE]  	286	None	replace
1930	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getParent()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()!=    null);    	non-compiled	[CE]  	149	None	replace
1931	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	202	None	replace
1932	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	202	None	replace
1933	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope);	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	220	None	replace
1934	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()  +  1));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()  +  1));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()  +  1));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	220	None	replace
1935	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	233	None	replace
1936	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()));	  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	150	None	replace
1937	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isFunction(function.getString()))    {    	non-compiled	[CE]  	335	None	replace
1938	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isFunction(function.getString()))    {    	non-compiled	[CE]  	335	None	replace
1939	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isName(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isName(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.isName(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	243	None	replace
1940	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isName(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isName(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isName(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	243	None	replace
1941	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getString())||  NodeUtil.isName(function.getString()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getString())||  NodeUtil.isName(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getString())||  NodeUtil.isName(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	243	None	replace
1942	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isName(function.getString()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isName(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.isName(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	243	None	replace
1943	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.hasOneChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.hasOneChild());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.hasOneChild());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	234	None	replace
1944	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	211	None	replace
1945	[BUG]  [BUGGY]  Preconditions.checkArgument(lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(lastArg.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	212	None	replace
1946	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  lastArg  =  function.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  lastArg  =  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  lastArg  =  function.getLastChild();	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	212	None	replace
1947	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  value  =  function.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  value  =  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  Node  value  =  function.getFirstChild();	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	212	None	replace
1948	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  &&!fnScope.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope!=  null  &&!fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope!=  null  &&!fnScope.isFunction());	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	86	None	replace
1949	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isFunctionDeclaration());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.isFunctionDeclaration());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.isFunctionDeclaration());	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	86	None	replace
1950	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isDefined());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!fnScope.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!fnScope.isDefined());	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	86	None	replace
1951	[BUG]  [BUGGY]  Preconditions.checkState(function.getLastChild()  ==  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getLastChild()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getLastChild()  ==  null);	  Preconditions.checkState(function.getRootNode()    ==    null);    	non-compiled	[CE]  	115	None	replace
1952	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getNext()))    {    	non-compiled	[CE]  	218	None	replace
1953	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getNext()))    {    	non-compiled	[CE]  	218	None	replace
1954	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()))  {	  if(NodeUtil.isFunction(function.getString())||    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	254	None	replace
1955	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isExpression());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isExpression());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	235	None	replace
1956	[BUG]  [BUGGY]  preconditions.checkState(function.getType()  ==  Token.NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  preconditions.checkState(function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	preconditions.checkState(function.getType()  ==  Token.NAME);	  Node    lastArg    =    function.getLastChild();    preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	303	None	replace
1957	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.isFunction()  ||  fnScope.isAll());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.isFunction()  ||  fnScope.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.isFunction()  ||  fnScope.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	315	None	replace
1958	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  fnScope.isAll());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isAll()  ||  fnScope.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isAll()  ||  fnScope.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	315	None	replace
1959	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isVarArgs());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isVarArgs());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	315	None	replace
1960	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isVar(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isVar(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isVar(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isSetKey(function.getParent()))    {    	non-compiled	[CE]  	27	None	replace
1961	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME,  fnScope.getRootNode());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME,  fnScope.getRootNode());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME,  fnScope.getRootNode());	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	9	None	replace
1962	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getChildCount()  ==  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getChildCount()  ==  1);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getChildCount()  ==  1);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	9	None	replace
1963	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getChildCount()  ==  2);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getChildCount()  ==  2);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getChildCount()  ==  2);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	9	None	replace
1964	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getString()),  fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getString()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isFunction(function.getString()),  fnScope);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	258	None	replace
1965	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString()),  fnScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isName(function.getString()),  fnScope);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	258	None	replace
1966	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	58	None	replace
1967	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  parent  =  function.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  parent  =  function.getParent();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  parent  =  function.getParent();	  Preconditions.checkState(function.getType()    ==    Token.GETPROP);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	213	None	replace
1968	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  value  =  function.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  value  =  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.GETPROP);  Node  value  =  function.getFirstChild();	  Preconditions.checkState(function.getType()    ==    Token.GETPROP);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	213	None	replace
1969	[BUG]  [BUGGY]  Node  lastArg  =  function.hasNext()?  fnScope.getLastChild()  :  function.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasNext()?  fnScope.getLastChild()  :  function.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasNext()?  fnScope.getLastChild()  :  function.getFirstChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getFirstChild();    	non-compiled	[CE]  	297	None	replace
1970	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isFunction(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isFunction(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isFunction(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
1971	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isAssignmentOp(function.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isAssignmentOp(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&  NodeUtil.isAssignmentOp(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	14	None	replace
1972	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	42	None	replace
1973	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),    lastArg));    	non-compiled	[CE]  	42	None	replace
1974	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	21	None	replace
1975	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString())  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString())	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	21	None	replace
1976	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString())  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString())	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	21	None	replace
1977	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString())||  function.hasChildren())  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString())||  function.hasChildren())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getString())||  function.hasChildren())  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	21	None	replace
1978	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isFunction(function.getString()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isFunction(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isFunction(function.getString()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	21	None	replace
1979	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	2	None	replace
1980	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	248	None	replace
1981	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNext())||    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	248	None	replace
1982	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	210	None	replace
1983	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getOwnerFunction()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getOwnerFunction()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getOwnerFunction()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	210	None	replace
1984	[BUG]  [BUGGY]  Node  parent  =  function.getParentOfScope();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.getParentOfScope();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.getParentOfScope();	  Node    parent    =    function.getParentNode();    	non-compiled	[CE]  	111	None	replace
1985	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	241	None	replace
1986	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	241	None	replace
1987	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getString()))    {    	non-compiled	[CE]  	241	None	replace
1988	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	102	None	replace
1989	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	102	None	replace
1990	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getQualifiedName())&&  NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getQualifiedName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	102	None	replace
1991	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	145	None	replace
1992	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isInitializingFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isInitializingFunction());  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isInitializingFunction());	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.isFunction());    	non-compiled	[CE]  	185	None	replace
1993	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isActual());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isActual());  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isActual());	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.isFunction());    	non-compiled	[CE]  	185	None	replace
1994	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isAssignmentOp());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isAssignmentOp());  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentNode();  Preconditions.checkState(parent.isAssignmentOp());	  Node    parent    =    fnScope.getParentNode();    Preconditions.checkState(parent.isFunction());    	non-compiled	[CE]  	185	None	replace
1995	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getCurrentNode()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getCurrentNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getCurrentNode()!=  null);	  Preconditions.checkState(fnScope.getNext()!=    null);    	non-compiled	[CE]  	160	None	replace
1996	[BUG]  [BUGGY]  Node  lastArg  =  function.removeFirstChild().getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.removeFirstChild().getNext();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.removeFirstChild().getNext();	  Node    lastArg    =    function.getLastChild().getNext();    	non-compiled	[CE]  	190	None	replace
1997	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild().removeFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild().removeFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild().removeFirstChild();	  Node    lastArg    =    function.getLastChild().getNext();    	non-compiled	[CE]  	190	None	replace
1998	[BUG]  [BUGGY]  Node  lastArg  =  function.getlastChild().getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getlastChild().getNext();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getlastChild().getNext();	  Node    lastArg    =    function.getLastChild().getNext();    	non-compiled	[CE]  	190	None	replace
1999	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.hasChildren())  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getFirstChild())||    function.hasChildren())    {    	non-compiled	[CE]  	343	None	replace
2000	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	60	None	replace
2001	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()))    {    	non-compiled	[CE]  	60	None	replace
2002	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isName(function.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isName(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isName(function.getString()));	  Preconditions.checkState(!NodeUtil.isName(function.getString()));    	non-compiled	[CE]  	153	None	replace
2003	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.isName(function.getString())||    NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent())    	non-compiled	[CE]  	225	None	replace
2004	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getNext()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getNext()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getNext()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext()));    	non-compiled	[CE]  	122	None	replace
2005	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext()),  fnScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext()),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext()));    	non-compiled	[CE]  	122	None	replace
2006	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChil  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChil  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChil	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	16	None	replace
2007	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChil  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChil  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChil	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	16	None	replace
2008	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	16	None	replace
2009	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChil  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChil  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChil	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	16	None	replace
2010	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	16	None	replace
2011	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||!NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||!NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||!NodeUtil.isGetOrSetKey(function.getString()))  {	  if(!NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	137	None	replace
2012	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&!NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&!NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&!NodeUtil.isGetOrSetKey(function.getString()))  {	  if(!NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	137	None	replace
2013	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||!NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||!NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||!NodeUtil.isGetOrSetKey(function.getString()))  {	  if(!NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	137	None	replace
2014	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getNode()  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getNode()  ==  null);	  Preconditions.checkState(fnScope.getNode()    ==    null);    	non-compiled	[CE]  	120	None	replace
2015	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getNode()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getNode()!=  null);	  Preconditions.checkState(fnScope.getNode()    ==    null);    	non-compiled	[CE]  	120	None	replace
2016	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunctionDeclaration(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunctionDeclaration(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	61	None	replace
2017	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	61	None	replace
2018	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunctionDeclaration(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunctionDeclaration(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	61	None	replace
2019	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstArg()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstArg()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstArg()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastArg()));    	non-compiled	[CE]  	123	None	replace
2020	[BUG]  [BUGGY]  Preconditions.checkArgument(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(lastArg.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(lastArg.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	214	None	replace
2021	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME);  NodeUtil.removeChild(function.getFirstChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME);  NodeUtil.removeChild(function.getFirstChild());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME);  NodeUtil.removeChild(function.getFirstChild());	  Preconditions.checkState(function.getType()    ==    Token.NAME);    Node    lastArg    =    function.getLastChild();    	non-compiled	[CE]  	214	None	replace
2022	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChild	  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	15	None	replace
2023	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChil  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChil  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&  NodeUtil.isGetOrSetKey(function.getFirstChil	  if(NodeUtil.mayHaveSecondarySideEffects(function.getNext())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	15	None	replace
2024	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  fnScope.isDefined());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  fnScope.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isUnreferenced()  ||  fnScope.isDefined());	  Preconditions.checkState(fnScope.isUnreferenced());    	non-compiled	[CE]  	88	None	replace
2025	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isFunction(function.getQualifiedName()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.isFunction(function.getQualifiedName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.isFunction(function.getQualifiedName()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getQualifiedName()))    {    	non-compiled	[CE]  	67	None	replace
2026	[BUG]  [BUGGY]  Node  lastArg  =  function.getPreviousSibling()  +  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getPreviousSibling()  +  1;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getPreviousSibling()  +  1;	  Node    lastArg    =    function.getLastChild()    +    1;    	non-compiled	[CE]  	189	None	replace
2027	[BUG]  [BUGGY]  Node  lastArg  =  function.isFunction()?  fnScope.getLastChild()  :  function.getLastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.isFunction()?  fnScope.getLastChild()  :  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.isFunction()?  fnScope.getLastChild()  :  function.getLastChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getLastChild();    	non-compiled	[CE]  	295	None	replace
2028	[BUG]  [BUGGY]  Node  lastArg  =  function.hasNext()?  fnScope.getLastChild()  :  function.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasNext()?  fnScope.getLastChild()  :  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasNext()?  fnScope.getLastChild()  :  function.getLastChild();	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function.getLastChild();    	non-compiled	[CE]  	295	None	replace
2029	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunctionDeclaration(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunctionDeclaration(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	59	None	replace
2030	[BUG]  [BUGGY]  if(NodeUtil.isFunctionAssign(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunctionAssign(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunctionAssign(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	59	None	replace
2031	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	59	None	replace
2032	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isAssignmentOp(function)&&  NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	59	None	replace
2033	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)||  isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
2034	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.mayHaveSecondarySideEffects(function))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.mayHaveSecondarySideEffects(function))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  NodeUtil.mayHaveSecondarySideEffects(function))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
2035	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)&&  isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)&&  isPropertyAssign  &&  NodeUtil.mayHaveSecondarySideEffects(function))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
2036	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondaryS  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondaryS  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondarySideEffects(function)||  NodeUtil.mayHaveSecondaryS	  if(NodeUtil.mayHaveSecondarySideEffects(function))    {    	non-compiled	[CE]  	289	None	replace
2037	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(fnScope.isFunction());    	non-compiled	[CE]  	314	None	replace
2038	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.isFunctionDeclaration());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.isFunctionDeclaration());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.isFunctionDeclaration());	  Preconditions.checkArgument(fnScope.isFunction());    	non-compiled	[CE]  	314	None	replace
2039	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isSetKey(function.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	17	None	replace
2040	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getLastChild  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getLastChild  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  NodeUtil.isGetOrSetKey(function.getLastChild	  if(NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	17	None	replace
2041	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(function.getString())||  NodeUtil.isVar(function.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isLiteralValue(function.getString())||  NodeUtil.isVar(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isLiteralValue(function.getString())||  NodeUtil.isVar(function.getString()))  {	  if(NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	140	None	replace
2042	[BUG]  [BUGGY]  if(NodeUtil.isFunctionObjectCall(function.getString()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunctionObjectCall(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunctionObjectCall(function.getString()))  {	  if(NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	140	None	replace
2043	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isVar(function.getString()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isVar(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isImmutableValue(function.getString())||  NodeUtil.isVar(function.getString()))  {	  if(NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	140	None	replace
2044	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isFunction(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	256	None	replace
2045	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getType()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getType()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));    	non-compiled	[CE]  	204	None	replace
2046	[BUG]  [BUGGY]  if(NodeUtil.isExprAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExprAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExprAssign(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getParent()))  {	  if(NodeUtil.isExpressionNode(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	320	None	replace
2047	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isExpressionNode(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));    	non-compiled	[CE]  	300	None	replace
2048	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isFunction(function.getNext()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isFunction(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isFunction(function.getNext()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&    NodeUtil.isGetOrSetKey(function.getNext()))    {    	non-compiled	[CE]  	293	None	replace
2049	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSideEffects(function.getParent()))    {    	non-compiled	[CE]  	230	None	replace
2050	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	268	None	replace
2051	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function)&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function)&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	268	None	replace
2052	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.CALL);  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.CALL);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.CALL);	  Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	279	None	replace
2053	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	279	None	replace
2054	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.BLOCK);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.BLOCK);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.BLOCK);	  Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	279	None	replace
2055	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.NAME);	  Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	279	None	replace
2056	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.GETPROP);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.GETPROP);	  Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	279	None	replace
2057	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  var));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  var));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  var));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    lastArg));    	non-compiled	[CE]  	98	None	replace
2058	[BUG]  [BUGGY]  Node  parent  =  nameNode.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  nameNode.getParent();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  nameNode.getParent();	  Node    parent    =    scope.getParent();    	non-compiled	[CE]  	82	None	replace
2059	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	147	None	replace
2060	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionParent();  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionParent();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getOwnerFunctionParent();	  Node    parent    =    fnScope.getParentOperator();    	non-compiled	[CE]  	262	None	replace
2061	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOwnerNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  fnScope.getParentOwnerNode();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  fnScope.getParentOwnerNode();	  Node    parent    =    fnScope.getParentRootNode();    	non-compiled	[CE]  	333	None	replace
2062	[BUG]  [BUGGY]  Node  lastArg  =  function  >>  null?  null  :  function.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function  >>  null?  null  :  function.getLastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function  >>  null?  null  :  function.getLastChild();	  Node    lastArg    =    function    ==    null?    null    :    function.getLastChild();    	non-compiled	[CE]  	187	None	replace
2063	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  mayHaveSecondarySideEffects  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  mayHaveSecondarySideEffects  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent())&&  mayHaveSecondarySideEffects	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	69	None	replace
2064	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	32	None	replace
2065	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	325	None	replace
2066	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  isPropertyAssign,  preserveFunctionExpressionNames);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getVar(function.getString()),  isPropertyAssign,  preserveFunctionExpressionNames);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getVar(function.getString()),  isPropertyAssign,  preserveFunctionExpressionNames);	  Preconditions.checkState(fnScope.getVar(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
2067	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getName()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getName()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	97	None	replace
2068	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getName()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getName()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	97	None	replace
2069	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString())||  function.isFunction())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString())||  function.isFunction())  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getString())||  function.isFunction())  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	70	None	replace
2070	[BUG]  [BUGGY]  if(NodeUtil.isFunctionAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunctionAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunctionAssign(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()))    {    	non-compiled	[CE]  	311	None	replace
2071	[BUG]  [BUGGY]  Node  parent  =  function.removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  parent  =  function.removeFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  parent  =  function.removeFirstChild();	  Node    parent    =    function.getParent();    	non-compiled	[CE]  	77	None	replace
2072	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()))  {	  if(NodeUtil.isPropertyAssign(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()))    {    	non-compiled	[CE]  	136	None	replace
2073	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	228	None	replace
2074	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	66	None	replace
2075	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLocalPart()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getLocalPart()))    {    	non-compiled	[CE]  	66	None	replace
2076	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getNameNode()!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getNameNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getNameNode()!=  null);	  Preconditions.checkState(fnScope.getNameNode()!=    null);    	non-compiled	[CE]  	158	None	replace
2077	[BUG]  [BUGGY]  Preconditions.checkState(lastArg!=  null  &&  lastArg.getType()  ==  Token.VAR);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg!=  null  &&  lastArg.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg!=  null  &&  lastArg.getType()  ==  Token.VAR);	  Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	280	None	replace
2078	[BUG]  [BUGGY]  Preconditions.checkState(lastArg!=  null  &&  lastArg.getType()  ==  Token.BLOCK);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg!=  null  &&  lastArg.getType()  ==  Token.BLOCK);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg!=  null  &&  lastArg.getType()  ==  Token.BLOCK);	  Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	280	None	replace
2079	[BUG]  [BUGGY]  Preconditions.checkState(lastArg!=  null  &&  function.isFunction());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(lastArg!=  null  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(lastArg!=  null  &&  function.isFunction());	  Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	280	None	replace
2080	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isFunction(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isFunction(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isFunction(function.getString()));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	96	None	replace
2081	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getString())&&  NodeUtil.isExpressionNode(function.getFirstChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.isExpressionNode(function.getFirstChild()))    {    	non-compiled	[CE]  	338	None	replace
2082	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getShortName()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getShortName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.isGetOrSetKey(function.getShortName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getShortName()))    {    	non-compiled	[CE]  	104	None	replace
2083	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getShortName()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getShortName()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getString())||  NodeUtil.isGetOrSetKey(function.getShortName()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getShortName()))    {    	non-compiled	[CE]  	104	None	replace
2084	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	198	None	replace
2085	[BUG]  [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGet(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	198	None	replace
2086	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	198	None	replace
2087	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  lastArg  ==  null)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  lastArg  ==  null)  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getLastChild())||  lastArg  ==  null)  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	34	None	replace
2088	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getRootNode()  ==  null);  Node  lastArg  =  function.getlastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getRootNode()  ==  null);  Node  lastArg  =  function.getlastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getRootNode()  ==  null);  Node  lastArg  =  function.getlastChild();	  Node    lastArg    =    function.getlastChild();    	non-compiled	[CE]  	276	None	replace
2089	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getRootNode()!=  null);  Node  lastArg  =  function.getlastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getRootNode()!=  null);  Node  lastArg  =  function.getlastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getRootNode()!=  null);  Node  lastArg  =  function.getlastChild();	  Node    lastArg    =    function.getlastChild();    	non-compiled	[CE]  	276	None	replace
2090	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getParent()  ==  null);  Node  lastArg  =  function.getlastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getParent()  ==  null);  Node  lastArg  =  function.getlastChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getParent()  ==  null);  Node  lastArg  =  function.getlastChild();	  Node    lastArg    =    function.getlastChild();    	non-compiled	[CE]  	276	None	replace
2091	[BUG]  [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isFunction(function.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isName(function.getString())||  NodeUtil.isFunction(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isName(function.getString())||  NodeUtil.isFunction(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getString()))    {    	non-compiled	[CE]  	242	None	replace
2092	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.CALL);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.CALL);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.CALL);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	143	None	replace
2093	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	143	None	replace
2094	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.BLOCK);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.BLOCK);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.BLOCK);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	143	None	replace
2095	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||  function.isUnreferenced());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isDefined()  ||  function.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	250	None	replace
2096	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isUnreferenced());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isAll()  ||  function.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	250	None	replace
2097	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getLastArg()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getLastArg()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.isFunction(function.getLastArg()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastArg()));    	non-compiled	[CE]  	31	None	replace
2098	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.hasVar(function.getString())!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.hasVar(function.getString())!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.hasVar(function.getString())!=  null);	  Preconditions.checkState(fnScope.hasVar(function.getString())!=    null);    	non-compiled	[CE]  	306	None	replace
2099	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.hasVar(function.getString())  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.hasVar(function.getString())  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.hasVar(function.getString())  ==  null);	  Preconditions.checkState(fnScope.hasVar(function.getString())!=    null);    	non-compiled	[CE]  	306	None	replace
2100	[BUG]  [BUGGY]  Preconditions.checkState(scope.hasVar(function.getString())  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(scope.hasVar(function.getString())  ==  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(scope.hasVar(function.getString())  ==  null);	  Preconditions.checkState(fnScope.hasVar(function.getString())!=    null);    	non-compiled	[CE]  	306	None	replace
2101	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getVar(function.getString()),  function.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getVar(function.getString()),  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getVar(function.getString()),  function.isFunction());	  Preconditions.checkArgument(fnScope.getVar(function.getString())!=    null);    	non-compiled	[CE]  	305	None	replace
2102	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	209	None	replace
2103	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getOwnerFunction()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getOwnerFunction()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getOwnerFunction()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	209	None	replace
2104	[BUG]  [BUGGY]  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg!=  null);	  lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg!=    null);    	non-compiled	[CE]  	281	None	replace
2105	[BUG]  [BUGGY]  if(NodeUtil.isFunctionAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunctionAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunctionAssign(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isPropertyAssign(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	199	None	replace
2106	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.getLastChild());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.getLastChild());	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    lastArg);    	non-compiled	[CE]  	272	None	replace
2107	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isExpressionNode(function.getLastChild()))    {    	non-compiled	[CE]  	200	None	replace
2108	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isExpressionNode(function.getLastChild()))    {    	non-compiled	[CE]  	200	None	replace
2109	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isFunction(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isExpressionNode(function.getLastChild()))    {    	non-compiled	[CE]  	200	None	replace
2110	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.isExpressionNode(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.isExpressionNode(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isExpressionNode(function.getLastChild()))    {    	non-compiled	[CE]  	200	None	replace
2111	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {	  if(NodeUtil.isCall(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	328	None	replace
2112	[BUG]  [BUGGY]  Node  lastArg  =  function.lastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.lastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.lastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);	  Node    lastArg    =    parentScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	132	None	replace
2113	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isFunction(function.getFirstChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isFunction(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isFunction(function.getFirstChild()));	  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	299	None	replace
2114	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isVar(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isVar(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(!NodeUtil.isVar(function.getFirstChild()));	  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	299	None	replace
2115	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  fnScope.isUnreferenced());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  fnScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  fnScope.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isUnreferenced());    	non-compiled	[CE]  	90	None	replace
2116	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.isFunction()  ||  fnScope.isUnreferenced());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.isFunction()  ||  fnScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.isFunction()  ||  fnScope.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isUnreferenced());    	non-compiled	[CE]  	90	None	replace
2117	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  2);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  2);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  2);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	129	None	replace
2118	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getFirstChild()!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getFirstChild()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getFirstChild()!=  null);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	129	None	replace
2119	[BUG]  [BUGGY]  Node  lastArg  =  function.hasNext()?  fnScope.getLastChild()  :  function;  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasNext()?  fnScope.getLastChild()  :  function;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasNext()?  fnScope.getLastChild()  :  function;	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function;    	non-compiled	[CE]  	296	None	replace
2120	[BUG]  [BUGGY]  Node  lastArg  =  function.removeFirstChild()?  fnScope.getLastChild()  :  function;  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.removeFirstChild()?  fnScope.getLastChild()  :  function;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.removeFirstChild()?  fnScope.getLastChild()  :  function;	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function;    	non-compiled	[CE]  	296	None	replace
2121	[BUG]  [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getFirstChild()  :  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasChildren()?  fnScope.getFirstChild()  :  null;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasChildren()?  fnScope.getFirstChild()  :  null;	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function;    	non-compiled	[CE]  	296	None	replace
2122	[BUG]  [BUGGY]  Node  lastArg  =  function.hasOneChild()?  fnScope.getLastChild()  :  function;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.hasOneChild()?  fnScope.getLastChild()  :  function;  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.hasOneChild()?  fnScope.getLastChild()  :  function;	  Node    lastArg    =    function.hasChildren()?    fnScope.getLastChild()    :    function;    	non-compiled	[CE]  	296	None	replace
2123	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()),  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	95	None	replace
2124	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getNext()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.mayHaveSecondarySideEffects(function.getNext()))    {    	non-compiled	[CE]  	64	None	replace
2125	[BUG]  [BUGGY]  Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()!=  Token.NAME);	  Node    lastArg    =    function.getLastChild();    Preconditions.checkState(lastArg.getType()!=    Token.NAME);    	non-compiled	[CE]  	13	None	replace
2126	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getQualifiedName()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getQualifiedName()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getQualifiedName()));	  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()));    	non-compiled	[CE]  	282	None	replace
2127	[BUG]  [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isVar(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	266	None	replace
2128	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()))    {    	non-compiled	[CE]  	266	None	replace
2129	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isExpressionNode(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	264	None	replace
2130	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.isName(function.getFirstChild())&&    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	264	None	replace
2131	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSideEffects(function.getParent()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())&&    NodeUtil.isGetOrSetKey(function.getParent()))    {    	non-compiled	[CE]  	164	None	replace
2132	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	316	None	replace
2133	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFunctionType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getFunctionType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(fnScope.getFunctionType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	316	None	replace
2134	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChil  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChil  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChil	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	38	None	replace
2135	[BUG]  [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())&&  NodeUtil.isGetOrSetKey(function.getFirstChild	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	38	None	replace
2136	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function)||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||  NodeUtil.isGetOrSetKey(function.getFirstChild()))  {	  if(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild())||    NodeUtil.isGetOrSetKey(function.getFirstChild()))    {    	non-compiled	[CE]  	38	None	replace
2137	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);	  Preconditions.checkArgument(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	324	None	replace
2138	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()).isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()).isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()).isFunction());	  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	39	None	replace
2139	[BUG]  [BUGGY]  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	lastArg  =  fnScope.getLastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.VAR);    	non-compiled	[CE]  	224	None	replace
2140	[BUG]  [BUGGY]  Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.removeFirstChild();  Preconditions.checkState(lastArg.getType()  ==  Token.VAR);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.VAR);    	non-compiled	[CE]  	224	None	replace
2141	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.VAR);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.VAR);    	non-compiled	[CE]  	224	None	replace
2142	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.VAR);  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  fnScope.getLastChild();  preconditions.checkState(lastArg.getType()  ==  Token.VAR);	  Node    lastArg    =    fnScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.VAR);    	non-compiled	[CE]  	224	None	replace
2143	[BUG]  [BUGGY]  Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  new  Node(Token.FUNCTION));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  new  Node(Token.FUNCTION));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  new  Node(Token.FUNCTION));	  Node    lastArg    =    fnScope.removeFirstChild();    	non-compiled	[CE]  	172	None	replace
2144	[BUG]  [BUGGY]  Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  new  Node(Token.EMPTY));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  new  Node(Token.EMPTY));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  new  Node(Token.EMPTY));	  Node    lastArg    =    fnScope.removeFirstChild();    	non-compiled	[CE]  	172	None	replace
2145	[BUG]  [BUGGY]  Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  new  Node(Token.NAME));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  new  Node(Token.NAME));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.replaceChild(fnScope.getLastChild(),  new  Node(Token.NAME));	  Node    lastArg    =    fnScope.removeFirstChild();    	non-compiled	[CE]  	172	None	replace
2146	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isImmutableValue(function.getString()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getString())||  NodeUtil.isImmutableValue(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getString())||  NodeUtil.isImmutableValue(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	142	None	replace
2147	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isImmutableValue(function.getString()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isImmutableValue(function.getString()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.isImmutableValue(function.getString()))  {	  if(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isImmutableValue(function.getString()))    {    	non-compiled	[CE]  	142	None	replace
2148	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
2149	[BUG]  [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isFunction(function.getFirstChild())&&  NodeUtil.isGetOrSetKey(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
2150	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getNameNode()))  {	  if(NodeUtil.isGetOrSetKey(function.getFirstChild())||    NodeUtil.isGetOrSetKey(function.getNameNode()))    {    	non-compiled	[CE]  	197	None	replace
2151	[BUG]  [BUGGY]  Node  lastArg  =  function.lastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Node  lastArg  =  function.lastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Node  lastArg  =  function.lastChild();  Preconditions.checkState(lastArg.getType()  ==  Token.NAME);	  Node    lastArg    =    parentScope.getLastChild();    Preconditions.checkState(lastArg.getType()    ==    Token.NAME);    	non-compiled	[CE]  	11	None	replace
2152	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetValue(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetValue(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetValue(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	222	None	replace
2153	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getChildCount()  ==  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getChildCount()  ==  1);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getChildCount()  ==  1);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	274	None	replace
2154	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR,  fnScope.getRootNode());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR,  fnScope.getRootNode());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR,  fnScope.getRootNode());	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	274	None	replace
2155	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.BLOCK);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.BLOCK);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.BLOCK);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	274	None	replace
2156	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  2);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  2);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  2);	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	326	None	replace
2157	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getFirstChild()!=  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getFirstChild()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getFirstChild()!=  null);	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	326	None	replace
2158	[BUG]  [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]            Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());      [BUGGY]  if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {  [BUGGY]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	if(NodeUtil.isCall(function.getString())&&  NodeUtil.isGetOrSetKey(function.getLastChild()))  {	  if(NodeUtil.isName(function.getString())&&    NodeUtil.isGetOrSetKey(function.getLastChild()))    {    	non-compiled	[CE]  	162	None	replace
