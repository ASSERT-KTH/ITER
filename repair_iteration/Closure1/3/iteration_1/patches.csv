bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  compiler.report(JSError.make(var,  lastArg.getMessage()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(var,  lastArg.getMessage()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(var,  lastArg.getMessage()));	  compiler.report(JSError.make(lastArg,    var.getMessage()));    	non-compiled	[CE]  	13	None	replace
2	[BUG]  [BUGGY]  compiler.report(JSError.make(var,  var.getMessage()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(var,  var.getMessage()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(var,  var.getMessage()));	  compiler.report(JSError.make(lastArg,    var.getMessage()));    	non-compiled	[CE]  	13	None	replace
3	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getMessage(),  nameNode));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getMessage(),  nameNode));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getMessage(),  nameNode));	  compiler.report(JSError.make(lastArg,    var.getMessage()));    	non-compiled	[CE]  	13	None	replace
4	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getMessage(),  fnScope));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getMessage(),  fnScope));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getMessage(),  fnScope));	  compiler.report(JSError.make(lastArg,    var.getMessage()));    	non-compiled	[CE]  	13	None	replace
5	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getLineno()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getLineno()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getLineno()));	  compiler.report(JSError.make(lastArg,    var.getMessage()));    	non-compiled	[CE]  	13	None	replace
6	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getMessage(),  referenced));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getMessage(),  referenced));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getMessage(),  referenced));	  compiler.report(JSError.make(lastArg,    var.getMessage()));    	non-compiled	[CE]  	13	None	replace
7	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getMessage(),  lastArg));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getMessage(),  lastArg));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getMessage(),  lastArg));	  compiler.report(JSError.make(lastArg,    var.getMessage()));    	non-compiled	[CE]  	13	None	replace
8	[BUG]  [BUGGY]  parentScope.removeChild(var);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  parentScope.removeChild(var);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	parentScope.removeChild(var);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	3	None	replace
9	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  Context.reportCodeChange();  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	Context.reportCodeChange();	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	3	None	replace
10	[BUG]  [BUGGY]  AllFunctionScopes.remove(var);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  AllFunctionScopes.remove(var);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	AllFunctionScopes.remove(var);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	3	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  Preconditions.checkState(!referenced.contains(var));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	Preconditions.checkState(!referenced.contains(var));	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	3	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	3	None	replace
13	[BUG]  [BUGGY]  parentScope.removeChild(lastArg);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  parentScope.removeChild(lastArg);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	parentScope.removeChild(lastArg);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	3	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	3	None	replace
15	[BUG]  [BUGGY]  if(referenced!=  null)  {  if(!referenced.contains(var))  {  compiler.reportCodeChange();  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced!=  null)  {  if(!referenced.contains(var))  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced!=  null)  {  if(!referenced.contains(var))  {  compiler.reportCodeChange();  }	  if(!referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	2	None	replace
16	[BUG]  [BUGGY]  if(referenced!=  null  ||!referenced.contains(var))  {  compiler.reportCodeChange();  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced!=  null  ||!referenced.contains(var))  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced!=  null  ||!referenced.contains(var))  {  compiler.reportCodeChange();  }	  if(!referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	2	None	replace
17	[BUG]  [BUGGY]  if(!referenced.contains(var)&&  isPropertyAssign)  {  compiler.reportCodeChange();  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(!referenced.contains(var)&&  isPropertyAssign)  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(!referenced.contains(var)&&  isPropertyAssign)  {  compiler.reportCodeChange();  }	  if(!referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	2	None	replace
18	[BUG]  [BUGGY]  if(!referenced.contains(var)&&!referenced.contains(var))  {  compiler.reportCodeChange();  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(!referenced.contains(var)&&!referenced.contains(var))  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(!referenced.contains(var)&&!referenced.contains(var))  {  compiler.reportCodeChange();  }	  if(!referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	2	None	replace
19	[BUG]  [BUGGY]  referenced.removeChild(var);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  referenced.removeChild(var);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	referenced.removeChild(var);	  if(!referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	2	None	replace
20	[BUG]  [BUGGY]  if(!referenced.contains(var)||!referenced.contains(var))  {  compiler.reportCodeChange();  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(!referenced.contains(var)||!referenced.contains(var))  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(!referenced.contains(var)||!referenced.contains(var))  {  compiler.reportCodeChange();  }	  if(!referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	2	None	replace
21	[BUG]  [BUGGY]  compiler.report(JSError.make(var,  lastArg.toString()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(var,  lastArg.toString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(var,  lastArg.toString()));	  compiler.report(JSError.make(lastArg,    var.toString()));    	non-compiled	[CE]  	16	None	replace
22	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getQualifiedName()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getQualifiedName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getQualifiedName()));	  compiler.report(JSError.make(lastArg,    var.toString()));    	non-compiled	[CE]  	16	None	replace
23	[BUG]  [BUGGY]  compiler.report(JSError.make(var,  var.toString()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(var,  var.toString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(var,  var.toString()));	  compiler.report(JSError.make(lastArg,    var.toString()));    	non-compiled	[CE]  	16	None	replace
24	[BUG]  [BUGGY]  if(referenced.contains(var))  {  argList.removeChild(var);  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var))  {  argList.removeChild(var);  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var))  {  argList.removeChild(var);  }	      	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  a  =  argList.getFirstChild();  a.hasNext();)  {  Node  lastArg  =  a.next();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var))  {  for(Node  a  =  argList.getFirstChild();  a.hasNext();)  {  Node  lastArg  =  a.next();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var))  {  for(Node  a  =  argList.getFirstChild();  a.hasNext();)  {  Node  lastArg  =  a.next();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }	      	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  a  =  argList.getFirstChild();  a.hasNext();)  {  Node  lastArg  =  a.next();  if(!referenced.contains(var))  {  break;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var))  {  for(Node  a  =  argList.getFirstChild();  a.hasNext();)  {  Node  lastArg  =  a.next();  if(!referenced.contains(var))  {  break;  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var))  {  for(Node  a  =  argList.getFirstChild();  a.hasNext();)  {  Node  lastArg  =  a.next();  if(!referenced.contains(var))  {  break;  }	      	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  break;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  break;  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  break;  }	      	non-compiled	[CE]  	6	None	replace
28	[BUG]  [BUGGY]  fnScope.removeChild(var);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  fnScope.removeChild(var);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	fnScope.removeChild(var);	      	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	      	non-compiled	[CE]  	6	None	replace
30	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  a  =  argList.getFirstChild();  a.hasNext();)  {  Node  lastArg  =  a.next();  if(lastArg.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var))  {  for(Node  a  =  argList.getFirstChild();  a.hasNext();)  {  Node  lastArg  =  a.next();  if(lastArg.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var))  {  for(Node  a  =  argList.getFirstChild();  a.hasNext();)  {  Node  lastArg  =  a.next();  if(lastArg.getType()!=  Token.FUNCTION)  {  break;  }	      	non-compiled	[CE]  	6	None	replace
31	[BUG]  [BUGGY]  if(referenced.contains(var)||  isPropertyAssign)  {  compiler.reportCodeChange();  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var)||  isPropertyAssign)  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var)||  isPropertyAssign)  {  compiler.reportCodeChange();  }	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	1	None	replace
32	[BUG]  [BUGGY]  if(referenced.contains(var)||!referenced.contains(var))  {  compiler.reportCodeChange();  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var)||!referenced.contains(var))  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var)||!referenced.contains(var))  {  compiler.reportCodeChange();  }	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	1	None	replace
33	[BUG]  [BUGGY]  if(referenced.contains(var)||  referenced.contains(var))  {  compiler.reportCodeChange();  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var)||  referenced.contains(var))  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var)||  referenced.contains(var))  {  compiler.reportCodeChange();  }	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	1	None	replace
34	[BUG]  [BUGGY]  if(referenced.contains(var)&&!referenced.contains(var))  {  compiler.reportCodeChange();  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var)&&!referenced.contains(var))  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var)&&!referenced.contains(var))  {  compiler.reportCodeChange();  }	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	1	None	replace
35	[BUG]  [BUGGY]  if(!referenced.contains(var))  {  compiler.reportCodeChange();  }  else  {  break;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(!referenced.contains(var))  {  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(!referenced.contains(var))  {  compiler.reportCodeChange();  }  else  {  break;  }	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    {    break;    }    	non-compiled	[CE]  	5	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  compiler.reportCodeChange();  }  else  {  break;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  compiler.reportCodeChange();  }  else  {  break;  }	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    {    break;    }    	non-compiled	[CE]  	5	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  compiler.reportCodeChange();  }  else  {  break;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  compiler.reportCodeChange();  }  else  {  break;  }	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    {    break;    }    	non-compiled	[CE]  	5	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  compiler.reportCodeChange();  }  else  {  break;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  compiler.reportCodeChange();  }  else  {  break;  }	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    {    break;    }    	non-compiled	[CE]  	5	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  compiler.reportCodeChange();  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  compiler.reportCodeChange();  }	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    {    break;    }    	non-compiled	[CE]  	5	None	replace
40	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  var,  lastArg.toString()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  var,  lastArg.toString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  var,  lastArg.toString()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.toString()));    	non-compiled	[CE]  	15	None	replace
41	[BUG]  [BUGGY]  compiler.report(JSError.make(var,  lastArg,  fnScope.toString()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(var,  lastArg,  fnScope.toString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(var,  lastArg,  fnScope.toString()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.toString()));    	non-compiled	[CE]  	15	None	replace
42	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.toString()  + ") ");  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.toString()  + ") ");  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  lastArg,  var.toString()  + ") ");	  compiler.report(JSError.make(fnScope,    lastArg,    var.toString()));    	non-compiled	[CE]  	15	None	replace
43	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var,  fnScope.toString()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var,  fnScope.toString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var,  fnScope.toString()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.toString()));    	non-compiled	[CE]  	15	None	replace
44	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.toString(),  referenced));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.toString(),  referenced));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  lastArg,  var.toString(),  referenced));	  compiler.report(JSError.make(fnScope,    lastArg,    var.toString()));    	non-compiled	[CE]  	15	None	replace
45	[BUG]  [BUGGY]  compiler.report(JSError.make(scope,  lastArg,  var.toString()));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(scope,  lastArg,  var.toString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(scope,  lastArg,  var.toString()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.toString()));    	non-compiled	[CE]  	15	None	replace
46	[BUG]  [BUGGY]  compiler.report(JSError.make(var,  var.getLocalName()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(var,  var.getLocalName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(var,  var.getLocalName()));	  compiler.report(JSError.make(lastArg,    var.getLocalName()));    	non-compiled	[CE]  	10	None	replace
47	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getLocalName()  +  1));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getLocalName()  +  1));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getLocalName()  +  1));	  compiler.report(JSError.make(lastArg,    var.getLocalName()));    	non-compiled	[CE]  	10	None	replace
48	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getLocalName()),  codingConvention);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getLocalName()),  codingConvention);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getLocalName()),  codingConvention);	  compiler.report(JSError.make(lastArg,    var.getLocalName()));    	non-compiled	[CE]  	10	None	replace
49	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getLocalName()  + ") ");  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getLocalName()  + ") ");  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getLocalName()  + ") ");	  compiler.report(JSError.make(lastArg,    var.getLocalName()));    	non-compiled	[CE]  	10	None	replace
50	[BUG]  [BUGGY]  compiler.report(JSError.make(var,  lastArg.getLocalName()));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(var,  lastArg.getLocalName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(var,  lastArg.getLocalName()));	  compiler.report(JSError.make(lastArg,    var.getLocalName()));    	non-compiled	[CE]  	10	None	replace
51	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  referenced));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  referenced));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  var,  lastArg,  referenced));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
52	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  lastArg,  var.getType()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  lastArg,  var.getType()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  lastArg,  var.getType()));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
53	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  lastArg,  var.getLineno()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  lastArg,  var.getLineno()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  lastArg,  var.getLineno()));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
54	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  lastArg,  var));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  lastArg,  var));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  lastArg,  var));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  lastArg,  var.getQualifiedName()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  lastArg,  var.getQualifiedName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  lastArg,  var.getQualifiedName()));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
56	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  nameNode));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  nameNode));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  var,  lastArg,  nameNode));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
57	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  lastArg,  var.getModule()));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  lastArg,  var.getModule()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  lastArg,  var.getModule()));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  compiler.report(JSError.make(var,  lastArg.getName()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(var,  lastArg.getName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(var,  lastArg.getName()));	  compiler.report(JSError.make(lastArg,    var.getName()));    	non-compiled	[CE]  	9	None	replace
59	[BUG]  [BUGGY]  compiler.report(JSError.make(var,  var.getName()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(var,  var.getName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(var,  var.getName()));	  compiler.report(JSError.make(lastArg,    var.getName()));    	non-compiled	[CE]  	9	None	replace
60	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getName(),  codingConvention));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getName(),  codingConvention));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getName(),  codingConvention));	  compiler.report(JSError.make(lastArg,    var.getName()));    	non-compiled	[CE]  	9	None	replace
61	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  var,  lastArg.getString()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  var,  lastArg.getString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  var,  lastArg.getString()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getString()));    	non-compiled	[CE]  	11	None	replace
62	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.getLineno()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.getLineno()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  lastArg,  var.getLineno()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getString()));    	non-compiled	[CE]  	11	None	replace
63	[BUG]  [BUGGY]  compiler.report(JSError.make(var,  lastArg,  fnScope.getString()));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(var,  lastArg,  fnScope.getString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(var,  lastArg,  fnScope.getString()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getString()));    	non-compiled	[CE]  	11	None	replace
64	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.getQualifiedName()));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.getQualifiedName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  lastArg,  var.getQualifiedName()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getString()));    	non-compiled	[CE]  	11	None	replace
65	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.getString(),  referenced));  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.getString(),  referenced));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  lastArg,  var.getString(),  referenced));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getString()));    	non-compiled	[CE]  	11	None	replace
66	[BUG]  [BUGGY]  compiler.report(JSError.make(scope,  lastArg,  var.getString()));  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(scope,  lastArg,  var.getString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(scope,  lastArg,  var.getString()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getString()));    	non-compiled	[CE]  	11	None	replace
67	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getLocation()  +  1));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getLocation()  +  1));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getLocation()  +  1));	  compiler.report(JSError.make(lastArg,    var.getLocation()));    	non-compiled	[CE]  	14	None	replace
68	[BUG]  [BUGGY]  compiler.report(JSError.make(var,  var.getLocation()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(var,  var.getLocation()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(var,  var.getLocation()));	  compiler.report(JSError.make(lastArg,    var.getLocation()));    	non-compiled	[CE]  	14	None	replace
69	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getLocation(),  nameNode));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getLocation(),  nameNode));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getLocation(),  nameNode));	  compiler.report(JSError.make(lastArg,    var.getLocation()));    	non-compiled	[CE]  	14	None	replace
70	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getLocation(),  referenced));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getLocation(),  referenced));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getLocation(),  referenced));	  compiler.report(JSError.make(lastArg,    var.getLocation()));    	non-compiled	[CE]  	14	None	replace
71	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  var,  lastArg.getType()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  var,  lastArg.getType()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  var,  lastArg.getType()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getType()));    	non-compiled	[CE]  	12	None	replace
72	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.getType(),  referenced));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.getType(),  referenced));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  lastArg,  var.getType(),  referenced));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getType()));    	non-compiled	[CE]  	12	None	replace
73	[BUG]  [BUGGY]  compiler.report(JSError.make(scope,  lastArg,  var.getType()));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(scope,  lastArg,  var.getType()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(scope,  lastArg,  var.getType()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getType()));    	non-compiled	[CE]  	12	None	replace
74	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  var,  lastArg.getName()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  var,  lastArg.getName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  var,  lastArg.getName()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getName()));    	non-compiled	[CE]  	7	None	replace
75	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.getName(),  referenced));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.getName(),  referenced));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  lastArg,  var.getName(),  referenced));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getName()));    	non-compiled	[CE]  	7	None	replace
76	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.getLocalName()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  lastArg,  var.getLocalName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  lastArg,  var.getLocalName()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getName()));    	non-compiled	[CE]  	7	None	replace
77	[BUG]  [BUGGY]  compiler.report(JSError.make(scope,  lastArg,  var.getName()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(scope,  lastArg,  var.getName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(scope,  lastArg,  var.getName()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getName()));    	non-compiled	[CE]  	7	None	replace
78	[BUG]  [BUGGY]  compiler.report(JSError.make(var,  lastArg,  fnScope.getType()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(var,  lastArg,  fnScope.getType()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(var,  lastArg,  fnScope.getType()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getType()));    	non-compiled	[CE]  	12	None	replace
79	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getString()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getString()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getString()));    	non-compiled	[CE]  	11	None	replace
80	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  codingConvention));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  codingConvention));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  var,  lastArg,  codingConvention));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
81	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  var.getType()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  var.getType()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  var,  lastArg,  var.getType()));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
82	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  argList.size()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  argList.size()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  var,  lastArg,  argList.size()));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
83	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  var,  0));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  var,  0));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  var,  0));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
84	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.toString(),  nameNode));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.toString(),  nameNode));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.toString(),  nameNode));	  compiler.report(JSError.make(lastArg,    var.toString()));    	non-compiled	[CE]  	16	None	replace
85	[BUG]  [BUGGY]  if(referenced.contains(var)||  codingConvention.canModifyCallers(var))  {  compiler.reportCodeChange();  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var)||  codingConvention.canModifyCallers(var))  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var)||  codingConvention.canModifyCallers(var))  {  compiler.reportCodeChange();  }	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	1	None	replace
86	[BUG]  [BUGGY]  if(referenced.contains(var)||  codingConvention!=  null)  {  compiler.reportCodeChange();  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var)||  codingConvention!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var)||  codingConvention!=  null)  {  compiler.reportCodeChange();  }	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	1	None	replace
87	[BUG]  [BUGGY]  referenced.remove(var);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  referenced.remove(var);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	referenced.remove(var);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	1	None	replace
88	[BUG]  [BUGGY]  compiler.report(JSError.make(var,  lastArg,  fnScope.getName()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(var,  lastArg,  fnScope.getName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(var,  lastArg,  fnScope.getName()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getName()));    	non-compiled	[CE]  	7	None	replace
89	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  var.getName()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  var.getName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  var.getName()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getName()));    	non-compiled	[CE]  	7	None	replace
90	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  a  =  argList.getFirstChild();  a!=  null;  a  =  a.next())  {  return;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var))  {  for(Node  a  =  argList.getFirstChild();  a!=  null;  a  =  a.next())  {  return;  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var))  {  for(Node  a  =  argList.getFirstChild();  a!=  null;  a  =  a.next())  {  return;  }	      	non-compiled	[CE]  	6	None	replace
91	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  continue;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  continue;  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  continue;  }	      	non-compiled	[CE]  	6	None	replace
92	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArgs(var);  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArgs(var);  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArgs(var);  }	      	non-compiled	[CE]  	6	None	replace
93	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChild();  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChild();	      	non-compiled	[CE]  	6	None	replace
94	[BUG]  [BUGGY]  compiler.report(JSError.make(var,  lastArg.getLocation()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(var,  lastArg.getLocation()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(var,  lastArg.getLocation()));	  compiler.report(JSError.make(lastArg,    var.getLocation()));    	non-compiled	[CE]  	14	None	replace
95	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getSourceName()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getSourceName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getSourceName()));	  compiler.report(JSError.make(lastArg,    var.getLocation()));    	non-compiled	[CE]  	14	None	replace
96	[BUG]  [BUGGY]  parent.replaceChild(lastArg,  var);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  parent.replaceChild(lastArg,  var);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	parent.replaceChild(lastArg,  var);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	3	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	Preconditions.checkState(var.getType()  ==  Token.NAME);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	3	None	replace
98	[BUG]  [BUGGY]  if(var!=  null)  {  if(!referenced.contains(var))  {  compiler.reportCodeChange();  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(var!=  null)  {  if(!referenced.contains(var))  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(var!=  null)  {  if(!referenced.contains(var))  {  compiler.reportCodeChange();  }	  if(!referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	2	None	replace
99	[BUG]  [BUGGY]  if(referenced!=  null)  {  compiler.reportCodeChange();  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced!=  null)  {  compiler.reportCodeChange();  }	  if(!referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	2	None	replace
100	[BUG]  [BUGGY]  Context.checkState(var.getType()  ==  Token.FUNCTION  ||!referenced.contains(var))  {  compiler.reportCodeChange();  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  Context.checkState(var.getType()  ==  Token.FUNCTION  ||!referenced.contains(var))  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	Context.checkState(var.getType()  ==  Token.FUNCTION  ||!referenced.contains(var))  {  compiler.reportCodeChange();  }	  if(!referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	2	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  Preconditions.checkState(referenced.contains(var));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	Preconditions.checkState(referenced.contains(var));	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    {    break;    }    	non-compiled	[CE]  	5	None	replace
102	[BUG]  [BUGGY]  Context.checkState(referenced.contains(var));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  Context.checkState(referenced.contains(var));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	Context.checkState(referenced.contains(var));	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    {    break;    }    	non-compiled	[CE]  	5	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(!referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	4	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(!referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	4	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.BLOCK);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.BLOCK);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.BLOCK);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(!referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	4	None	replace
106	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  nameNode,  var.toString()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  nameNode,  var.toString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  nameNode,  var.toString()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.toString()));    	non-compiled	[CE]  	15	None	replace
107	[BUG]  [BUGGY]  compiler.report(JSError.make(var,  lastArg.getString()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(var,  lastArg.getString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(var,  lastArg.getString()));	  compiler.report(JSError.make(lastArg,    var.getName()));    	non-compiled	[CE]  	9	None	replace
108	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getMessage(),  var.getMessage()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getMessage(),  var.getMessage()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getMessage(),  var.getMessage()));	  compiler.report(JSError.make(lastArg,    var.getMessage()));    	non-compiled	[CE]  	13	None	replace
109	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getMessage(),  ERROR_MESSAGE));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getMessage(),  ERROR_MESSAGE));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getMessage(),  ERROR_MESSAGE));	  compiler.report(JSError.make(lastArg,    var.getMessage()));    	non-compiled	[CE]  	13	None	replace
110	[BUG]  [BUGGY]  if(referenced.contains(var)&&  isPropertyAssign)  {  compiler.reportCodeChange();  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var)&&  isPropertyAssign)  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var)&&  isPropertyAssign)  {  compiler.reportCodeChange();  }	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	1	None	replace
111	[BUG]  [BUGGY]  if(referenced.contains(var)&&  isPropertyAssign)  {  compiler.report(JSError.make(fnScope,  var.getName()));  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var)&&  isPropertyAssign)  {  compiler.report(JSError.make(fnScope,  var.getName()));  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var)&&  isPropertyAssign)  {  compiler.report(JSError.make(fnScope,  var.getName()));  }	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	1	None	replace
112	[BUG]  [BUGGY]  lastArg  =  argList.getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  lastArg  =  argList.getLastChild();  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	lastArg  =  argList.getLastChild();	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	1	None	replace
113	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.next())  {  removeUnreferencedFunctionArgs(var);  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.next())  {  removeUnreferencedFunctionArgs(var);  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.next())  {  removeUnreferencedFunctionArgs(var);  }	      	non-compiled	[CE]  	6	None	replace
114	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArgs(var,  c);  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArgs(var,  c);  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArgs(var,  c);  }	      	non-compiled	[CE]  	6	None	replace
115	[BUG]  [BUGGY]  argList.removeChild(var);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  argList.removeChild(var);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	argList.removeChild(var);	      	non-compiled	[CE]  	6	None	replace
116	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  a  =  argList.getFirstChild();  a.hasNext();)  {  Node  body  =  a.next();  if(body!=  null)  {  break;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(referenced.contains(var))  {  for(Node  a  =  argList.getFirstChild();  a.hasNext();)  {  Node  body  =  a.next();  if(body!=  null)  {  break;  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(referenced.contains(var))  {  for(Node  a  =  argList.getFirstChild();  a.hasNext();)  {  Node  body  =  a.next();  if(body!=  null)  {  break;  }	      	non-compiled	[CE]  	6	None	replace
117	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.toString(),  fnScope));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.toString(),  fnScope));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.toString(),  fnScope));	  compiler.report(JSError.make(lastArg,    var.toString()));    	non-compiled	[CE]  	16	None	replace
118	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getFunctionName()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getFunctionName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getFunctionName()));	  compiler.report(JSError.make(lastArg,    var.toString()));    	non-compiled	[CE]  	16	None	replace
119	[BUG]  [BUGGY]  if(!referenced.contains(var)&&  argList.size()  >  0)  {  compiler.reportCodeChange();  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(!referenced.contains(var)&&  argList.size()  >  0)  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(!referenced.contains(var)&&  argList.size()  >  0)  {  compiler.reportCodeChange();  }	  if(!referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	2	None	replace
120	[BUG]  [BUGGY]  if(!referenced.contains(var)&&!referenced.isEmpty())  {  compiler.reportCodeChange();  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  if(!referenced.contains(var)&&!referenced.isEmpty())  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	if(!referenced.contains(var)&&!referenced.isEmpty())  {  compiler.reportCodeChange();  }	  if(!referenced.contains(var))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	2	None	replace
121	[BUG]  [BUGGY]  parent.replaceChild(lastArg,  argList);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  parent.replaceChild(lastArg,  argList);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	parent.replaceChild(lastArg,  argList);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(!referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	4	None	replace
122	[BUG]  [BUGGY]  parentScope.replaceChild(lastArg,  var);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  parentScope.replaceChild(lastArg,  var);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	parentScope.replaceChild(lastArg,  var);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(!referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	4	None	replace
123	[BUG]  [BUGGY]  parent.replaceChild(var,  lastArg);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  parent.replaceChild(var,  lastArg);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	parent.replaceChild(var,  lastArg);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(!referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	4	None	replace
124	[BUG]  [BUGGY]  parent.removeChild(var);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  parent.removeChild(var);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	parent.removeChild(var);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    if(!referenced.contains(var))    {    break;    }    	non-compiled	[CE]  	4	None	replace
125	[BUG]  [BUGGY]  compiler.report(JSError.make(lastArg,  var.getType()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(lastArg,  var.getType()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(lastArg,  var.getType()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getType()));    	non-compiled	[CE]  	12	None	replace
126	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  var.getName(),  var.getType()));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  var.getName(),  var.getType()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  var.getName(),  var.getType()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getType()));    	non-compiled	[CE]  	12	None	replace
127	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  var.getName(),  var.getString()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  var.getName(),  var.getString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  var.getName(),  var.getString()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getString()));    	non-compiled	[CE]  	11	None	replace
128	[BUG]  [BUGGY]  parentScope.removeChild(argList);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  parentScope.removeChild(argList);  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	parentScope.removeChild(argList);	  if(referenced.contains(var))    {    compiler.reportCodeChange();    }    else    {    break;    }    	non-compiled	[CE]  	5	None	replace
129	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  lastArg,  var.getName()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  lastArg,  var.getName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  lastArg,  var.getName()));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
130	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  var.toString()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  var.toString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  var,  lastArg,  var.toString()));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
131	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  var.getName()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  var.getName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  var,  lastArg,  var.getName()));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
132	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  var.getLocation()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  var.getLocation()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  var,  lastArg,  var.getLocation()));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
133	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  var.getModule()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(sourceName,  var,  lastArg,  var.getModule()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(sourceName,  var,  lastArg,  var.getModule()));	  compiler.report(JSError.make(sourceName,    var,    lastArg));    	non-compiled	[CE]  	8	None	replace
134	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  var.getName(),  var.getName()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  var.getName(),  var.getName()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  var.getName(),  var.getName()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getName()));    	non-compiled	[CE]  	7	None	replace
135	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  var.getName(),  var.getMessage()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  var.getName(),  var.getMessage()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  var.getName(),  var.getMessage()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.getName()));    	non-compiled	[CE]  	7	None	replace
136	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  var.toString(),  var.toString()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  var.toString(),  var.toString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  var.toString(),  var.toString()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.toString()));    	non-compiled	[CE]  	15	None	replace
137	[BUG]  [BUGGY]  compiler.report(JSError.make(fnScope,  var.getName(),  var.toString()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);    [BUGGY]  compiler.report(JSError.make(fnScope,  var.getName(),  var.toString()));  [BUGGY]    }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	compiler.report(JSError.make(fnScope,  var.getName(),  var.toString()));	  compiler.report(JSError.make(fnScope,    lastArg,    var.toString()));    	non-compiled	[CE]  	15	None	replace
