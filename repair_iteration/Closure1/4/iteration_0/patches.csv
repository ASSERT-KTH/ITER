bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]    AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(referenced.contains(var))  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	}  	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]      AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	}  	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [CE]  [FE]        AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }	}  	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next());  }  [CE]  [FE]          AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next());  }  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next());  }	}  	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]            AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	}  	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  c);  }  [CE]  [FE]              AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  c);  }  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  c);  }	}  	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [CE]  [FE]                AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }	}  	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]    [CE]  [FE]                  AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]    [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	  	}  	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  fnScope.removeChild(var);  [CE]  [FE]    AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  fnScope.removeChild(var);  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	fnScope.removeChild(var);	}  	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  if(referenced!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]      AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(referenced!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	}  	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]        AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	}  	non-compiled	[CE]  	7	None	replace
12	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChild();  [CE]  [FE]          AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChild();  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChild();	}  	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  if(referenced!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]            AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(referenced!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	}  	non-compiled	[CE]  	7	None	replace
14	[BUG]  [BUGGY]  fnScope.removeChild(var);  compiler.reportCodeChange();  [CE]  [FE]              AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  fnScope.removeChild(var);  compiler.reportCodeChange();  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	fnScope.removeChild(var);  compiler.reportCodeChange();	}  	non-compiled	[CE]  	7	None	replace
15	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [CE]  [FE]    AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }	}  	non-compiled	[CE]  	7	None	replace
16	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]      AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	}  	non-compiled	[CE]  	7	None	replace
17	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArgs(var);  }  [CE]  [FE]        AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArgs(var);  }  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArgs(var);  }	}  	non-compiled	[CE]  	7	None	replace
18	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [CE]  [FE]          AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }	}  	non-compiled	[CE]  	7	None	replace
19	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.removeChild(c);  }  [CE]  [FE]            AssertionFailedError  [CONTEXT]    Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.removeChild(c);  }  [BUGGY]  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.removeChild(c);  }	}  	non-compiled	[CE]  	7	None	replace
