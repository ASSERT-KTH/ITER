bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.re  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.re  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.re	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	5	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	5	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(!referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(!referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  Context.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange  [CE]  [FE]                            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Context.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Context.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	16	None	replace
9	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	16	None	replace
10	[BUG]  [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	16	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	16	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  throw  new  IllegalArgumentException( " ");  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	16	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  continue;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  continue;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  continue;  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	16	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  break;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  break;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  break;  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	16	None	replace
15	[BUG]  [BUGGY]  fnScope.removeChild(var,  referenced);  [CE]  [FE]        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  fnScope.removeChild(var,  referenced);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	fnScope.removeChild(var,  referenced);	  fnScope.removeChild(var);    	non-compiled	[CE]  	9	None	replace
16	[BUG]  [BUGGY]  fnScope.removeChild(lastArg);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  fnScope.removeChild(lastArg);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	fnScope.removeChild(lastArg);	  fnScope.removeChild(var);    	non-compiled	[CE]  	9	None	replace
17	[BUG]  [BUGGY]  fnScope.replaceChild(var,  referenced);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  fnScope.replaceChild(var,  referenced);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	fnScope.replaceChild(var,  referenced);	  fnScope.removeChild(var);    	non-compiled	[CE]  	9	None	replace
18	[BUG]  [BUGGY]  fnScope.removeChild(parent);  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  fnScope.removeChild(parent);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	fnScope.removeChild(parent);	  fnScope.removeChild(var);    	non-compiled	[CE]  	9	None	replace
19	[BUG]  [BUGGY]  fnScope.removeChild(argList.getFirstChild());  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  fnScope.removeChild(argList.getFirstChild());  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	fnScope.removeChild(argList.getFirstChild());	  fnScope.removeChild(var);    	non-compiled	[CE]  	9	None	replace
20	[BUG]  [BUGGY]  fnScope.removeChild(nameNode);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  fnScope.removeChild(nameNode);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	fnScope.removeChild(nameNode);	  fnScope.removeChild(var);    	non-compiled	[CE]  	9	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    c);    }    	non-compiled	[CE]  	6	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(f  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(f  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(f	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    c);    }    	non-compiled	[CE]  	6	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    c);    }    	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(!referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(!referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    c);    }    	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize  [CE]  [FE]                          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    c);    }    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  [CE]  [FE]                            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    c);    }    	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(  [CE]  [FE]                              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    c);    }    	non-compiled	[CE]  	6	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addChildToFront(c);    }    	non-compiled	[CE]  	18	None	replace
29	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addChildToFront(c);    }    	non-compiled	[CE]  	18	None	replace
30	[BUG]  [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addChildToFront(c);    }    	non-compiled	[CE]  	18	None	replace
31	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addChildToFront(c);    }    	non-compiled	[CE]  	18	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChild  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChild  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChild	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addChildToFront(c);    }    	non-compiled	[CE]  	18	None	replace
33	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  fnScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  fnScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(isPropertyAssign)  {  for(Node  c  =  fnScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addChildToFront(c);    }    	non-compiled	[CE]  	18	None	replace
34	[BUG]  [BUGGY]  For(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  For(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	For(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	13	None	replace
35	[BUG]  [BUGGY]  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	13	None	replace
36	[BUG]  [BUGGY]  Node  lastArg  =  argList.getLastChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Node  lastArg  =  argList.getLastChild();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Node  lastArg  =  argList.getLastChild();	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	13	None	replace
37	[BUG]  [BUGGY]  Node  lastArg  =  c.getLastChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Node  lastArg  =  c.getLastChild();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Node  lastArg  =  c.getLastChild();	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	13	None	replace
38	[BUG]  [BUGGY]  For(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  For(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	For(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	13	None	replace
39	[BUG]  [BUGGY]  For(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  continue;  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  For(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  continue;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	For(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  continue;  }	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	13	None	replace
40	[BUG]  [BUGGY]  For(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  break;  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  For(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  break;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	For(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  break;  }	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	13	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArgs  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArgs  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArgs	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    removeUnreferencedFunctionArgs(var);    }    	non-compiled	[CE]  	17	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferenced  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferenced  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferenced	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    removeUnreferencedFunctionArgs(var);    }    	non-compiled	[CE]  	17	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArg  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArg  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArg	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    removeUnreferencedFunctionArgs(var);    }    	non-compiled	[CE]  	17	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedF  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedF  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedF	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    removeUnreferencedFunctionArgs(var);    }    	non-compiled	[CE]  	17	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArgs  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArgs  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArgs	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    removeUnreferencedFunctionArgs(var);    }    	non-compiled	[CE]  	17	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArg  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArg  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunctionArg	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    removeUnreferencedFunctionArgs(var);    }    	non-compiled	[CE]  	17	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunction  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunction  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFunction	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    removeUnreferencedFunctionArgs(var);    }    	non-compiled	[CE]  	17	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next());  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    NodeUtil.removeChild(argList,    it.next());    }    	non-compiled	[CE]  	4	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.n  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.n  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.n	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    NodeUtil.removeChild(argList,    it.next());    }    	non-compiled	[CE]  	4	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    NodeUtil.removeChild(argList,    it.next());    }    	non-compiled	[CE]  	4	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChil  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChil  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChil	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    NodeUtil.removeChild(argList,    it.next());    }    	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    NodeUtil.removeChild(argList,    it.next());    }    	non-compiled	[CE]  	4	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)  ==  false);  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next());  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)  ==  false);  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)  ==  false);  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    NodeUtil.removeChild(argList,    it.next());    }    	non-compiled	[CE]  	4	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next()  [CE]  [FE]                          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next()  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next()	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    NodeUtil.removeChild(argList,    it.next());    }    	non-compiled	[CE]  	4	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkNotNull(it.next());    }    	non-compiled	[CE]  	3	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var));  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var));  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var));	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkNotNull(it.next());    }    	non-compiled	[CE]  	3	None	replace
57	[BUG]  [BUGGY]  For(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  For(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	For(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkNotNull(it.next());    }    	non-compiled	[CE]  	3	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkNotNull(it.next());    }    	non-compiled	[CE]  	3	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  preconditions.removeChild(it.next());  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  preconditions.removeChild(it.next());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  preconditions.removeChild(it.next());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkNotNull(it.next());    }    	non-compiled	[CE]  	3	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  argList.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  argList.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  argList.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkNotNull(it.next());    }    	non-compiled	[CE]  	3	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var));  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(!referenced.contains(var));  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(!referenced.contains(var));	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkNotNull(it.next());    }    	non-compiled	[CE]  	3	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  referenced  [CE]  [FE]          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  referenced  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  referenced	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	2	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	2	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  reference  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  reference  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize(fnScope,  reference	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	2	None	replace
65	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(referenced.contains(var))  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	      	non-compiled	[CE]  	8	None	replace
66	[BUG]  [BUGGY]  For(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  For(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	For(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkState(!it.hasNext());    }    	non-compiled	[CE]  	7	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkState(!it.hasNext());    }    	non-compiled	[CE]  	7	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkState(!it.hasNext());    }    	non-compiled	[CE]  	7	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(!referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(!referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkState(!it.hasNext());    }    	non-compiled	[CE]  	7	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.re  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.re  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.re	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    fnScope.removeChild(c);    }    	non-compiled	[CE]  	19	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.re  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.re  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.re	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    fnScope.removeChild(c);    }    	non-compiled	[CE]  	19	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.remov  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.remov  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.remov	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    fnScope.removeChild(c);    }    	non-compiled	[CE]  	19	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.remov  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.remov  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.remov	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    fnScope.removeChild(c);    }    	non-compiled	[CE]  	19	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    fnScope.removeChild(c);    }    	non-compiled	[CE]  	19	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.re  [CE]  [FE]                          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.re  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.re	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    fnScope.removeChild(c);    }    	non-compiled	[CE]  	19	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.removeChild  [CE]  [FE]                            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(!referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.removeChild  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(!referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.removeChild	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    fnScope.removeChild(c);    }    	non-compiled	[CE]  	19	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	11	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	11	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	11	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	11	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(!referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(!referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	11	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	11	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  if(referenced.contains(var))    {    if(isPropertyAssign)    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	1	None	replace
84	[BUG]  [BUGGY]  luateWithVar(var,  referenced))  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  luateWithVar(var,  referenced))  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	luateWithVar(var,  referenced))  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  if(referenced.contains(var))    {    if(isPropertyAssign)    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	1	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);	  if(referenced.contains(var))    {    if(isPropertyAssign)    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	1	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var)||  isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(!referenced.contains(var)||  isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(!referenced.contains(var)||  isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  if(referenced.contains(var))    {    if(isPropertyAssign)    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	1	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  if(referenced.contains(var))    {    if(isPropertyAssign)    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	1	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var)||  isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(!referenced.contains(var)||  isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(!referenced.contains(var)||  isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);	  if(referenced.contains(var))    {    if(isPropertyAssign)    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	1	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var)||!isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(!referenced.contains(var)||!isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(!referenced.contains(var)||!isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  if(referenced.contains(var))    {    if(isPropertyAssign)    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	1	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	15	None	replace
91	[BUG]  [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	15	None	replace
92	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	15	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	15	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChil  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChil  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChil	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	15	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	15	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.remov  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.remov  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.remov	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	15	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChild();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChild();	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Node    lastArg    =    c.getLastChild();    	non-compiled	[CE]  	12	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChild();  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChild();  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChild();  }	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Node    lastArg    =    c.getLastChild();    	non-compiled	[CE]  	12	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(lastArg))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(lastArg))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(lastArg))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Node    lastArg    =    c.getLastChild();    	non-compiled	[CE]  	12	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(lastArg))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(lastArg))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(lastArg))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Node    lastArg    =    c.getLastChild();    	non-compiled	[CE]  	12	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChil  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChil  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChil	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Node    lastArg    =    c.getLastChild();    	non-compiled	[CE]  	12	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Node    lastArg    =    c.getLastChild();    	non-compiled	[CE]  	12	None	replace
103	[BUG]  [BUGGY]  if(referenced.contains(var))  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(referenced.contains(var))  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }	  fnScope.removeChild(var);    compiler.reportCodeChange();    	non-compiled	[CE]  	14	None	replace
104	[BUG]  [BUGGY]  if(referenced.contains(var))  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(referenced.contains(var))  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  fnScope.removeChild(var);    compiler.reportCodeChange();    	non-compiled	[CE]  	14	None	replace
105	[BUG]  [BUGGY]  if(!referenced.contains(var))  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(!referenced.contains(var))  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(!referenced.contains(var))  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }	  fnScope.removeChild(var);    compiler.reportCodeChange();    	non-compiled	[CE]  	14	None	replace
106	[BUG]  [BUGGY]  if(referenced.contains(var)||  referenced.contains(var))  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(referenced.contains(var)||  referenced.contains(var))  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var)||  referenced.contains(var))  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }	  fnScope.removeChild(var);    compiler.reportCodeChange();    	non-compiled	[CE]  	14	None	replace
107	[BUG]  [BUGGY]  if(isPropertyAssign)  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(isPropertyAssign)  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(isPropertyAssign)  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }	  fnScope.removeChild(var);    compiler.reportCodeChange();    	non-compiled	[CE]  	14	None	replace
108	[BUG]  [BUGGY]  if(isPropertyAssign)  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(isPropertyAssign)  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(isPropertyAssign)  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  fnScope.removeChild(var);    compiler.reportCodeChange();    	non-compiled	[CE]  	14	None	replace
109	[BUG]  [BUGGY]  if(!referenced.contains(var))  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]                              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(!referenced.contains(var))  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(!referenced.contains(var))  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  fnScope.removeChild(var);    compiler.reportCodeChange();    	non-compiled	[CE]  	14	None	replace
110	[BUG]  [BUGGY]  Node  fnScope  =  c.getFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Node  fnScope  =  c.getFirstChild();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Node  fnScope  =  c.getFirstChild();	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	10	None	replace
111	[BUG]  [BUGGY]  Node  c  =  argList.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Node  c  =  argList.getFirstChild();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Node  c  =  argList.getFirstChild();	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	10	None	replace
112	[BUG]  [BUGGY]  Node  lastArg  =  argList.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Node  lastArg  =  argList.getFirstChild();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Node  lastArg  =  argList.getFirstChild();	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	10	None	replace
113	[BUG]  [BUGGY]  parentScope.removeChild(lastArg);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  parentScope.removeChild(lastArg);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	parentScope.removeChild(lastArg);	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	10	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(referenced!=  null);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced!=  null);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced!=  null);	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	10	None	replace
115	[BUG]  [BUGGY]  Node  referenced  =  argList.getFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Node  referenced  =  argList.getFirstChild();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Node  referenced  =  argList.getFirstChild();	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	10	None	replace
116	[BUG]  [BUGGY]  Node  argList  =  c.getNext();  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Node  argList  =  c.getNext();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Node  argList  =  c.getNext();	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	10	None	replace
117	[BUG]  [BUGGY]  Node  argList  =  c.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Node  argList  =  c.getFirstChild();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Node  argList  =  c.getFirstChild();	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	10	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(referenced.size()  ==  0);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.size()  ==  0);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.size()  ==  0);	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	10	None	replace
119	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	15	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild  [CE]  [FE]          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	15	None	replace
121	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	15	None	replace
122	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	15	None	replace
123	[BUG]  [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(referenced.contains(var))  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced.contains(var))  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addChildToFront(c);    }    	non-compiled	[CE]  	18	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addChildToFront(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addChildToFront(c);    }    	non-compiled	[CE]  	18	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  argList  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.re  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  argList  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.re  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  argList  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.re	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	5	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCode  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCode  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCode	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	5	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.report  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.report  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.report	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	5	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	5	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnre  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnre  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnre	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    removeUnreferencedFunctionArgs(var);    }    	non-compiled	[CE]  	17	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  argList  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferenced  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  argList  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferenced  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  argList  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferenced	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    removeUnreferencedFunctionArgs(var);    }    	non-compiled	[CE]  	17	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFun  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFun  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferencedFun	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    removeUnreferencedFunctionArgs(var);    }    	non-compiled	[CE]  	17	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkArgument(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferenced  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkArgument(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferenced  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkArgument(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  removeUnreferenced	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    removeUnreferencedFunctionArgs(var);    }    	non-compiled	[CE]  	17	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	16	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	16	None	replace
135	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	16	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	16	None	replace
137	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  var);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  NodeUtil.removeChild(parent,  var);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	NodeUtil.removeChild(parent,  var);	      	non-compiled	[CE]  	8	None	replace
138	[BUG]  [BUGGY]  if(referenced!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(referenced!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChild();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.getLastChild();	      	non-compiled	[CE]  	8	None	replace
139	[BUG]  [BUGGY]  if(referenced!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  fnScope  =  c.getLastChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(referenced!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  fnScope  =  c.getLastChild();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(referenced!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  fnScope  =  c.getLastChild();	      	non-compiled	[CE]  	8	None	replace
140	[BUG]  [BUGGY]  Node  body  =  argList.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Node  body  =  argList.getFirstChild();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Node  body  =  argList.getFirstChild();	  if(referenced!=    null)    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	13	None	replace
141	[BUG]  [BUGGY]  fnScope.replaceChild(lastArg,  var);  [CE]  [FE]        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  fnScope.replaceChild(lastArg,  var);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	fnScope.replaceChild(lastArg,  var);	  fnScope.removeChild(var);    	non-compiled	[CE]  	9	None	replace
142	[BUG]  [BUGGY]  fnScope.removeChild(lastArg);  compiler.reportCodeChange();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  fnScope.removeChild(lastArg);  compiler.reportCodeChange();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	fnScope.removeChild(lastArg);  compiler.reportCodeChange();	  fnScope.removeChild(var);    compiler.reportCodeChange();    	non-compiled	[CE]  	14	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScop  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScop  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScop	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    fnScope.removeChild(c);    }    	non-compiled	[CE]  	19	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    fnScope.removeChild(c);    }    	non-compiled	[CE]  	19	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  f  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  f  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  f	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    fnScope.removeChild(c);    }    	non-compiled	[CE]  	19	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.removeChild  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.removeChild  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var));  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.removeChild	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    fnScope.removeChild(c);    }    	non-compiled	[CE]  	19	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    fnScope.removeChild(c);    }    	non-compiled	[CE]  	19	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)  ==  false);  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)  ==  false);  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)  ==  false);  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	11	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	11	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  argList  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  argList  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  argList  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	11	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Node    lastArg    =    c.getLastChild();    	non-compiled	[CE]  	12	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Node    lastArg    =    c.getLastChild();    	non-compiled	[CE]  	12	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(lastArg)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(lastArg)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(lastArg)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  c.	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Node    lastArg    =    c.getLastChild();    	non-compiled	[CE]  	12	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(lastArg)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(lastArg)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(lastArg)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Node  lastArg  =	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Node    lastArg    =    c.getLastChild();    	non-compiled	[CE]  	12	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  if(referenced.contains(var))    {    if(isPropertyAssign)    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	1	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)  ==  false)  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)  ==  false)  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)  ==  false)  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  if(referenced.contains(var))    {    if(isPropertyAssign)    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	1	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  if(mayHaveSecondarySideEffects)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  if(mayHaveSecondarySideEffects)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  if(mayHaveSecondarySideEffects)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  if(referenced.contains(var))    {    if(isPropertyAssign)    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	1	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.  [CE]  [FE]          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	2	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	2	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign)&&  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.optimize	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	2	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign)&&  referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	2	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  argList  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  argList  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  argList  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	2	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  argList  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  argList  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  argList  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	2	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(!referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkNotNull(it.next());    }    	non-compiled	[CE]  	3	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  references.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  references.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  references.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkNotNull(it.next());    }    	non-compiled	[CE]  	3	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkNotNull(it.next());    }    	non-compiled	[CE]  	3	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkArgument(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkArgument(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkArgument(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer.	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    c);    }    	non-compiled	[CE]  	6	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  callSiteOptimizer	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    c);    }    	non-compiled	[CE]  	6	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkState(!it.hasNext());    }    	non-compiled	[CE]  	7	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkState(!it.hasNext());    }    	non-compiled	[CE]  	7	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  references.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  references.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  references.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkState(!it.hasNext());    }    	non-compiled	[CE]  	7	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    NodeUtil.removeChild(argList,    it.next());    }    	non-compiled	[CE]  	4	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  argList.iterator();  it.hasNext();)  {  NodeUtil.removeChild  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  argList.iterator();  it.hasNext();)  {  NodeUtil.removeChild  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  argList.iterator();  it.hasNext();)  {  NodeUtil.removeChild	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    NodeUtil.removeChild(argList,    it.next());    }    	non-compiled	[CE]  	4	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChil  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChil  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChil	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    NodeUtil.removeChild(argList,    it.next());    }    	non-compiled	[CE]  	4	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign);	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    c);    }    	non-compiled	[CE]  	6	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.VAR);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkArgument(c.getType()  ==  Token.VAR);	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    callSiteOptimizer.optimize(fnScope,    c);    }    	non-compiled	[CE]  	6	None	replace
177	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(isPropertyAssign)  {  for(Node  c  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	15	None	replace
178	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  fnScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  fnScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(isPropertyAssign)  {  for(Node  c  =  fnScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	15	None	replace
179	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.removeChild(c);  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.removeChild(c);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(isPropertyAssign)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  fnScope.removeChild(c);  }	      	non-compiled	[CE]  	8	None	replace
180	[BUG]  [BUGGY]  fnScope.removeChild(argList);  [CE]  [FE]        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  fnScope.removeChild(argList);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	fnScope.removeChild(argList);	  fnScope.removeChild(var);    	non-compiled	[CE]  	9	None	replace
181	[BUG]  [BUGGY]  fnScope.removeChild(var.toString());  [CE]  [FE]          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  fnScope.removeChild(var.toString());  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	fnScope.removeChild(var.toString());	  fnScope.removeChild(var);    	non-compiled	[CE]  	9	None	replace
182	[BUG]  [BUGGY]  fnScope.removeChild(var.getString());  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  fnScope.removeChild(var.getString());  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	fnScope.removeChild(var.getString());	  fnScope.removeChild(var);    	non-compiled	[CE]  	9	None	replace
183	[BUG]  [BUGGY]  NodeUtil.removeChild(argList,  it.next());  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  NodeUtil.removeChild(argList,  it.next());  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	NodeUtil.removeChild(argList,  it.next());	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    NodeUtil.removeChild(argList,    it.next());    }    	non-compiled	[CE]  	4	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next());  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var));  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    NodeUtil.removeChild(argList,    it.next());    }    	non-compiled	[CE]  	4	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Iterator  <  Var>  it  =  argList.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next());  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var));  for(Iterator  <  Var>  it  =  argList.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var));  for(Iterator  <  Var>  it  =  argList.iterator();  it.hasNext();)  {  NodeUtil.removeChild(argList,  it.next());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    NodeUtil.removeChild(argList,    it.next());    }    	non-compiled	[CE]  	4	None	replace
186	[BUG]  [BUGGY]  fnScope.removeChild(c);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  fnScope.removeChild(c);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	fnScope.removeChild(c);	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    fnScope.removeChild(c);    }    	non-compiled	[CE]  	19	None	replace
187	[BUG]  [BUGGY]  parentScope.removeChild(c);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  parentScope.removeChild(c);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	parentScope.removeChild(c);	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    fnScope.removeChild(c);    }    	non-compiled	[CE]  	19	None	replace
188	[BUG]  [BUGGY]  Node  lastArg  =  c.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Node  lastArg  =  c.getFirstChild();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Node  lastArg  =  c.getFirstChild();	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Node    lastArg    =    c.getLastChild();    	non-compiled	[CE]  	12	None	replace
189	[BUG]  [BUGGY]  Node  body  =  c.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Node  body  =  c.getFirstChild();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Node  body  =  c.getFirstChild();	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Node    lastArg    =    c.getLastChild();    	non-compiled	[CE]  	12	None	replace
190	[BUG]  [BUGGY]  Node  body  =  c.getLastChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Node  body  =  c.getLastChild();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Node  body  =  c.getLastChild();	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Node    lastArg    =    c.getLastChild();    	non-compiled	[CE]  	12	None	replace
191	[BUG]  [BUGGY]  lastArg  =  c.getLastChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  lastArg  =  c.getLastChild();  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	lastArg  =  c.getLastChild();	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Node    lastArg    =    c.getLastChild();    	non-compiled	[CE]  	12	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(lastArg!=  null);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(lastArg!=  null);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(lastArg!=  null);	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Node    lastArg    =    c.getLastChild();    	non-compiled	[CE]  	12	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION);	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    removeUnreferencedFunctionArgs(var);    }    	non-compiled	[CE]  	17	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR);  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(c.getType()  ==  Token.VAR);	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    removeUnreferencedFunctionArgs(var);    }    	non-compiled	[CE]  	17	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.FUNCTION);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkArgument(c.getType()  ==  Token.FUNCTION);	  if(referenced.contains(var))    {    for(Node    c    =    argList.getFirstChild();    c!=    null;    c    =    c.getNext())    {    removeUnreferencedFunctionArgs(var);    }    	non-compiled	[CE]  	17	None	replace
196	[BUG]  [BUGGY]  if(fnScope!=  null)  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(fnScope!=  null)  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(fnScope!=  null)  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }	  fnScope.removeChild(var);    compiler.reportCodeChange();    	non-compiled	[CE]  	14	None	replace
197	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(!isPropertyAssign)  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(!isPropertyAssign)  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }	  fnScope.removeChild(var);    compiler.reportCodeChange();    	non-compiled	[CE]  	14	None	replace
198	[BUG]  [BUGGY]  if(fnScope!=  null)  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  if(fnScope!=  null)  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	if(fnScope!=  null)  {  fnScope.removeChild(var);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  fnScope.removeChild(var);    compiler.reportCodeChange();    	non-compiled	[CE]  	14	None	replace
199	[BUG]  [BUGGY]  Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkState(!it.hasNext());    }    	non-compiled	[CE]  	7	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  argList.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  argList.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  argList.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.hasNext());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkState(!it.hasNext());    }    	non-compiled	[CE]  	7	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.next());  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.next());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var))  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(!it.next());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkState(!it.hasNext());    }    	non-compiled	[CE]  	7	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	16	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(isPropertyAssign)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	16	None	replace
204	[BUG]  [BUGGY]  Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkNotNull(it.next());    }    	non-compiled	[CE]  	3	None	replace
205	[BUG]  [BUGGY]  Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkArgument(it.next());  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkArgument(it.next());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkArgument(it.next());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkNotNull(it.next());    }    	non-compiled	[CE]  	3	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkArgument(referenced.contains(var));  [CE]  [FE]                AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkArgument(referenced.contains(var));  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkArgument(referenced.contains(var));	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkNotNull(it.next());    }    	non-compiled	[CE]  	3	None	replace
207	[BUG]  [BUGGY]  Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(it.next()!=  null);  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(it.next()!=  null);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(it.next()!=  null);  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkNotNull(it.next());    }    	non-compiled	[CE]  	3	None	replace
208	[BUG]  [BUGGY]  Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(it.hasNext());  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(it.hasNext());  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkState(it.hasNext());  }	  if(referenced.contains(var))    {    for(Iterator    <    Var>    it    =    referenced.iterator();    it.hasNext();)    {    Preconditions.checkNotNull(it.next());    }    	non-compiled	[CE]  	3	None	replace
209	[BUG]  [BUGGY]  luateWithVar(var,  referenced))  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CE]  [FE]        AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  luateWithVar(var,  referenced))  {  callSiteOptimizer.optimize(fnScope,  referenced);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	luateWithVar(var,  referenced))  {  callSiteOptimizer.optimize(fnScope,  referenced);	  if(referenced.contains(var))    {    if(isPropertyAssign)    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	1	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||!isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||!isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);	  if(referenced.contains(var))    {    if(isPropertyAssign)    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	1	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }    [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]    }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	Preconditions.checkState(referenced.contains(var)||  isPropertyAssign)  {  if(isPropertyAssign)  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  if(referenced.contains(var))    {    if(isPropertyAssign)    {    callSiteOptimizer.optimize(fnScope,    referenced);    }    	non-compiled	[CE]  	1	None	replace
