bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&  canHaveSecondarySideEffects)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&  canHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  isPropertyAssign  &&  canHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    canHaveSecondarySideEffects)    {    	non-compiled	[CE]  	74	None	replace
2	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  referenced.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  referenced.contains(var))  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    canHaveSecondarySideEffects)    {    	non-compiled	[CE]  	74	None	replace
3	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  isPropertyAssign)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  isPropertyAssign)  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    canHaveSecondarySideEffects)    {    	non-compiled	[CE]  	74	None	replace
4	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  isPropertyAssign  &&  canHaveSecondarySideEffects)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  isPropertyAssign  &&  canHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  isPropertyAssign  &&  canHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    canHaveSecondarySideEffects)    {    	non-compiled	[CE]  	74	None	replace
5	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  canHaveSecondarySideEffects  &&  isPropertyAssign)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  canHaveSecondarySideEffects  &&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  canHaveSecondarySideEffects  &&  isPropertyAssign)  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    canHaveSecondarySideEffects)    {    	non-compiled	[CE]  	74	None	replace
6	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.isEmpty())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.isEmpty())  {	  }    else    if(referenced.isEmpty()    &&    isPropertyAssign)    {    	non-compiled	[CE]  	30	None	replace
7	[BUG]  [BUGGY]  }  else  if(!referenced.isEmpty()  &&  isPropertyAssign)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.isEmpty()  &&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.isEmpty()  &&  isPropertyAssign)  {	  }    else    if(referenced.isEmpty()    &&    isPropertyAssign)    {    	non-compiled	[CE]  	30	None	replace
8	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  &&  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  &&  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  &&  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.isEmpty()    &&    isPropertyAssign)    {    	non-compiled	[CE]  	30	None	replace
9	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  &&  isPropertyAssign  &&  canHaveSecondarySideEffects)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  &&  isPropertyAssign  &&  canHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  &&  isPropertyAssign  &&  canHaveSecondarySideEffects)  {	  }    else    if(referenced.isEmpty()    &&    isPropertyAssign)    {    	non-compiled	[CE]  	30	None	replace
10	[BUG]  [BUGGY]  }  else  if(isPropertyAssign.isEmpty()  &&  referenced.isEmpty())  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign.isEmpty()  &&  referenced.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign.isEmpty()  &&  referenced.isEmpty())  {	  }    else    if(referenced.isEmpty()    &&    isPropertyAssign)    {    	non-compiled	[CE]  	30	None	replace
11	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign  &&!referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  isPropertyAssign  &&!referenced.contains(var))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	57	None	replace
12	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)||  isPropertyAssign  &&!referenced.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)||  isPropertyAssign  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)||  isPropertyAssign  &&!referenced.contains(var))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	57	None	replace
13	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  &&!referenced.contains(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  &&!referenced.contains(var))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	57	None	replace
14	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&!callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&!callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  isPropertyAssign  &&!callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	57	None	replace
15	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  isPropertyAssign  &&!referenced.contains(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  isPropertyAssign  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  isPropertyAssign  &&!referenced.contains(var))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	57	None	replace
16	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    ||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	38	None	replace
17	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    ||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	38	None	replace
18	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    ||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	38	None	replace
19	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  isPropertyAssign  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  isPropertyAssign  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  isPropertyAssign  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    ||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	38	None	replace
20	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  ||  referenced.contains(var)&&  referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  ||  referenced.contains(var)&&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  ||  referenced.contains(var)&&  referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	88	None	replace
21	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&!isPropertyAssign  &&  referenced.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&!isPropertyAssign  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&!isPropertyAssign  &&  referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	88	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||!referenced.contains(var));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||!referenced.contains(var));  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||!referenced.contains(var));	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION,  referenced);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION,  referenced);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION,  referenced);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(referenced.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(referenced.getType()  ==  Token.FUNCTION);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(referenced.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(var.getType()!=  Token.FUNCTION);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||!isPropertyAssign);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||!isPropertyAssign);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||!isPropertyAssign);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
28	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)||  isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||  referenced.contains(var)||  isPropertyAssign)  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)||    isPropertyAssign)    {    	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  }  else  if(isUnreferenced  &&  referenced.contains(var)||  isPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isUnreferenced  &&  referenced.contains(var)||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isUnreferenced  &&  referenced.contains(var)||  isPropertyAssign)  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)||    isPropertyAssign)    {    	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  }  else  if(isFunctionAssign  &&  referenced.contains(var)||  isPropertyAssign)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isFunctionAssign  &&  referenced.contains(var)||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isFunctionAssign  &&  referenced.contains(var)||  isPropertyAssign)  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)||    isPropertyAssign)    {    	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  referenced.contains(var)||  isPropertyAssign)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  ||  referenced.contains(var)||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  ||  referenced.contains(var)||  isPropertyAssign)  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)||    isPropertyAssign)    {    	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  }  else  if(isReferenced  &&  referenced.contains(var)||  isPropertyAssign)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isReferenced  &&  referenced.contains(var)||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isReferenced  &&  referenced.contains(var)||  isPropertyAssign)  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)||    isPropertyAssign)    {    	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  &&  referenced.isEmpty())  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  &&  referenced.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  &&  referenced.isEmpty())  {	  }    else    if(referenced.isEmpty()    ||    referenced.isEmpty())    {    	non-compiled	[CE]  	33	None	replace
34	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  referenced.isEmpty()  ||  isPropertyAssign)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  referenced.isEmpty()  ||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  referenced.isEmpty()  ||  isPropertyAssign)  {	  }    else    if(referenced.isEmpty()    ||    referenced.isEmpty())    {    	non-compiled	[CE]  	33	None	replace
35	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  referenced.isEmpty()  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  referenced.isEmpty()  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  referenced.isEmpty()  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.isEmpty()    ||    referenced.isEmpty())    {    	non-compiled	[CE]  	33	None	replace
36	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  lastArg.isEmpty())  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  lastArg.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  lastArg.isEmpty())  {	  }    else    if(referenced.isEmpty()    ||    referenced.isEmpty())    {    	non-compiled	[CE]  	33	None	replace
37	[BUG]  [BUGGY]  }  else  if(referenced.isFunction()  ||  referenced.isEmpty())  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isFunction()  ||  referenced.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isFunction()  ||  referenced.isEmpty())  {	  }    else    if(referenced.isEmpty()    ||    referenced.isEmpty())    {    	non-compiled	[CE]  	33	None	replace
38	[BUG]  [BUGGY]  }  else  if(referenced.size()  ==  1)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  ==  1)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  ==  1)  {	  }    else    if(referenced.size()!=    0)    {    	non-compiled	[CE]  	21	None	replace
39	[BUG]  [BUGGY]  }  else  if(referenced.size()!=  1)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()!=  1)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()!=  1)  {	  }    else    if(referenced.size()!=    0)    {    	non-compiled	[CE]  	21	None	replace
40	[BUG]  [BUGGY]  }  else  if(referenced.size()  ==  4)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  ==  4)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  ==  4)  {	  }    else    if(referenced.size()!=    0)    {    	non-compiled	[CE]  	21	None	replace
41	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  mayHaveSecondarySideEffects)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.contains(var)||  mayHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)||    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	9	None	replace
42	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)||    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	9	None	replace
43	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  ||  isPropertyAssign)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  ||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  ||  isPropertyAssign)  {	  }    else    if(referenced.contains(var)||    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	9	None	replace
44	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)||    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	9	None	replace
45	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  parentScope))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  parentScope))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  parentScope))  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	37	None	replace
46	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign  &&  callSiteOptimizer.optimize(scope,  referenced))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign  &&  callSiteOptimizer.optimize(scope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  isPropertyAssign  &&  callSiteOptimizer.optimize(scope,  referenced))  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	37	None	replace
47	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	37	None	replace
48	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	37	None	replace
49	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  nameNode))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  nameNode))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  nameNode))  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	37	None	replace
50	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  isPropertyAssign  &&  referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  isPropertyAssign  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  isPropertyAssign  &&  referenced.contains(var))  {	  }    else    if(referenced!=    null    &&    referenced.contains(var))    {    	non-compiled	[CE]  	18	None	replace
51	[BUG]  [BUGGY]  }  else  if(referenced!=  null  ||  referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  ||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  ||  referenced.contains(var))  {	  }    else    if(referenced!=    null    &&    referenced.contains(var))    {    	non-compiled	[CE]  	18	None	replace
52	[BUG]  [BUGGY]  }  else  if(referenced  ==  null  &&  referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ==  null  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ==  null  &&  referenced.contains(var))  {	  }    else    if(referenced!=    null    &&    referenced.contains(var))    {    	non-compiled	[CE]  	18	None	replace
53	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced!=  null  &&  referenced.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced!=  null  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced!=  null  &&  referenced.contains(var))  {	  }    else    if(referenced!=    null    &&    referenced.contains(var))    {    	non-compiled	[CE]  	18	None	replace
54	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  parentScope.contains(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  parentScope.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  parentScope.contains(var))  {	  }    else    if(referenced!=    null    &&    referenced.contains(var))    {    	non-compiled	[CE]  	18	None	replace
55	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  references.contains(var))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  references.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  references.contains(var))  {	  }    else    if(referenced!=    null    &&    referenced.contains(var))    {    	non-compiled	[CE]  	18	None	replace
56	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign.contains(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  isPropertyAssign.contains(var))  {	  }    else    if(isPropertyAssign.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	39	None	replace
57	[BUG]  [BUGGY]  }  else  if(isPropertyAssign.contains(var)||  referenced.contains(var))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign.contains(var)||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign.contains(var)||  referenced.contains(var))  {	  }    else    if(isPropertyAssign.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	39	None	replace
58	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign.contains(var)&&  referenced.contains(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign.contains(var)&&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign.contains(var)&&  referenced.contains(var))  {	  }    else    if(isPropertyAssign.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	39	None	replace
59	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign.contains(var)&&  referenced.contains(var))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign.contains(var)&&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  isPropertyAssign.contains(var)&&  referenced.contains(var))  {	  }    else    if(isPropertyAssign.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	39	None	replace
60	[BUG]  [BUGGY]  }  else  if(isPropertyAssign.contains(var)&&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign.contains(var)&&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign.contains(var)&&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(isPropertyAssign.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	39	None	replace
61	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign.contains(var))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  isPropertyAssign.contains(var))  {	  }    else    if(isPropertyAssign.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	39	None	replace
62	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  references.contains(var)||!referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  references.contains(var)||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  references.contains(var)||!referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	80	None	replace
63	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.contains(var)&&!referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.contains(var)&&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  referenced.contains(var)&&!referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	80	None	replace
64	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  ||  referenced.contains(var)||!referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  ||  referenced.contains(var)||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  ||  referenced.contains(var)||!referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	80	None	replace
65	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||!isPropertyAssign  &&  referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||!isPropertyAssign  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||!isPropertyAssign  &&  referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	80	None	replace
66	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope.contains(var)||!referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope.contains(var)||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  parentScope.contains(var)||!referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	80	None	replace
67	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced!=  null  &&  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced!=  null  &&  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced!=  null  &&  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	78	None	replace
68	[BUG]  [BUGGY]  }  else  if(referenced  ==  null  &&  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ==  null  &&  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ==  null  &&  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	78	None	replace
69	[BUG]  [BUGGY]  }  else  if(var!=  null  &&  NodeUtil.isFunctionObjectCall(referenced))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var!=  null  &&  NodeUtil.isFunctionObjectCall(referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var!=  null  &&  NodeUtil.isFunctionObjectCall(referenced))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	78	None	replace
70	[BUG]  [BUGGY]  }  else  if(referenced!=  null  ||  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  ||  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  ||  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	78	None	replace
71	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isAssignmentOp(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isAssignmentOp(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  NodeUtil.isAssignmentOp(var))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	78	None	replace
72	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)||!isPropertyAssign)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)||!isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)||!isPropertyAssign)  {	  }    else    if(!referenced.contains(var)&&!isPropertyAssign)    {    	non-compiled	[CE]  	60	None	replace
73	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&!isUnreferenced)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&!isUnreferenced)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&!isUnreferenced)  {	  }    else    if(!referenced.contains(var)&&!isPropertyAssign)    {    	non-compiled	[CE]  	60	None	replace
74	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&!isFunctionExpressionAssign)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&!isFunctionExpressionAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&!isFunctionExpressionAssign)  {	  }    else    if(!referenced.contains(var)&&!isPropertyAssign)    {    	non-compiled	[CE]  	60	None	replace
75	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&!isReferenced)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&!isReferenced)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&!isReferenced)  {	  }    else    if(!referenced.contains(var)&&!isPropertyAssign)    {    	non-compiled	[CE]  	60	None	replace
76	[BUG]  [BUGGY]  }  else  if(referenced  ==  null  &&  referenced.size()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ==  null  &&  referenced.size()  >  0)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ==  null  &&  referenced.size()  >  0)  {	  }    else    if(referenced!=    null    &&    referenced.size()    >    0)    {    	non-compiled	[CE]  	17	None	replace
77	[BUG]  [BUGGY]  }  else  if(referenced!=  null  ||  referenced.size()  >  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  ||  referenced.size()  >  0)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  ||  referenced.size()  >  0)  {	  }    else    if(referenced!=    null    &&    referenced.size()    >    0)    {    	non-compiled	[CE]  	17	None	replace
78	[BUG]  [BUGGY]  }  else  if(referenced  ==  null  ||  referenced.size()  >  0)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ==  null  ||  referenced.size()  >  0)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ==  null  ||  referenced.size()  >  0)  {	  }    else    if(referenced!=    null    &&    referenced.size()    >    0)    {    	non-compiled	[CE]  	17	None	replace
79	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  referenced.size()  ==  0)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  referenced.size()  ==  0)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  referenced.size()  ==  0)  {	  }    else    if(referenced!=    null    &&    referenced.size()    >    0)    {    	non-compiled	[CE]  	17	None	replace
80	[BUG]  [BUGGY]  }  else  if(referenced  >=  null  &&  referenced.size()  >  0)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  >=  null  &&  referenced.size()  >  0)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  >=  null  &&  referenced.size()  >  0)  {	  }    else    if(referenced!=    null    &&    referenced.size()    >    0)    {    	non-compiled	[CE]  	17	None	replace
81	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  referenced.size()  >  1)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  referenced.size()  >  1)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  referenced.size()  >  1)  {	  }    else    if(referenced!=    null    &&    referenced.size()    >    0)    {    	non-compiled	[CE]  	17	None	replace
82	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&!referenced.contains(var)||!referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&!referenced.contains(var)||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&!referenced.contains(var)||!referenced.contains(var))  {	  }    else    if(!referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	54	None	replace
83	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!referenced.contains(var)||!referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&!referenced.contains(var)||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&!referenced.contains(var)||!referenced.contains(var))  {	  }    else    if(!referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	54	None	replace
84	[BUG]  [BUGGY]  }  else  if(referenced!=  null  ||!referenced.contains(var)||!referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  ||!referenced.contains(var)||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  ||!referenced.contains(var)||!referenced.contains(var))  {	  }    else    if(!referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	54	None	replace
85	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  scope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  scope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  scope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {	  }    else    if(!isPropertyAssign    &&    parentScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	84	None	replace
86	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  parentScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  parentScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  parentScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {	  }    else    if(!isPropertyAssign    &&    parentScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	84	None	replace
87	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  referenced!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {	  }    else    if(!isPropertyAssign    &&    parentScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	84	None	replace
88	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  parentScope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {	  }    else    if(!isPropertyAssign    &&    parentScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	84	None	replace
89	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  ||  parentScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  ||  parentScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  ||  parentScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {	  }    else    if(!isPropertyAssign    &&    parentScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	84	None	replace
90	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope!=  null  ||  parentScope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope!=  null  ||  parentScope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  parentScope!=  null  ||  parentScope.getType()  ==  Token.FUNCTION)  {	  }    else    if(!isPropertyAssign    &&    parentScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	84	None	replace
91	[BUG]  [BUGGY]  Node  fnScope  =  parentScope.getCurrentNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  parentScope.getCurrentNode();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  parentScope.getCurrentNode();	  Node    fnScope    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	87	None	replace
92	[BUG]  [BUGGY]  Node  fnScope  =  scope.getCurrentNode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  scope.getCurrentNode();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  scope.getCurrentNode();	  Node    fnScope    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	87	None	replace
93	[BUG]  [BUGGY]  Node  fnScope  =  fnScope.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  fnScope.getLastChild();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  fnScope.getLastChild();	  Node    fnScope    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	87	None	replace
94	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  lastArg  =  fnScope.getLastChild();	  Node    fnScope    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	87	None	replace
95	[BUG]  [BUGGY]  Node  fnScope  =  fnScope.getFunctionScope();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  fnScope.getFunctionScope();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  fnScope.getFunctionScope();	  Node    fnScope    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	87	None	replace
96	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  isUnreferencedFunctionExpressionNames)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  isUnreferencedFunctionExpressionNames)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  isUnreferencedFunctionExpressionNames)  {	  }    else    if(referenced.contains(var)&&    isUnreferencedFunctionExpressionNames)    {    	non-compiled	[CE]  	75	None	replace
97	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)&&  isUnreferencedFunctionExpressionNames)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)&&  isUnreferencedFunctionExpressionNames)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.contains(var)&&  isUnreferencedFunctionExpressionNames)  {	  }    else    if(referenced.contains(var)&&    isUnreferencedFunctionExpressionNames)    {    	non-compiled	[CE]  	75	None	replace
98	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  isUnreferencedFunctionExpressionNames)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  isUnreferencedFunctionExpressionNames)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  isUnreferencedFunctionExpressionNames)  {	  }    else    if(referenced.contains(var)&&    isUnreferencedFunctionExpressionNames)    {    	non-compiled	[CE]  	75	None	replace
99	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  isUnreferencedFunctionExpressionNames  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  isUnreferencedFunctionExpressionNames  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  isUnreferencedFunctionExpressionNames  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&    isUnreferencedFunctionExpressionNames)    {    	non-compiled	[CE]  	75	None	replace
100	[BUG]  [BUGGY]  }  else  if(!referenced.isEmpty()  ||!referenced.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.isEmpty()  ||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.isEmpty()  ||!referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    ||!referenced.contains(var))    {    	non-compiled	[CE]  	61	None	replace
101	[BUG]  [BUGGY]  }  else  if(!referenced.isEmpty()  &&!referenced.contains(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.isEmpty()  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.isEmpty()  &&!referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    ||!referenced.contains(var))    {    	non-compiled	[CE]  	61	None	replace
102	[BUG]  [BUGGY]  }  else  if(var.isEmpty()  ||!referenced.contains(var))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var.isEmpty()  ||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var.isEmpty()  ||!referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    ||!referenced.contains(var))    {    	non-compiled	[CE]  	61	None	replace
103	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&!referenced.contains(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&!referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    ||!referenced.contains(var))    {    	non-compiled	[CE]  	61	None	replace
104	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.isEmpty()  ||!referenced.contains(var))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.isEmpty()  ||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.isEmpty()  ||!referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    ||!referenced.contains(var))    {    	non-compiled	[CE]  	61	None	replace
105	[BUG]  [BUGGY]  }  else  if(referenced.size()  >=  1)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >=  1)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >=  1)  {	  }    else    if(referenced.size()    >    1)    {    	non-compiled	[CE]  	24	None	replace
106	[BUG]  [BUGGY]  }  else  if(referenced.size()  <  1)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  <  1)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  <  1)  {	  }    else    if(referenced.size()    >    1)    {    	non-compiled	[CE]  	24	None	replace
107	[BUG]  [BUGGY]  }  else  if(referenced.size()  >  1  &&  isPropertyAssign)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >  1  &&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >  1  &&  isPropertyAssign)  {	  }    else    if(referenced.size()    >    1)    {    	non-compiled	[CE]  	24	None	replace
108	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	79	None	replace
109	[BUG]  [BUGGY]  }  else  if(referenced  ==  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ==  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ==  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	79	None	replace
110	[BUG]  [BUGGY]  }  else  if(referenced!=  null  ||  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  ||  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  ||  NodeUtil.isFunctionObjectCall(lastArg))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	79	None	replace
111	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isAssignmentOp(lastArg))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isAssignmentOp(lastArg))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  NodeUtil.isAssignmentOp(lastArg))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	79	None	replace
112	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  isAliased)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  isAliased)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  isAliased)  {	  }    else    if(referenced.contains(var)||    isAliased)    {    	non-compiled	[CE]  	68	None	replace
113	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  isAliased)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  isAliased)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.contains(var)||  isAliased)  {	  }    else    if(referenced.contains(var)||    isAliased)    {    	non-compiled	[CE]  	68	None	replace
114	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  isAliased  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  isAliased  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  isAliased  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)||    isAliased)    {    	non-compiled	[CE]  	68	None	replace
115	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  canHaveSecondarySideEffects)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  canHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  canHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)||    isAliased)    {    	non-compiled	[CE]  	68	None	replace
116	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)||  isPropertyAssign)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)||  isPropertyAssign)  {	  }    else    if(referenced.contains(var)||    isAliased)    {    	non-compiled	[CE]  	68	None	replace
117	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!referenced.contains(var)&&  referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&!referenced.contains(var)&&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&!referenced.contains(var)&&  referenced.contains(var))  {	  }    else    if(!referenced.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	4	None	replace
118	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  parentScope.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  parentScope.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  parentScope.contains(var))  {	  }    else    if(!referenced.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	4	None	replace
119	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.size()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.size()  >  0)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||  referenced.size()  >  0)  {	  }    else    if(isPropertyAssign    &&    referenced.size()    >    0)    {    	non-compiled	[CE]  	59	None	replace
120	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.size()  ==  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.size()  ==  0)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.size()  ==  0)  {	  }    else    if(isPropertyAssign    &&    referenced.size()    >    0)    {    	non-compiled	[CE]  	59	None	replace
121	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.size()  >  1)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.size()  >  1)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.size()  >  1)  {	  }    else    if(isPropertyAssign    &&    referenced.size()    >    0)    {    	non-compiled	[CE]  	59	None	replace
122	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.size()  >  0)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.size()  >  0)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  referenced.size()  >  0)  {	  }    else    if(isPropertyAssign    &&    referenced.size()    >    0)    {    	non-compiled	[CE]  	59	None	replace
123	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.size()!=  0)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.size()!=  0)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.size()!=  0)  {	  }    else    if(isPropertyAssign    &&    referenced.size()    >    0)    {    	non-compiled	[CE]  	59	None	replace
124	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	63	None	replace
125	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.isEmpty()  &&  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.isEmpty()  &&  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.isEmpty()  &&  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	63	None	replace
126	[BUG]  [BUGGY]  }  else  if(!referenced.isEmpty()  &&  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.isEmpty()  &&  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.isEmpty()  &&  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	63	None	replace
127	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  &&  NodeUtil.mayHaveSecondarySideEffects(var))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  &&  NodeUtil.mayHaveSecondarySideEffects(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  &&  NodeUtil.mayHaveSecondarySideEffects(var))  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	63	None	replace
128	[BUG]  [BUGGY]  }  else  if(var.isEmpty()  &&  NodeUtil.isFunctionObjectCall(referenced))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var.isEmpty()  &&  NodeUtil.isFunctionObjectCall(referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var.isEmpty()  &&  NodeUtil.isFunctionObjectCall(referenced))  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	63	None	replace
129	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  &&  NodeUtil.isFunctionObjectCall(var)&&  isPropertyAssign)  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  &&  NodeUtil.isFunctionObjectCall(var)&&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  &&  NodeUtil.isFunctionObjectCall(var)&&  isPropertyAssign)  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	63	None	replace
130	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  &&  NodeUtil.isAssignmentOp(var))  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  &&  NodeUtil.isAssignmentOp(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  &&  NodeUtil.isAssignmentOp(var))  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	63	None	replace
131	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  var,  referenced);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(parent,  var,  referenced);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(parent,  var,  referenced);	  NodeUtil.removeChild(parent,    var);    	non-compiled	[CE]  	50	None	replace
132	[BUG]  [BUGGY]  NodeUtil.removeChild(lastArg,  var);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(lastArg,  var);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(lastArg,  var);	  NodeUtil.removeChild(parent,    var);    	non-compiled	[CE]  	50	None	replace
133	[BUG]  [BUGGY]  NodeUtil.removeChild(argList,  var);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(argList,  var);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(argList,  var);	  NodeUtil.removeChild(parent,    var);    	non-compiled	[CE]  	50	None	replace
134	[BUG]  [BUGGY]  NodeUtil.removeChild(var,  parent);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(var,  parent);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(var,  parent);	  NodeUtil.removeChild(parent,    var);    	non-compiled	[CE]  	50	None	replace
135	[BUG]  [BUGGY]  NodeUtil.removeChild(nameNode,  var);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(nameNode,  var);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(nameNode,  var);	  NodeUtil.removeChild(parent,    var);    	non-compiled	[CE]  	50	None	replace
136	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  var);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(n,  var);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(n,  var);	  NodeUtil.removeChild(parent,    var);    	non-compiled	[CE]  	50	None	replace
137	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  referenced);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(parent,  referenced);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(parent,  referenced);	  NodeUtil.removeChild(parent,    var);    	non-compiled	[CE]  	50	None	replace
138	[BUG]  [BUGGY]  }  else  if(referenced  ==  null  &&!referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ==  null  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ==  null  &&!referenced.contains(var))  {	  }    else    if(referenced!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	12	None	replace
139	[BUG]  [BUGGY]  }  else  if(var!=  null  &&!referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var!=  null  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var!=  null  &&!referenced.contains(var))  {	  }    else    if(referenced!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	12	None	replace
140	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced!=  null  &&!referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced!=  null  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced!=  null  &&!referenced.contains(var))  {	  }    else    if(referenced!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	12	None	replace
141	[BUG]  [BUGGY]  }  else  if(var  ==  null  &&!referenced.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var  ==  null  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var  ==  null  &&!referenced.contains(var))  {	  }    else    if(referenced!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	12	None	replace
142	[BUG]  [BUGGY]  }  else  if(var!=  null  ||!referenced.contains(var))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var!=  null  ||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var!=  null  ||!referenced.contains(var))  {	  }    else    if(referenced!=    null    ||!referenced.contains(var))    {    	non-compiled	[CE]  	65	None	replace
143	[BUG]  [BUGGY]  }  else  if(referenced  ==  null  ||!referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ==  null  ||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ==  null  ||!referenced.contains(var))  {	  }    else    if(referenced!=    null    ||!referenced.contains(var))    {    	non-compiled	[CE]  	65	None	replace
144	[BUG]  [BUGGY]  }  else  if(var  ==  null  ||!referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var  ==  null  ||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var  ==  null  ||!referenced.contains(var))  {	  }    else    if(referenced!=    null    ||!referenced.contains(var))    {    	non-compiled	[CE]  	65	None	replace
145	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||  isConstructor)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||  isConstructor)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||  isConstructor)  {	  }    else    if(isConstructor    ||    isPropertyAssign)    {    	non-compiled	[CE]  	76	None	replace
146	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  &&  referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  ||  isPropertyAssign  &&  referenced.contains(var))  {	  }    else    if(isConstructor    ||    isPropertyAssign)    {    	non-compiled	[CE]  	76	None	replace
147	[BUG]  [BUGGY]  }  else  if(isConstructor  &&  isPropertyAssign)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  &&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  &&  isPropertyAssign)  {	  }    else    if(isConstructor    ||    isPropertyAssign)    {    	non-compiled	[CE]  	76	None	replace
148	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  ||  referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  ||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  ||  isPropertyAssign  ||  referenced.contains(var))  {	  }    else    if(isConstructor    ||    isPropertyAssign)    {    	non-compiled	[CE]  	76	None	replace
149	[BUG]  [BUGGY]  }  else  if(referenced  ||  isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ||  isPropertyAssign)  {	  }    else    if(isConstructor    ||    isPropertyAssign)    {    	non-compiled	[CE]  	76	None	replace
150	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  &&  referenced)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  &&  referenced)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  ||  isPropertyAssign  &&  referenced)  {	  }    else    if(isConstructor    ||    isPropertyAssign)    {    	non-compiled	[CE]  	76	None	replace
151	[BUG]  [BUGGY]  }  else  if(referenced.size()  >  0  &&  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >  0  &&  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >  0  &&  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced.size()    >    0    ||    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	85	None	replace
152	[BUG]  [BUGGY]  }  else  if(referenced.size()  ==  0  ||  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  ==  0  ||  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  ==  0  ||  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced.size()    >    0    ||    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	85	None	replace
153	[BUG]  [BUGGY]  }  else  if(referenced.size()  >=  0  ||  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >=  0  ||  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >=  0  ||  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced.size()    >    0    ||    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	85	None	replace
154	[BUG]  [BUGGY]  }  else  if(referenced.size()!=  0  ||  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()!=  0  ||  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()!=  0  ||  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced.size()    >    0    ||    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	85	None	replace
155	[BUG]  [BUGGY]  }  else  if(referenced.size()  <  0  ||  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  <  0  ||  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  <  0  ||  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced.size()    >    0    ||    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	85	None	replace
156	[BUG]  [BUGGY]  }  else  if(referenced.size()  <=  0  ||  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  <=  0  ||  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  <=  0  ||  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced.size()    >    0    ||    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	85	None	replace
157	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  isFunctionExpressionAssign)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  isFunctionExpressionAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  isFunctionExpressionAssign)  {	  }    else    if(referenced.contains(var)||    isFunctionExpressionAssign)    {    	non-compiled	[CE]  	10	None	replace
158	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  isFunctionExpressionAssign)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  isFunctionExpressionAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.contains(var)||  isFunctionExpressionAssign)  {	  }    else    if(referenced.contains(var)||    isFunctionExpressionAssign)    {    	non-compiled	[CE]  	10	None	replace
159	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)||  isFunctionExpressionAssign)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)||  isFunctionExpressionAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||  referenced.contains(var)||  isFunctionExpressionAssign)  {	  }    else    if(referenced.contains(var)||    isFunctionExpressionAssign)    {    	non-compiled	[CE]  	10	None	replace
160	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&  parentScope.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&  parentScope.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  isPropertyAssign  &&  parentScope.contains(var))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    &&    referenced.contains(var))    {    	non-compiled	[CE]  	3	None	replace
161	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign  &&  referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  isPropertyAssign  &&  referenced.contains(var))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    &&    referenced.contains(var))    {    	non-compiled	[CE]  	3	None	replace
162	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)||  isPropertyAssign  &&  referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)||  isPropertyAssign  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)||  isPropertyAssign  &&  referenced.contains(var))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    &&    referenced.contains(var))    {    	non-compiled	[CE]  	3	None	replace
163	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  isPropertyAssign  &&  referenced.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  isPropertyAssign  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  isPropertyAssign  &&  referenced.contains(var))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    &&    referenced.contains(var))    {    	non-compiled	[CE]  	3	None	replace
164	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&  callSiteOptimizer.optimize(scope,  referenced))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&  callSiteOptimizer.optimize(scope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  isPropertyAssign  &&  callSiteOptimizer.optimize(scope,  referenced))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    &&    referenced.contains(var))    {    	non-compiled	[CE]  	3	None	replace
165	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)||    parentScope.contains(var))    {    	non-compiled	[CE]  	5	None	replace
166	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  parentScope.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  parentScope.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.contains(var)||  parentScope.contains(var))  {	  }    else    if(referenced.contains(var)||    parentScope.contains(var))    {    	non-compiled	[CE]  	5	None	replace
167	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)||  parentScope.contains(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)||  parentScope.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)||  parentScope.contains(var))  {	  }    else    if(referenced.contains(var)||    parentScope.contains(var))    {    	non-compiled	[CE]  	5	None	replace
168	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)&&  parentScope.contains(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)&&  parentScope.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.contains(var)&&  parentScope.contains(var))  {	  }    else    if(referenced.contains(var)&&    parentScope.contains(var))    {    	non-compiled	[CE]  	28	None	replace
169	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  parentScope.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  parentScope.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  parentScope.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced);	  }    else    if(referenced.contains(var)&&    parentScope.contains(var))    {    	non-compiled	[CE]  	28	None	replace
170	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  scope.contains(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  scope.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  scope.contains(var))  {	  }    else    if(referenced.contains(var)&&    parentScope.contains(var))    {    	non-compiled	[CE]  	28	None	replace
171	[BUG]  [BUGGY]  }  else  if(referenced.size()  ==  0  &&  referenced.contains(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  ==  0  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  ==  0  &&  referenced.contains(var))  {	  }    else    if(referenced.size()    >    0    &&    referenced.contains(var))    {    	non-compiled	[CE]  	25	None	replace
172	[BUG]  [BUGGY]  }  else  if(referenced.size()  >=  0  &&  referenced.contains(var))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >=  0  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >=  0  &&  referenced.contains(var))  {	  }    else    if(referenced.size()    >    0    &&    referenced.contains(var))    {    	non-compiled	[CE]  	25	None	replace
173	[BUG]  [BUGGY]  }  else  if(referenced.size()  >  0  &&  isPropertyAssign  &&  referenced.contains(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >  0  &&  isPropertyAssign  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >  0  &&  isPropertyAssign  &&  referenced.contains(var))  {	  }    else    if(referenced.size()    >    0    &&    referenced.contains(var))    {    	non-compiled	[CE]  	25	None	replace
174	[BUG]  [BUGGY]  }  else  if(referenced.size()!=  0  &&  referenced.contains(var))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()!=  0  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()!=  0  &&  referenced.contains(var))  {	  }    else    if(referenced.size()    >    0    &&    referenced.contains(var))    {    	non-compiled	[CE]  	25	None	replace
175	[BUG]  [BUGGY]  }  else  if(referenced.size()  ==  1  &&  referenced.contains(var))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  ==  1  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  ==  1  &&  referenced.contains(var))  {	  }    else    if(referenced.size()    >    0    &&    referenced.contains(var))    {    	non-compiled	[CE]  	25	None	replace
176	[BUG]  [BUGGY]  }  else  if(referenced.size()  ==  2  &&  referenced.contains(var))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  ==  2  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  ==  2  &&  referenced.contains(var))  {	  }    else    if(referenced.size()    >    0    &&    referenced.contains(var))    {    	non-compiled	[CE]  	25	None	replace
177	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  isPropertyAssign  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  isPropertyAssign  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.contains(var)||  isPropertyAssign  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    ||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	7	None	replace
178	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    ||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	7	None	replace
179	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    ||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	7	None	replace
180	[BUG]  [BUGGY]  }  else  if(referenced.getType()  ==  Token.FUNCTION  &&  referenced!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.getType()  ==  Token.FUNCTION  &&  referenced!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.getType()  ==  Token.FUNCTION  &&  referenced!=  null)  {	  }    else    if(referenced.getType()    ==    Token.FUNCTION    ||    referenced!=    null)    {    	non-compiled	[CE]  	66	None	replace
181	[BUG]  [BUGGY]  }  else  if(referenced.getType()  ==  Token.FUNCTION  ||  referenced.getFirstChild()!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.getType()  ==  Token.FUNCTION  ||  referenced.getFirstChild()!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.getType()  ==  Token.FUNCTION  ||  referenced.getFirstChild()!=  null)  {	  }    else    if(referenced.getType()    ==    Token.FUNCTION    ||    referenced!=    null)    {    	non-compiled	[CE]  	66	None	replace
182	[BUG]  [BUGGY]  }  else  if(referenced.getType()  ==  Token.FUNCTION  ||  referenced.hasChildren())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.getType()  ==  Token.FUNCTION  ||  referenced.hasChildren())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.getType()  ==  Token.FUNCTION  ||  referenced.hasChildren())  {	  }    else    if(referenced.getType()    ==    Token.FUNCTION    ||    referenced!=    null)    {    	non-compiled	[CE]  	66	None	replace
183	[BUG]  [BUGGY]  }  else  if(referenced.getType()  ==  Token.FUNCTION  ||  nameNode!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.getType()  ==  Token.FUNCTION  ||  nameNode!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.getType()  ==  Token.FUNCTION  ||  nameNode!=  null)  {	  }    else    if(referenced.getType()    ==    Token.FUNCTION    ||    referenced!=    null)    {    	non-compiled	[CE]  	66	None	replace
184	[BUG]  [BUGGY]  }  else  if(referenced.getType()  ==  Token.FUNCTION  ||  parentScope!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.getType()  ==  Token.FUNCTION  ||  parentScope!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.getType()  ==  Token.FUNCTION  ||  parentScope!=  null)  {	  }    else    if(referenced.getType()    ==    Token.FUNCTION    ||    referenced!=    null)    {    	non-compiled	[CE]  	66	None	replace
185	[BUG]  [BUGGY]  }  else  if(referenced.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {	  }    else    if(referenced.getType()    ==    Token.FUNCTION    ||    referenced!=    null)    {    	non-compiled	[CE]  	66	None	replace
186	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var))    {    	non-compiled	[CE]  	40	None	replace
187	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  parentScope.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var))    {    	non-compiled	[CE]  	40	None	replace
188	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  ||  referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  ||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  ||  referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var))    {    	non-compiled	[CE]  	40	None	replace
189	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var))    {    	non-compiled	[CE]  	40	None	replace
190	[BUG]  [BUGGY]  }  else  if(referenced.size()  ==  0  ||  isPropertyAssign)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  ==  0  ||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  ==  0  ||  isPropertyAssign)  {	  }    else    if(referenced.size()    ==    0)    {    	non-compiled	[CE]  	20	None	replace
191	[BUG]  [BUGGY]  }  else  if(referenced.size()  ==  0  ||  referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  ==  0  ||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  ==  0  ||  referenced.contains(var))  {	  }    else    if(referenced.size()    ==    0)    {    	non-compiled	[CE]  	20	None	replace
192	[BUG]  [BUGGY]  }  else  if(referenced.size()  ==  2)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  ==  2)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  ==  2)  {	  }    else    if(referenced.size()    ==    0)    {    	non-compiled	[CE]  	20	None	replace
193	[BUG]  [BUGGY]  }  else  if(referenced.size()  <=  0)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  <=  0)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  <=  0)  {	  }    else    if(referenced.size()    ==    0)    {    	non-compiled	[CE]  	20	None	replace
194	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)&&  canHaveSecondarySideEffects)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)&&  canHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.contains(var)&&  canHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)&&    canHaveSecondarySideEffects)    {    	non-compiled	[CE]  	89	None	replace
195	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.contains(var)&&  mayHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)&&    canHaveSecondarySideEffects)    {    	non-compiled	[CE]  	89	None	replace
196	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  canHaveSecondarySideEffects)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  canHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  canHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)&&    canHaveSecondarySideEffects)    {    	non-compiled	[CE]  	89	None	replace
197	[BUG]  [BUGGY]  if(referenced.contains(var))  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  if(referenced.contains(var))  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  }  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	if(referenced.contains(var))  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  }	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    compiler.reportCodeChange();    	non-compiled	[CE]  	72	None	replace
198	[BUG]  [BUGGY]  if(referenced.contains(var))  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  if(referenced.contains(var))  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	if(referenced.contains(var))  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    compiler.reportCodeChange();    	non-compiled	[CE]  	72	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION);  compiler.reportCodeChange();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION);  compiler.reportCodeChange();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(var.getType()!=  Token.FUNCTION);  compiler.reportCodeChange();	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    compiler.reportCodeChange();    	non-compiled	[CE]  	72	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(referenced.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(referenced.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(referenced.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    compiler.reportCodeChange();    	non-compiled	[CE]  	72	None	replace
201	[BUG]  [BUGGY]  Context.checkState(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Context.checkState(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Context.checkState(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    compiler.reportCodeChange();    	non-compiled	[CE]  	72	None	replace
202	[BUG]  [BUGGY]  if(referenced.contains(var))  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(scope,  referenced);  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  if(referenced.contains(var))  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(scope,  referenced);  }  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	if(referenced.contains(var))  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  }  else  {  callSiteOptimizer.optimize(scope,  referenced);  }	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    compiler.reportCodeChange();    	non-compiled	[CE]  	72	None	replace
203	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.isEmpty()  &&!referenced.contains(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.isEmpty()  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.isEmpty()  &&!referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    &&!referenced.contains(var))    {    	non-compiled	[CE]  	32	None	replace
204	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.isEmpty()  &&!referenced.contains(var))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.isEmpty()  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  referenced.isEmpty()  &&!referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    &&!referenced.contains(var))    {    	non-compiled	[CE]  	32	None	replace
205	[BUG]  [BUGGY]  }  else  if(var.isEmpty()  &&!referenced.contains(var))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var.isEmpty()  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var.isEmpty()  &&!referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    &&!referenced.contains(var))    {    	non-compiled	[CE]  	32	None	replace
206	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  &&  isPropertyAssign  &&!referenced.contains(var))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  &&  isPropertyAssign  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  &&  isPropertyAssign  &&!referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    &&!referenced.contains(var))    {    	non-compiled	[CE]  	32	None	replace
207	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(!referenced.contains(var)||    referenced.contains(var))    {    	non-compiled	[CE]  	2	None	replace
208	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)||  referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||  referenced.contains(var)||  referenced.contains(var))  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)||    referenced.contains(var))    {    	non-compiled	[CE]  	1	None	replace
209	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  references.contains(var)||  referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  references.contains(var)||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  references.contains(var)||  referenced.contains(var))  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)||    referenced.contains(var))    {    	non-compiled	[CE]  	1	None	replace
210	[BUG]  [BUGGY]  }  else  if(!callSiteOptimizer.contains(var)&&!callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!callSiteOptimizer.contains(var)&&!callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!callSiteOptimizer.contains(var)&&!callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(!referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	14	None	replace
211	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,  parentScope))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,  parentScope))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,  parentScope))  {	  }    else    if(!referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	14	None	replace
212	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,  callSiteOptimizer))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,  callSiteOptimizer))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,  callSiteOptimizer))  {	  }    else    if(!referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	14	None	replace
213	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,  parentScope))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,  parentScope))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,  parentScope))  {	  }    else    if(!referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	14	None	replace
214	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||!callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||!callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||!callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(!referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	14	None	replace
215	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)&&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	36	None	replace
216	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||!referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||!referenced.contains(var))  {	  }    else    if(isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	13	None	replace
217	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&!callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&!callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	13	None	replace
218	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!referenced.contains(var)||  referenced.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&!referenced.contains(var)||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&!referenced.contains(var)||  referenced.contains(var))  {	  }    else    if(isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	13	None	replace
219	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)&&  isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)&&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||  referenced.contains(var)&&  isPropertyAssign)  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	90	None	replace
220	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  referenced.contains(var)&&  isPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  referenced.contains(var)&&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  referenced.contains(var)&&  isPropertyAssign)  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	90	None	replace
221	[BUG]  [BUGGY]  }  else  if(isUnreferenced  &&  referenced.contains(var)&&  isPropertyAssign)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isUnreferenced  &&  referenced.contains(var)&&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isUnreferenced  &&  referenced.contains(var)&&  isPropertyAssign)  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	90	None	replace
222	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)&&  referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)&&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||  referenced.contains(var)&&  referenced.contains(var))  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	26	None	replace
223	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&    referenced.contains(var)||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	69	None	replace
224	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&    referenced.contains(var)||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	69	None	replace
225	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  parentScope))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  parentScope))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  parentScope))  {	  }    else    if(referenced.contains(var)&&    referenced.contains(var)||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	69	None	replace
226	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.contains(var)&&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.contains(var)&&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  referenced.contains(var)&&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&    referenced.contains(var)||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	69	None	replace
227	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  parentScope.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  parentScope.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  parentScope.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&    referenced.contains(var)||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	69	None	replace
228	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&!callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&!callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&!callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(!isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	44	None	replace
229	[BUG]  [BUGGY]  }  else  if(!isFunctionAssign  &&!referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isFunctionAssign  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isFunctionAssign  &&!referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	44	None	replace
230	[BUG]  [BUGGY]  }  else  if(!isUnreferenced  &&!referenced.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isUnreferenced  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isUnreferenced  &&!referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	44	None	replace
231	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  ||!referenced.contains(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  ||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  ||!referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	44	None	replace
232	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&  mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  isPropertyAssign  &&  mayHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	73	None	replace
233	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  isPropertyAssign  &&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  isPropertyAssign  &&  mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  isPropertyAssign  &&  mayHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	73	None	replace
234	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  parentScope.getVar(var.getString())!=  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  parentScope.getVar(var.getString())!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  parentScope.getVar(var.getString())!=  null)  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	73	None	replace
235	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||!isConstructor)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||!isConstructor)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||!isConstructor)  {	  }    else    if(isConstructor    ||!isPropertyAssign)    {    	non-compiled	[CE]  	82	None	replace
236	[BUG]  [BUGGY]  }  else  if(isConstructor  &&!isPropertyAssign)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  &&!isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  &&!isPropertyAssign)  {	  }    else    if(isConstructor    ||!isPropertyAssign)    {    	non-compiled	[CE]  	82	None	replace
237	[BUG]  [BUGGY]  }  else  if(isConstructor  ||!isPropertyAssign  &&  referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  ||!isPropertyAssign  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  ||!isPropertyAssign  &&  referenced.contains(var))  {	  }    else    if(isConstructor    ||!isPropertyAssign)    {    	non-compiled	[CE]  	82	None	replace
238	[BUG]  [BUGGY]  }  else  if(referenced  ||!isPropertyAssign)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ||!isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ||!isPropertyAssign)  {	  }    else    if(isConstructor    ||!isPropertyAssign)    {    	non-compiled	[CE]  	82	None	replace
239	[BUG]  [BUGGY]  }  else  if(!isConstructor  ||!isPropertyAssign)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isConstructor  ||!isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isConstructor  ||!isPropertyAssign)  {	  }    else    if(isConstructor    ||!isPropertyAssign)    {    	non-compiled	[CE]  	82	None	replace
240	[BUG]  [BUGGY]  }  else  if(referenced  ||  isPropertyAssign  &&  referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ||  isPropertyAssign  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ||  isPropertyAssign  &&  referenced.contains(var))  {	  }    else    if(isPropertyAssign    ||    referenced.contains(var))    {    	non-compiled	[CE]  	58	None	replace
241	[BUG]  [BUGGY]  }  else  if(referenced  ||  referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ||  referenced.contains(var))  {	  }    else    if(isPropertyAssign    ||    referenced.contains(var))    {    	non-compiled	[CE]  	58	None	replace
242	[BUG]  [BUGGY]  }  else  if(isReferenced  ||  referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isReferenced  ||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isReferenced  ||  referenced.contains(var))  {	  }    else    if(isPropertyAssign    ||    referenced.contains(var))    {    	non-compiled	[CE]  	58	None	replace
243	[BUG]  [BUGGY]  }  else  if(var!=  null  &&  referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var!=  null  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var!=  null  &&  referenced.contains(var))  {	  }    else    if(var!=    null)    {    	non-compiled	[CE]  	67	None	replace
244	[BUG]  [BUGGY]  Node  fnScope  =  parentScope.getVar(var.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  parentScope.getVar(var.getString());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  parentScope.getVar(var.getString());	  Node    fnScope    =    fnScope.getVar(var.getString());    	non-compiled	[CE]  	47	None	replace
245	[BUG]  [BUGGY]  Node  fnScope  =  scope.getVar(var.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  scope.getVar(var.getString());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  scope.getVar(var.getString());	  Node    fnScope    =    fnScope.getVar(var.getString());    	non-compiled	[CE]  	47	None	replace
246	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getVar(var.getString());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  lastArg  =  fnScope.getVar(var.getString());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  lastArg  =  fnScope.getVar(var.getString());	  Node    fnScope    =    fnScope.getVar(var.getString());    	non-compiled	[CE]  	47	None	replace
247	[BUG]  [BUGGY]  fnScope  =  parentScope.getVar(var.getString());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  fnScope  =  parentScope.getVar(var.getString());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	fnScope  =  parentScope.getVar(var.getString());	  Node    fnScope    =    fnScope.getVar(var.getString());    	non-compiled	[CE]  	47	None	replace
248	[BUG]  [BUGGY]  final  Node  fnScope  =  fnScope.getVar(var.getString());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  final  Node  fnScope  =  fnScope.getVar(var.getString());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	final  Node  fnScope  =  fnScope.getVar(var.getString());	  Node    fnScope    =    fnScope.getVar(var.getString());    	non-compiled	[CE]  	47	None	replace
249	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getVar(var.getString());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  parentScope  =  fnScope.getVar(var.getString());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  parentScope  =  fnScope.getVar(var.getString());	  Node    fnScope    =    fnScope.getVar(var.getString());    	non-compiled	[CE]  	47	None	replace
250	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&!referenced.contains(var)&&!referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&!referenced.contains(var)&&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&!referenced.contains(var)&&!referenced.contains(var))  {	  }    else    if(!referenced.contains(var)&&!referenced.contains(var))    {    	non-compiled	[CE]  	56	None	replace
251	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!referenced.contains(var)&&!referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&!referenced.contains(var)&&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&!referenced.contains(var)&&!referenced.contains(var))  {	  }    else    if(!referenced.contains(var)&&!referenced.contains(var))    {    	non-compiled	[CE]  	56	None	replace
252	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&!referenced.contains(var)&&!referenced.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&!referenced.contains(var)&&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&!referenced.contains(var)&&!referenced.contains(var))  {	  }    else    if(!referenced.contains(var)&&!referenced.contains(var))    {    	non-compiled	[CE]  	56	None	replace
253	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,  callSiteOptimizer))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,  callSiteOptimizer))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,  callSiteOptimizer))  {	  }    else    if(referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	45	None	replace
254	[BUG]  [BUGGY]  }  else  if(!callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	45	None	replace
255	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,  nameNode))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,  nameNode))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,  nameNode))  {	  }    else    if(referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	45	None	replace
256	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&!callSiteOptimizer.optimize(scope,  referenced))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&!callSiteOptimizer.optimize(scope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&!callSiteOptimizer.optimize(scope,  referenced))  {	  }    else    if(referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	45	None	replace
257	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)&&!referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)&&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.contains(var)&&!referenced.contains(var))  {	  }    else    if(referenced.contains(var)&&!referenced.contains(var))    {    	non-compiled	[CE]  	53	None	replace
258	[BUG]  [BUGGY]  }  else  if(referenced  ==  null  &&  isPropertyAssign)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ==  null  &&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ==  null  &&  isPropertyAssign)  {	  }    else    if(referenced!=    null    &&    isPropertyAssign)    {    	non-compiled	[CE]  	16	None	replace
259	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  isReferenced)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  isReferenced)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  isReferenced)  {	  }    else    if(referenced!=    null    &&    isPropertyAssign)    {    	non-compiled	[CE]  	16	None	replace
260	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!referenced.contains(var)&&  isPropertyAssign)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&!referenced.contains(var)&&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&!referenced.contains(var)&&  isPropertyAssign)  {	  }    else    if(!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	11	None	replace
261	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)&&!isPropertyAssign)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)&&!isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.contains(var)&&!isPropertyAssign)  {	  }    else    if(referenced.contains(var)&&!isPropertyAssign)    {    	non-compiled	[CE]  	43	None	replace
262	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&!isUnreferenced)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&!isUnreferenced)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&!isUnreferenced)  {	  }    else    if(referenced.contains(var)&&!isPropertyAssign)    {    	non-compiled	[CE]  	43	None	replace
263	[BUG]  [BUGGY]  }  else  if(!var.isEmpty())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!var.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!var.isEmpty())  {	  }    else    if(var.isEmpty())    {    	non-compiled	[CE]  	62	None	replace
264	[BUG]  [BUGGY]  }  else  if(var!=  null  &&  var.isEmpty())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var!=  null  &&  var.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var!=  null  &&  var.isEmpty())  {	  }    else    if(var.isEmpty())    {    	non-compiled	[CE]  	62	None	replace
265	[BUG]  [BUGGY]  }  else  if(var.isEmpty()  &&  referenced.contains(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var.isEmpty()  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var.isEmpty()  &&  referenced.contains(var))  {	  }    else    if(var.isEmpty())    {    	non-compiled	[CE]  	62	None	replace
266	[BUG]  [BUGGY]  }  else  if(var.isUnknown())  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var.isUnknown())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var.isUnknown())  {	  }    else    if(var.isEmpty())    {    	non-compiled	[CE]  	62	None	replace
267	[BUG]  [BUGGY]  }  else  if(var.isEmpty()  &&  isPropertyAssign)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var.isEmpty()  &&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var.isEmpty()  &&  isPropertyAssign)  {	  }    else    if(var.isEmpty())    {    	non-compiled	[CE]  	62	None	replace
268	[BUG]  [BUGGY]  }  else  if(var.isFunction())  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var.isFunction())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var.isFunction())  {	  }    else    if(var.isEmpty())    {    	non-compiled	[CE]  	62	None	replace
269	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.isEmpty())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||  referenced.isEmpty())  {	  }    else    if(referenced.isEmpty()    ||    isPropertyAssign)    {    	non-compiled	[CE]  	31	None	replace
270	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.isEmpty()    ||    isPropertyAssign)    {    	non-compiled	[CE]  	31	None	replace
271	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&  canHaveSecondarySideEffects)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&  canHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&  canHaveSecondarySideEffects)  {	  }    else    if(referenced.isEmpty()    ||    isPropertyAssign)    {    	non-compiled	[CE]  	31	None	replace
272	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&  callSiteOptimizer.optimize(scope,  referenced))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&  callSiteOptimizer.optimize(scope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&  callSiteOptimizer.optimize(scope,  referenced))  {	  }    else    if(referenced.isEmpty()    ||    isPropertyAssign)    {    	non-compiled	[CE]  	31	None	replace
273	[BUG]  [BUGGY]  }  else  if(!referenced.isEmpty()  ||  isPropertyAssign)  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.isEmpty()  ||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.isEmpty()  ||  isPropertyAssign)  {	  }    else    if(referenced.isEmpty()    ||    isPropertyAssign)    {    	non-compiled	[CE]  	31	None	replace
274	[BUG]  [BUGGY]  }  else  if(!referenced.isEmpty()  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.isEmpty()  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.isEmpty()  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(!referenced.isEmpty())    {    	non-compiled	[CE]  	29	None	replace
275	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||!referenced.isEmpty())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||!referenced.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||!referenced.isEmpty())  {	  }    else    if(!referenced.isEmpty())    {    	non-compiled	[CE]  	29	None	replace
276	[BUG]  [BUGGY]  }  else  if(!referenced.isEmpty()  &&!callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.isEmpty()  &&!callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.isEmpty()  &&!callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(!referenced.isEmpty())    {    	non-compiled	[CE]  	29	None	replace
277	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  callSiteOptimizer.optimize(fnScope,  parentScope))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  callSiteOptimizer.optimize(fnScope,  parentScope))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  callSiteOptimizer.optimize(fnScope,  parentScope))  {	  }    else    if(referenced.contains(var)&&    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	27	None	replace
278	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  parentScope.optimize(fnScope,  referenced))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  parentScope.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  parentScope.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	27	None	replace
279	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	27	None	replace
280	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  callSiteOptimizer.optimize(scope,  referenced))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  callSiteOptimizer.optimize(scope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  callSiteOptimizer.optimize(scope,  referenced))  {	  }    else    if(referenced.contains(var)&&    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	27	None	replace
281	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  callSiteOptimizer.optimize(fnScope,  nameNode))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  callSiteOptimizer.optimize(fnScope,  nameNode))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  callSiteOptimizer.optimize(fnScope,  nameNode))  {	  }    else    if(referenced.contains(var)&&    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	27	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign  ||!referenced.contains(var));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(!isPropertyAssign  ||!referenced.contains(var));  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(!isPropertyAssign  ||!referenced.contains(var));	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	51	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||!referenced.contains(var));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||!referenced.contains(var));  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(isPropertyAssign  ||!referenced.contains(var));	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	51	None	replace
284	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&!referenced.contains(var));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&!referenced.contains(var));  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(!isPropertyAssign  &&!referenced.contains(var));	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	51	None	replace
285	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign,  referenced);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(!isPropertyAssign,  referenced);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(!isPropertyAssign,  referenced);	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	51	None	replace
286	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&  referenced.contains(var));  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&  referenced.contains(var));  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(!isPropertyAssign  &&  referenced.contains(var));	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	51	None	replace
287	[BUG]  [BUGGY]  Node  fnScope  =  parentScope.getScope();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  parentScope.getScope();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  parentScope.getScope();	  Node    fnScope    =    fnScope.getScope();    	non-compiled	[CE]  	52	None	replace
288	[BUG]  [BUGGY]  Node  fnScope  =  scope.getScope();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  scope.getScope();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  scope.getScope();	  Node    fnScope    =    fnScope.getScope();    	non-compiled	[CE]  	52	None	replace
289	[BUG]  [BUGGY]  Node  fnScope  =  this.parentScope.getScope();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  this.parentScope.getScope();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  this.parentScope.getScope();	  Node    fnScope    =    fnScope.getScope();    	non-compiled	[CE]  	52	None	replace
290	[BUG]  [BUGGY]  Node  fnScope  =  lastArg.getScope();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  lastArg.getScope();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  lastArg.getScope();	  Node    fnScope    =    fnScope.getScope();    	non-compiled	[CE]  	52	None	replace
291	[BUG]  [BUGGY]  Node  fnScope  =  fnScope.getParent();  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  fnScope.getParent();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  fnScope.getParent();	  Node    fnScope    =    fnScope.getScope();    	non-compiled	[CE]  	52	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign,  referenced);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(isPropertyAssign,  referenced);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(isPropertyAssign,  referenced);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
293	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isUnreferenced);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isUnreferenced);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(isPropertyAssign  ||  isUnreferenced);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
294	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isReferenced);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isReferenced);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(isPropertyAssign  ||  isReferenced);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign,  isReferenced);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(isPropertyAssign,  isReferenced);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(isPropertyAssign,  isReferenced);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var));  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var));	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	48	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var));  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var));	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	48	None	replace
298	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  referenced.contains(var));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  referenced.contains(var));  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(isPropertyAssign  &&  referenced.contains(var));	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	48	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(referenced.contains(var)||  isPropertyAssign);	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	48	None	replace
300	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(!referenced.contains(var));  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(!referenced.contains(var));	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	48	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)  ==  false);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(referenced.contains(var)  ==  false);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(referenced.contains(var)  ==  false);	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	48	None	replace
302	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  lastArg);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(parent,  lastArg);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(parent,  lastArg);	  NodeUtil.removeChild(lastArg);    	non-compiled	[CE]  	71	None	replace
303	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(parent);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(parent);	  NodeUtil.removeChild(lastArg);    	non-compiled	[CE]  	71	None	replace
304	[BUG]  [BUGGY]  NodeUtil.removeChild(argList.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(argList.getFirstChild());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(argList.getFirstChild());	  NodeUtil.removeChild(lastArg);    	non-compiled	[CE]  	71	None	replace
305	[BUG]  [BUGGY]  NodeUtil.removeChild(lastArg,  referenced);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(lastArg,  referenced);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(lastArg,  referenced);	  NodeUtil.removeChild(lastArg);    	non-compiled	[CE]  	71	None	replace
306	[BUG]  [BUGGY]  NodeUtil.removeChild(var);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(var);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(var);	  NodeUtil.removeChild(lastArg);    	non-compiled	[CE]  	71	None	replace
307	[BUG]  [BUGGY]  NodeUtil.removeChild(nameNode);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(nameNode);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(nameNode);	  NodeUtil.removeChild(lastArg);    	non-compiled	[CE]  	71	None	replace
308	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  NodeUtil.isFunctionDeclaration(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  NodeUtil.isFunctionDeclaration(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  NodeUtil.isFunctionDeclaration(var))  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionDeclaration(var))    {    	non-compiled	[CE]  	64	None	replace
309	[BUG]  [BUGGY]  }  else  if(!referenced.isEmpty()  &&  NodeUtil.isFunctionDeclaration(var))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.isEmpty()  &&  NodeUtil.isFunctionDeclaration(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.isEmpty()  &&  NodeUtil.isFunctionDeclaration(var))  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionDeclaration(var))    {    	non-compiled	[CE]  	64	None	replace
310	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.isEmpty()  &&  NodeUtil.isFunctionDeclaration(var))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.isEmpty()  &&  NodeUtil.isFunctionDeclaration(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.isEmpty()  &&  NodeUtil.isFunctionDeclaration(var))  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionDeclaration(var))    {    	non-compiled	[CE]  	64	None	replace
311	[BUG]  [BUGGY]  }  else  if(var.isEmpty()  &&  NodeUtil.isFunctionDeclaration(referenced))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var.isEmpty()  &&  NodeUtil.isFunctionDeclaration(referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var.isEmpty()  &&  NodeUtil.isFunctionDeclaration(referenced))  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionDeclaration(var))    {    	non-compiled	[CE]  	64	None	replace
312	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  &&  NodeUtil.isFunctionDeclaration(lastArg))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  &&  NodeUtil.isFunctionDeclaration(lastArg))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  &&  NodeUtil.isFunctionDeclaration(lastArg))  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionDeclaration(var))    {    	non-compiled	[CE]  	64	None	replace
313	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  &&  NodeUtil.isFunctionDeclaration(var)||  isPropertyAssign)  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  &&  NodeUtil.isFunctionDeclaration(var)||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  &&  NodeUtil.isFunctionDeclaration(var)||  isPropertyAssign)  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionDeclaration(var))    {    	non-compiled	[CE]  	64	None	replace
314	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  parentScope))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  parentScope))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  parentScope))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    &&    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	6	None	replace
315	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  nameNode))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  nameNode))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  nameNode))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    &&    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	6	None	replace
316	[BUG]  [BUGGY]  }  else  if(!referenced.isEmpty()  &&  referenced.contains(var))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.isEmpty()  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.isEmpty()  &&  referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    &&    referenced.contains(var))    {    	non-compiled	[CE]  	34	None	replace
317	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.isEmpty()  &&  referenced.contains(var))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.isEmpty()  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.isEmpty()  &&  referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    &&    referenced.contains(var))    {    	non-compiled	[CE]  	34	None	replace
318	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  &&  isPropertyAssign  &&  referenced.contains(var))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  &&  isPropertyAssign  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  &&  isPropertyAssign  &&  referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    &&    referenced.contains(var))    {    	non-compiled	[CE]  	34	None	replace
319	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  referenced.isEmpty()  &&  referenced.contains(var))  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  referenced.isEmpty()  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  referenced.isEmpty()  &&  referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    &&    referenced.contains(var))    {    	non-compiled	[CE]  	34	None	replace
320	[BUG]  [BUGGY]  }  else  if(referenced.isNull()  &&  referenced.contains(var))  {  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isNull()  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isNull()  &&  referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    &&    referenced.contains(var))    {    	non-compiled	[CE]  	34	None	replace
321	[BUG]  [BUGGY]  }  else  if(referenced!=  null  ||  referenced.isEmpty())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  ||  referenced.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  ||  referenced.isEmpty())  {	  }    else    if(referenced!=    null    &&    referenced.isEmpty())    {    	non-compiled	[CE]  	86	None	replace
322	[BUG]  [BUGGY]  }  else  if(referenced  ==  null  &&  referenced.isEmpty())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ==  null  &&  referenced.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ==  null  &&  referenced.isEmpty())  {	  }    else    if(referenced!=    null    &&    referenced.isEmpty())    {    	non-compiled	[CE]  	86	None	replace
323	[BUG]  [BUGGY]  }  else  if(referenced  ==  null  ||  referenced.isEmpty())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ==  null  ||  referenced.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ==  null  ||  referenced.isEmpty())  {	  }    else    if(referenced!=    null    &&    referenced.isEmpty())    {    	non-compiled	[CE]  	86	None	replace
324	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  referenced.isEmpty()  ||  isPropertyAssign)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  referenced.isEmpty()  ||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  referenced.isEmpty()  ||  isPropertyAssign)  {	  }    else    if(referenced!=    null    &&    referenced.isEmpty())    {    	non-compiled	[CE]  	86	None	replace
325	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  parentScope.isEmpty())  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  parentScope.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  parentScope.isEmpty())  {	  }    else    if(referenced!=    null    &&    referenced.isEmpty())    {    	non-compiled	[CE]  	86	None	replace
326	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  ||  referenced.contains(var)||  referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  ||  referenced.contains(var)||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  ||  referenced.contains(var)||  referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)||    referenced.contains(var))    {    	non-compiled	[CE]  	81	None	replace
327	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope.contains(var)||  referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope.contains(var)||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  parentScope.contains(var)||  referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)||    referenced.contains(var))    {    	non-compiled	[CE]  	81	None	replace
328	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  references.contains(var)||  referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  references.contains(var)||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  references.contains(var)||  referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)||    referenced.contains(var))    {    	non-compiled	[CE]  	81	None	replace
329	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.contains(var)||  parentScope.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.contains(var)||  parentScope.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  referenced.contains(var)||  parentScope.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)||    referenced.contains(var))    {    	non-compiled	[CE]  	81	None	replace
330	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&  referenced.contains(var))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&  referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    ||    referenced.contains(var))    {    	non-compiled	[CE]  	35	None	replace
331	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.isEmpty()    ||    referenced.contains(var))    {    	non-compiled	[CE]  	35	None	replace
332	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  callSiteOptimizer.optimize(scope,  referenced))  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  callSiteOptimizer.optimize(scope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  callSiteOptimizer.optimize(scope,  referenced))  {	  }    else    if(referenced.isEmpty()    ||    referenced.contains(var))    {    	non-compiled	[CE]  	35	None	replace
333	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  referenced.contains(var)&&  isPropertyAssign)  {  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  referenced.contains(var)&&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  referenced.contains(var)&&  isPropertyAssign)  {	  }    else    if(referenced.isEmpty()    ||    referenced.contains(var))    {    	non-compiled	[CE]  	35	None	replace
334	[BUG]  [BUGGY]  }  else  if(referenced  ==  null  ||  isPropertyAssign)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ==  null  ||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ==  null  ||  isPropertyAssign)  {	  }    else    if(referenced!=    null    ||    isPropertyAssign)    {    	non-compiled	[CE]  	19	None	replace
335	[BUG]  [BUGGY]  }  else  if(isPropertyAssign!=  null  &&  isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign!=  null  &&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign!=  null  &&  isPropertyAssign)  {	  }    else    if(referenced!=    null    ||    isPropertyAssign)    {    	non-compiled	[CE]  	19	None	replace
336	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  >>  null  &&  isPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  >>  null  &&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  >>  null  &&  isPropertyAssign)  {	  }    else    if(referenced!=    null    ||    isPropertyAssign)    {    	non-compiled	[CE]  	19	None	replace
337	[BUG]  [BUGGY]  }  else  if(referenced.size()  >  0  &&  isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >  0  &&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >  0  &&  isPropertyAssign)  {	  }    else    if(referenced.size()    >    0    ||    isPropertyAssign)    {    	non-compiled	[CE]  	23	None	replace
338	[BUG]  [BUGGY]  }  else  if(referenced.size()  >=  0  ||  isPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >=  0  ||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >=  0  ||  isPropertyAssign)  {	  }    else    if(referenced.size()    >    0    ||    isPropertyAssign)    {    	non-compiled	[CE]  	23	None	replace
339	[BUG]  [BUGGY]  }  else  if(referenced.size()  >  0  ||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >  0  ||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >  0  ||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.size()    >    0    ||    isPropertyAssign)    {    	non-compiled	[CE]  	23	None	replace
340	[BUG]  [BUGGY]  }  else  if(referenced.size()  <  0  ||  isPropertyAssign)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  <  0  ||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  <  0  ||  isPropertyAssign)  {	  }    else    if(referenced.size()    >    0    ||    isPropertyAssign)    {    	non-compiled	[CE]  	23	None	replace
341	[BUG]  [BUGGY]  }  else  if(referenced.size()  >  0  ||  isPropertyAssign  &&  referenced.contains(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >  0  ||  isPropertyAssign  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >  0  ||  isPropertyAssign  &&  referenced.contains(var))  {	  }    else    if(referenced.size()    >    0    ||    isPropertyAssign)    {    	non-compiled	[CE]  	23	None	replace
342	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)||!referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||  referenced.contains(var)||!referenced.contains(var))  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	55	None	replace
343	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  references.contains(var)||!referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  references.contains(var)||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  references.contains(var)||!referenced.contains(var))  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	55	None	replace
344	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope.getVar(var.getString())!=  var)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope.getVar(var.getString())!=  var)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  parentScope.getVar(var.getString())!=  var)  {	  }    else    if(!isPropertyAssign    &&    fnScope.getVar(var.getString())!=    var)    {    	non-compiled	[CE]  	83	None	replace
345	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  parentScope.getVar(var.getString())!=  var)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  parentScope.getVar(var.getString())!=  var)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  parentScope.getVar(var.getString())!=  var)  {	  }    else    if(!isPropertyAssign    &&    fnScope.getVar(var.getString())!=    var)    {    	non-compiled	[CE]  	83	None	replace
346	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  ||  fnScope.getVar(var.getString())!=  var)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  ||  fnScope.getVar(var.getString())!=  var)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  ||  fnScope.getVar(var.getString())!=  var)  {	  }    else    if(!isPropertyAssign    &&    fnScope.getVar(var.getString())!=    var)    {    	non-compiled	[CE]  	83	None	replace
347	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  scope.getVar(var.getString())!=  var)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  scope.getVar(var.getString())!=  var)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  scope.getVar(var.getString())!=  var)  {	  }    else    if(!isPropertyAssign    &&    fnScope.getVar(var.getString())!=    var)    {    	non-compiled	[CE]  	83	None	replace
348	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  fnScope.getVar(var.getString())!=  lastArg)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  fnScope.getVar(var.getString())!=  lastArg)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  fnScope.getVar(var.getString())!=  lastArg)  {	  }    else    if(!isPropertyAssign    &&    fnScope.getVar(var.getString())!=    var)    {    	non-compiled	[CE]  	83	None	replace
349	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope.getVar(var.getString())  ==  var)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope.getVar(var.getString())  ==  var)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  parentScope.getVar(var.getString())  ==  var)  {	  }    else    if(!isPropertyAssign    &&    fnScope.getVar(var.getString())!=    var)    {    	non-compiled	[CE]  	83	None	replace
350	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||!isPropertyAssign)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||!isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.contains(var)||!isPropertyAssign)  {	  }    else    if(referenced.contains(var)||!isPropertyAssign)    {    	non-compiled	[CE]  	42	None	replace
351	[BUG]  [BUGGY]  fnScope.removeChild(var,  referenced);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  fnScope.removeChild(var,  referenced);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	fnScope.removeChild(var,  referenced);	  fnScope.removeChild(var);    	non-compiled	[CE]  	46	None	replace
352	[BUG]  [BUGGY]  fnScope.removeChild(lastArg);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  fnScope.removeChild(lastArg);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	fnScope.removeChild(lastArg);	  fnScope.removeChild(var);    	non-compiled	[CE]  	46	None	replace
353	[BUG]  [BUGGY]  fnScope.removeChild(parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  fnScope.removeChild(parent);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	fnScope.removeChild(parent);	  fnScope.removeChild(var);    	non-compiled	[CE]  	46	None	replace
354	[BUG]  [BUGGY]  fnScope.replaceChild(var,  referenced);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  fnScope.replaceChild(var,  referenced);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	fnScope.replaceChild(var,  referenced);	  fnScope.removeChild(var);    	non-compiled	[CE]  	46	None	replace
355	[BUG]  [BUGGY]  fnScope.removeChild(argList.getFirstChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  fnScope.removeChild(argList.getFirstChild());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	fnScope.removeChild(argList.getFirstChild());	  fnScope.removeChild(var);    	non-compiled	[CE]  	46	None	replace
356	[BUG]  [BUGGY]  fnScope.replaceChild(lastArg,  var);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  fnScope.replaceChild(lastArg,  var);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	fnScope.replaceChild(lastArg,  var);	  fnScope.removeChild(var);    	non-compiled	[CE]  	46	None	replace
357	[BUG]  [BUGGY]  NodeUtil.removeChild(argList);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(argList);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(argList);	  NodeUtil.removeChild(lastArg);    	non-compiled	[CE]  	71	None	replace
358	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  ||  referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  ||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  isPropertyAssign  ||  referenced.contains(var))  {	  }    else    if(isPropertyAssign    ||    referenced.contains(var))    {    	non-compiled	[CE]  	58	None	replace
359	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||  referenced.contains(var)&&  mayHaveSecondarySideEffects)  {	  }    else    if(isPropertyAssign    ||    referenced.contains(var))    {    	non-compiled	[CE]  	58	None	replace
360	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.size()  >=  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.size()  >=  0)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.size()  >=  0)  {	  }    else    if(isPropertyAssign    &&    referenced.size()    >    0)    {    	non-compiled	[CE]  	59	None	replace
361	[BUG]  [BUGGY]  }  else  if(referenced.getType()  ==  Token.FUNCTION  ||  isPropertyAssign  &&  referenced!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.getType()  ==  Token.FUNCTION  ||  isPropertyAssign  &&  referenced!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.getType()  ==  Token.FUNCTION  ||  isPropertyAssign  &&  referenced!=  null)  {	  }    else    if(referenced.getType()    ==    Token.FUNCTION    ||    referenced!=    null)    {    	non-compiled	[CE]  	66	None	replace
362	[BUG]  [BUGGY]  }  else  if(isConstructor  ||!referenced.contains(var))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  ||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  ||!referenced.contains(var))  {	  }    else    if(isConstructor    ||!isPropertyAssign)    {    	non-compiled	[CE]  	82	None	replace
363	[BUG]  [BUGGY]  fnScope.removeChild(nameNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  fnScope.removeChild(nameNode);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	fnScope.removeChild(nameNode);	  fnScope.removeChild(var);    	non-compiled	[CE]  	46	None	replace
364	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  preserveFunctionExpressionNames)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  preserveFunctionExpressionNames)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  preserveFunctionExpressionNames)  {	  }    else    if(referenced.contains(var)||    isFunctionExpressionAssign)    {    	non-compiled	[CE]  	10	None	replace
365	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  isFunctionExpressionAssign)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  isFunctionExpressionAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  isFunctionExpressionAssign)  {	  }    else    if(referenced.contains(var)||    isFunctionExpressionAssign)    {    	non-compiled	[CE]  	10	None	replace
366	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  referenced.contains(var)||!referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  referenced.contains(var)||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  referenced.contains(var)||!referenced.contains(var))  {	  }    else    if(referenced!=    null    &&    referenced.contains(var))    {    	non-compiled	[CE]  	18	None	replace
367	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced!=  null)  {	  }    else    if(referenced!=    null    &&    isPropertyAssign)    {    	non-compiled	[CE]  	16	None	replace
368	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&!mayHaveSecondarySideEffects)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&!mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&!mayHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)&&!isPropertyAssign)    {    	non-compiled	[CE]  	43	None	replace
369	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&!canHaveSecondarySideEffects)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&!canHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&!canHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)&&!isPropertyAssign)    {    	non-compiled	[CE]  	43	None	replace
370	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&!isFunctionExpressionAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&!isFunctionExpressionAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&!isFunctionExpressionAssign)  {	  }    else    if(referenced.contains(var)&&!isPropertyAssign)    {    	non-compiled	[CE]  	43	None	replace
371	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&!isPropertyAssign  &&!referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&!isPropertyAssign  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&!isPropertyAssign  &&!referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	44	None	replace
372	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||!isPropertyAssign  &&!referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||!isPropertyAssign  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||!isPropertyAssign  &&!referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	44	None	replace
373	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&!referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&!referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&!referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(!isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	44	None	replace
374	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  &&  referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  &&  referenced.contains(var))  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	73	None	replace
375	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  var.getType()  ==  Token.FUNCTION)  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	73	None	replace
376	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  parentScope!=  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  parentScope!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  parentScope!=  null)  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	73	None	replace
377	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  nameNode  ==  null)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  nameNode  ==  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  nameNode  ==  null)  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	73	None	replace
378	[BUG]  [BUGGY]  Node  fnScope  =  getFunctionScope().getVar(var.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  getFunctionScope().getVar(var.getString());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  getFunctionScope().getVar(var.getString());	  Node    fnScope    =    fnScope.getVar(var.getString());    	non-compiled	[CE]  	47	None	replace
379	[BUG]  [BUGGY]  Node  var  =  fnScope.getVar(var.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  var  =  fnScope.getVar(var.getString());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  var  =  fnScope.getVar(var.getString());	  Node    fnScope    =    fnScope.getVar(var.getString());    	non-compiled	[CE]  	47	None	replace
380	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  isPropertyAssign  &&  referenced.isEmpty())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  isPropertyAssign  &&  referenced.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  isPropertyAssign  &&  referenced.isEmpty())  {	  }    else    if(referenced!=    null    &&    referenced.isEmpty())    {    	non-compiled	[CE]  	86	None	replace
381	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  ref.isEmpty())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  ref.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  ref.isEmpty())  {	  }    else    if(referenced!=    null    &&    referenced.isEmpty())    {    	non-compiled	[CE]  	86	None	replace
382	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  nameNode.isEmpty())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  nameNode.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  nameNode.isEmpty())  {	  }    else    if(referenced!=    null    &&    referenced.isEmpty())    {    	non-compiled	[CE]  	86	None	replace
383	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  &&!referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  ||  isPropertyAssign  &&!referenced.contains(var))  {	  }    else    if(isConstructor    ||    isPropertyAssign)    {    	non-compiled	[CE]  	76	None	replace
384	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  ||!referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  ||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  ||  isPropertyAssign  ||!referenced.contains(var))  {	  }    else    if(isConstructor    ||    isPropertyAssign)    {    	non-compiled	[CE]  	76	None	replace
385	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  &&  parentScope!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  &&  parentScope!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  ||  isPropertyAssign  &&  parentScope!=  null)  {	  }    else    if(isConstructor    ||    isPropertyAssign)    {    	non-compiled	[CE]  	76	None	replace
386	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&  parentScope.optimize(fnScope,  referenced))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  isPropertyAssign  &&  parentScope.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  isPropertyAssign  &&  parentScope.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    &&    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	6	None	replace
387	[BUG]  [BUGGY]  Preconditions.checkState(!isUnreferenced);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(!isUnreferenced);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(!isUnreferenced);	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	51	None	replace
388	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  parentScope.contains(var))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  parentScope.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  parentScope.contains(var))  {	  }    else    if(referenced.isEmpty()    ||    referenced.contains(var))    {    	non-compiled	[CE]  	35	None	replace
389	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  nameNode))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  nameNode))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  nameNode))  {	  }    else    if(referenced.contains(var)&&    referenced.contains(var)||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	69	None	replace
390	[BUG]  [BUGGY]  }  else  if(var  ==  null  ||  var.isEmpty())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var  ==  null  ||  var.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var  ==  null  ||  var.isEmpty())  {	  }    else    if(var.isEmpty())    {    	non-compiled	[CE]  	62	None	replace
391	[BUG]  [BUGGY]  }  else  if(var!=  null  ||  var.isEmpty())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var!=  null  ||  var.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var!=  null  ||  var.isEmpty())  {	  }    else    if(var.isEmpty())    {    	non-compiled	[CE]  	62	None	replace
392	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||!mayHaveSecondarySideEffects)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||!mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||!mayHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)||!isPropertyAssign)    {    	non-compiled	[CE]  	42	None	replace
393	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  ||  preserveFunctionExpressionNames)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  ||  preserveFunctionExpressionNames)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  mayHaveSecondarySideEffects  ||  preserveFunctionExpressionNames)  {	  }    else    if(referenced.contains(var)||    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	9	None	replace
394	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&!callSiteOptimizer.optimize(scope,  referenced))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&!callSiteOptimizer.optimize(scope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&!callSiteOptimizer.optimize(scope,  referenced))  {	  }    else    if(!referenced.contains(var)&&!callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	14	None	replace
395	[BUG]  [BUGGY]  }  else  if(referenced.size()  ==  1  ||  isPropertyAssign)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  ==  1  ||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  ==  1  ||  isPropertyAssign)  {	  }    else    if(referenced.size()    ==    0)    {    	non-compiled	[CE]  	20	None	replace
396	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  references.contains(var)&&  referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  references.contains(var)&&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  references.contains(var)&&  referenced.contains(var))  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	26	None	replace
397	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  isAliased)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  isAliased)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  isAliased)  {	  }    else    if(referenced.contains(var)||    isAliased)    {    	non-compiled	[CE]  	68	None	replace
398	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  isUnreferenced  &&!referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  isUnreferenced  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  isUnreferenced  &&!referenced.contains(var))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	57	None	replace
399	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  &&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  &&  mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  &&  mayHaveSecondarySideEffects)  {	  }    else    if(referenced.isEmpty()    &&    isPropertyAssign)    {    	non-compiled	[CE]  	30	None	replace
400	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  referenced.isEmpty()  &&  isPropertyAssign)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  referenced.isEmpty()  &&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  referenced.isEmpty()  &&  isPropertyAssign)  {	  }    else    if(referenced.isEmpty()    &&    isPropertyAssign)    {    	non-compiled	[CE]  	30	None	replace
401	[BUG]  [BUGGY]  Node  fnScope  =  nameNode.getScope();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  nameNode.getScope();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  nameNode.getScope();	  Node    fnScope    =    fnScope.getScope();    	non-compiled	[CE]  	52	None	replace
402	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkArgument(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    compiler.reportCodeChange();    	non-compiled	[CE]  	72	None	replace
403	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  isUnreferenced)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  isUnreferenced)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  isUnreferenced)  {	  }    else    if(!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	11	None	replace
404	[BUG]  [BUGGY]  }  else  if(var  ==  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var  ==  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var  ==  null)  {	  }    else    if(var!=    null)    {    	non-compiled	[CE]  	67	None	replace
405	[BUG]  [BUGGY]  }  else  if(fnScope!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(fnScope!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(fnScope!=  null)  {	  }    else    if(var!=    null)    {    	non-compiled	[CE]  	67	None	replace
406	[BUG]  [BUGGY]  }  else  if(parentScope!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(parentScope!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(parentScope!=  null)  {	  }    else    if(var!=    null)    {    	non-compiled	[CE]  	67	None	replace
407	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&!isPropertyAssign  &&  referenced.contains(var))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&!isPropertyAssign  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&!isPropertyAssign  &&  referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var))    {    	non-compiled	[CE]  	40	None	replace
408	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  references.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  references.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  references.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var))    {    	non-compiled	[CE]  	40	None	replace
409	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||  referenced!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||  referenced!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||  referenced!=  null)  {	  }    else    if(referenced!=    null    ||    isPropertyAssign)    {    	non-compiled	[CE]  	19	None	replace
410	[BUG]  [BUGGY]  }  else  if(var!=  null  ||  isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var!=  null  ||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var!=  null  ||  isPropertyAssign)  {	  }    else    if(referenced!=    null    ||    isPropertyAssign)    {    	non-compiled	[CE]  	19	None	replace
411	[BUG]  [BUGGY]  }  else  if(!isFunctionAssign  &&  referenced.contains(var)||!referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isFunctionAssign  &&  referenced.contains(var)||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isFunctionAssign  &&  referenced.contains(var)||!referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	80	None	replace
412	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign  &&  parentScope.optimize(fnScope,  referenced))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign  &&  parentScope.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  isPropertyAssign  &&  parentScope.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	37	None	replace
413	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  isPropertyAssign.contains(var)&&  referenced.contains(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  isPropertyAssign.contains(var)&&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  isPropertyAssign.contains(var)&&  referenced.contains(var))  {	  }    else    if(isPropertyAssign.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	39	None	replace
414	[BUG]  [BUGGY]  }  else  if(var!=  null  &&  referenced.isEmpty()  &&!referenced.contains(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var!=  null  &&  referenced.isEmpty()  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var!=  null  &&  referenced.isEmpty()  &&!referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    &&!referenced.contains(var))    {    	non-compiled	[CE]  	32	None	replace
415	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var),  isPropertyAssign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(referenced.contains(var),  isPropertyAssign);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(referenced.contains(var),  isPropertyAssign);	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	48	None	replace
416	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&!referenced.isEmpty())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&!referenced.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&!referenced.isEmpty())  {	  }    else    if(!referenced.isEmpty())    {    	non-compiled	[CE]  	29	None	replace
417	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  isUnreferencedFunctionExpressionNames  &&  parentScope!=  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  isUnreferencedFunctionExpressionNames  &&  parentScope!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  isUnreferencedFunctionExpressionNames  &&  parentScope!=  null)  {	  }    else    if(referenced.contains(var)&&    isUnreferencedFunctionExpressionNames)    {    	non-compiled	[CE]  	75	None	replace
418	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&!isPropertyAssign  &&  fnScope.getVar(var.getString())!=  var)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&!isPropertyAssign  &&  fnScope.getVar(var.getString())!=  var)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&!isPropertyAssign  &&  fnScope.getVar(var.getString())!=  var)  {	  }    else    if(!isPropertyAssign    &&    fnScope.getVar(var.getString())!=    var)    {    	non-compiled	[CE]  	83	None	replace
419	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  fnScope.getVar(var.getString())!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  fnScope.getVar(var.getString())!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  fnScope.getVar(var.getString())!=  null)  {	  }    else    if(!isPropertyAssign    &&    fnScope.getVar(var.getString())!=    var)    {    	non-compiled	[CE]  	83	None	replace
420	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  fnScope.getVar(var.getString())  ==  var)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  fnScope.getVar(var.getString())  ==  var)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  fnScope.getVar(var.getString())  ==  var)  {	  }    else    if(!isPropertyAssign    &&    fnScope.getVar(var.getString())!=    var)    {    	non-compiled	[CE]  	83	None	replace
421	[BUG]  [BUGGY]  }  else  if(referenced!=  null  ||!referenced.contains(var)||  referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  ||!referenced.contains(var)||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  ||!referenced.contains(var)||  referenced.contains(var))  {	  }    else    if(!referenced.contains(var)||    referenced.contains(var))    {    	non-compiled	[CE]  	2	None	replace
422	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  isUnreferenced  &&  referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  isUnreferenced  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  isUnreferenced  &&  referenced.contains(var))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    &&    referenced.contains(var))    {    	non-compiled	[CE]  	3	None	replace
423	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||!referenced.contains(var)&&  isPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||!referenced.contains(var)&&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||!referenced.contains(var)&&  isPropertyAssign)  {	  }    else    if(referenced.isEmpty()    ||!referenced.contains(var))    {    	non-compiled	[CE]  	61	None	replace
424	[BUG]  [BUGGY]  }  else  if(referenced.isUnreferenced())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isUnreferenced())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isUnreferenced())  {	  }    else    if(isUnreferenced)    {    	non-compiled	[CE]  	77	None	replace
425	[BUG]  [BUGGY]  }  else  if(referenced.size()  [Delete]  1)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  [Delete]  1)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  [Delete]  1)  {	  }    else    if(referenced.size()    >    1)    {    	non-compiled	[CE]  	24	None	replace
426	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  canHaveSecondarySideEffects)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  canHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.contains(var)||  canHaveSecondarySideEffects)  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)||    isPropertyAssign)    {    	non-compiled	[CE]  	8	None	replace
427	[BUG]  [BUGGY]  }  else  if(referenced.size()!=  0  ||  isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()!=  0  ||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()!=  0  ||  isPropertyAssign)  {	  }    else    if(referenced.size()    >    0    ||    isPropertyAssign)    {    	non-compiled	[CE]  	23	None	replace
428	[BUG]  [BUGGY]  }  else  if(referenced.size()  >  0  ||  isPropertyAssign  &&  parentScope!=  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >  0  ||  isPropertyAssign  &&  parentScope!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >  0  ||  isPropertyAssign  &&  parentScope!=  null)  {	  }    else    if(referenced.size()    >    0    ||    isPropertyAssign)    {    	non-compiled	[CE]  	23	None	replace
429	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&!referenced.contains(var)&&  referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&!referenced.contains(var)&&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&!referenced.contains(var)&&  referenced.contains(var))  {	  }    else    if(!referenced.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	4	None	replace
430	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&!isPropertyAssign  &&  referenced.contains(var)&&  referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&!isPropertyAssign  &&  referenced.contains(var)&&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&!isPropertyAssign  &&  referenced.contains(var)&&  referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	88	None	replace
431	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope.contains(var)&&  referenced.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope.contains(var)&&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  parentScope.contains(var)&&  referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	88	None	replace
432	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.contains(var)&&  parentScope.contains(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.contains(var)&&  parentScope.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  referenced.contains(var)&&  parentScope.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	88	None	replace
433	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    canHaveSecondarySideEffects)    {    	non-compiled	[CE]  	74	None	replace
434	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  referenced.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&  mayHaveSecondarySideEffects  &&  referenced.contains(var))  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    canHaveSecondarySideEffects)    {    	non-compiled	[CE]  	74	None	replace
435	[BUG]  [BUGGY]  }  else  if(mayHaveSecondarySideEffects  &&  referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(mayHaveSecondarySideEffects  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(mayHaveSecondarySideEffects  &&  referenced.contains(var))  {	  }    else    if(referenced.contains(var)&&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	36	None	replace
436	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  ||  preserveFunctionExpressionNames)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  ||  preserveFunctionExpressionNames)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  ||  preserveFunctionExpressionNames)  {	  }    else    if(referenced.contains(var)&&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	36	None	replace
437	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&!referenced.contains(var)||!referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&!referenced.contains(var)||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&!referenced.contains(var)||!referenced.contains(var))  {	  }    else    if(!referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	54	None	replace
438	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
439	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isFunctionExpressionNames);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isFunctionExpressionNames);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(isPropertyAssign  ||  isFunctionExpressionNames);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
440	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&!referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&!referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&!referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	12	None	replace
441	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
442	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
443	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
444	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var!=  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var!=  null);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var!=  null);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
445	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  var.isEmpty())  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  var.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  var.isEmpty())  {	  }    else    if(referenced.isEmpty()    ||    referenced.isEmpty())    {    	non-compiled	[CE]  	33	None	replace
446	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  referenced.isFunction())  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  referenced.isFunction())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  referenced.isFunction())  {	  }    else    if(referenced.isEmpty()    ||    referenced.isEmpty())    {    	non-compiled	[CE]  	33	None	replace
447	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.mayHaveSecondarySideEffects(var))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.mayHaveSecondarySideEffects(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  NodeUtil.mayHaveSecondarySideEffects(var))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	78	None	replace
448	[BUG]  [BUGGY]  }  else  if(var!=  null  &&  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var!=  null  &&  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var!=  null  &&  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	78	None	replace
449	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectApply(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectApply(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectApply(var))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	78	None	replace
450	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectCall(parentScope))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectCall(parentScope))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectCall(parentScope))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	78	None	replace
451	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  var,  nameNode);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(parent,  var,  nameNode);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(parent,  var,  nameNode);	  NodeUtil.removeChild(parent,    var);    	non-compiled	[CE]  	50	None	replace
452	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  argList);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(parent,  argList);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(parent,  argList);	  NodeUtil.removeChild(parent,    var);    	non-compiled	[CE]  	50	None	replace
453	[BUG]  [BUGGY]  }  else  if(referenced.size()  >  0  ||  NodeUtil.mayHaveSecondarySideEffects(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >  0  ||  NodeUtil.mayHaveSecondarySideEffects(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >  0  ||  NodeUtil.mayHaveSecondarySideEffects(var))  {	  }    else    if(referenced.size()    >    0    ||    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	85	None	replace
454	[BUG]  [BUGGY]  }  else  if(referenced.size()  ==  1  ||  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  ==  1  ||  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  ==  1  ||  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced.size()    >    0    ||    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	85	None	replace
455	[BUG]  [BUGGY]  }  else  if(referenced.size()  >>  0  ||  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >>  0  ||  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >>  0  ||  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced.size()    >    0    ||    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	85	None	replace
456	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&!referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&!referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&!referenced.contains(var)||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&!referenced.contains(var))    {    	non-compiled	[CE]  	53	None	replace
457	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&!isPropertyAssign  &&!referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&!isPropertyAssign  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&!isPropertyAssign  &&!referenced.contains(var))  {	  }    else    if(referenced.contains(var)&&!referenced.contains(var))    {    	non-compiled	[CE]  	53	None	replace
458	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&!mayHaveSecondarySideEffects)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&!mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&!mayHaveSecondarySideEffects)  {	  }    else    if(!referenced.contains(var)&&!isPropertyAssign)    {    	non-compiled	[CE]  	60	None	replace
459	[BUG]  [BUGGY]  }  else  if(!referenced.contains(var)&&!isFunctionAssign)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.contains(var)&&!isFunctionAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.contains(var)&&!isFunctionAssign)  {	  }    else    if(!referenced.contains(var)&&!isPropertyAssign)    {    	non-compiled	[CE]  	60	None	replace
460	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.mayHaveSecondarySideEffects(lastArg))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.mayHaveSecondarySideEffects(lastArg))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  NodeUtil.mayHaveSecondarySideEffects(lastArg))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	79	None	replace
461	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  NodeUtil.isFunctionObjectCall(lastArg))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	79	None	replace
462	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  mayHaveSecondarySideEffects)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  mayHaveSecondarySideEffects)  {	  }    else    if(referenced.isEmpty()    ||    isPropertyAssign)    {    	non-compiled	[CE]  	31	None	replace
463	[BUG]  [BUGGY]  }  else  if(var.isEmpty()  ||  isPropertyAssign)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var.isEmpty()  ||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var.isEmpty()  ||  isPropertyAssign)  {	  }    else    if(referenced.isEmpty()    ||    isPropertyAssign)    {    	non-compiled	[CE]  	31	None	replace
464	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&  parentScope!=  null)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&  parentScope!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  isPropertyAssign  &&  parentScope!=  null)  {	  }    else    if(referenced.isEmpty()    ||    isPropertyAssign)    {    	non-compiled	[CE]  	31	None	replace
465	[BUG]  [BUGGY]  Node  fnScope  =  fnScope.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  fnScope.getFirstChild();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  fnScope.getFirstChild();	  Node    fnScope    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	87	None	replace
466	[BUG]  [BUGGY]  Node  fnScope  =  fnScope.getFunctionNode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  fnScope.getFunctionNode();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  fnScope.getFunctionNode();	  Node    fnScope    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	87	None	replace
467	[BUG]  [BUGGY]  }  else  if(!referenced.isEmpty()  &&  isPropertyAssign  &&  referenced.contains(var))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.isEmpty()  &&  isPropertyAssign  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.isEmpty()  &&  isPropertyAssign  &&  referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    &&    referenced.contains(var))    {    	non-compiled	[CE]  	34	None	replace
468	[BUG]  [BUGGY]  }  else  if(!referenced.isEmpty()  &&  NodeUtil.mayHaveSecondarySideEffects(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.isEmpty()  &&  NodeUtil.mayHaveSecondarySideEffects(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.isEmpty()  &&  NodeUtil.mayHaveSecondarySideEffects(var))  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionDeclaration(var))    {    	non-compiled	[CE]  	64	None	replace
469	[BUG]  [BUGGY]  }  else  if(referenced!=  null  ||!referenced.contains(var)&&!referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  ||!referenced.contains(var)&&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  ||!referenced.contains(var)&&!referenced.contains(var))  {	  }    else    if(!referenced.contains(var)&&!referenced.contains(var))    {    	non-compiled	[CE]  	56	None	replace
470	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  nameNode!=  null  &&  nameNode.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  nameNode!=  null  &&  nameNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  nameNode!=  null  &&  nameNode.getType()  ==  Token.FUNCTION)  {	  }    else    if(!isPropertyAssign    &&    parentScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	84	None	replace
471	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  fnScope!=  null  &&  fnScope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  fnScope!=  null  &&  fnScope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  fnScope!=  null  &&  fnScope.getType()  ==  Token.FUNCTION)  {	  }    else    if(!isPropertyAssign    &&    parentScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	84	None	replace
472	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  scope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  scope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  scope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {	  }    else    if(!isPropertyAssign    &&    parentScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	84	None	replace
473	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  parentScope.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  parentScope.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  parentScope.contains(var))  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var))    {    	non-compiled	[CE]  	41	None	replace
474	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  references.contains(var)&&  referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  references.contains(var)&&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  references.contains(var)&&  referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	88	None	replace
475	[BUG]  [BUGGY]  Preconditions.checkState(argList.contains(var));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(argList.contains(var));  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(argList.contains(var));	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	48	None	replace
476	[BUG]  [BUGGY]  Preconditions.checkArgument(referenced.contains(var));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkArgument(referenced.contains(var));  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkArgument(referenced.contains(var));	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	48	None	replace
477	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  isPropertyAssign  &&!referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  isPropertyAssign  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  isPropertyAssign  &&!referenced.contains(var))  {	  }    else    if(referenced!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	12	None	replace
478	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced!=  null  &&!referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced!=  null  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  referenced!=  null  &&!referenced.contains(var))  {	  }    else    if(referenced!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	12	None	replace
479	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  isUnreferencedFunctionExpressionNames  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  isUnreferencedFunctionExpressionNames  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  isUnreferencedFunctionExpressionNames  ||  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)&&    isUnreferencedFunctionExpressionNames)    {    	non-compiled	[CE]  	75	None	replace
480	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  fnScope.getVar(var.getString())!=  var)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  fnScope.getVar(var.getString())!=  var)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  fnScope.getVar(var.getString())!=  var)  {	  }    else    if(!isPropertyAssign    &&    fnScope.getVar(var.getString())!=    var)    {    	non-compiled	[CE]  	83	None	replace
481	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  fnScope.getVar(var.getString())  ==  var)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  fnScope.getVar(var.getString())  ==  var)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  fnScope.getVar(var.getString())  ==  var)  {	  }    else    if(!isPropertyAssign    &&    fnScope.getVar(var.getString())!=    var)    {    	non-compiled	[CE]  	83	None	replace
482	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)&&  parentScope.getVar(var.getString())!=  fnScope.getVar(var.getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)&&  parentScope.getVar(var.getString())!=  fnScope.getVar(var.getString()))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||  referenced.contains(var)&&  parentScope.getVar(var.getString())!=  fnScope.getVar(var.getString()))  {	  }    else    if(isPropertyAssign    ||    referenced.contains(var))    {    	non-compiled	[CE]  	58	None	replace
483	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)&&!referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||  referenced.contains(var)&&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||  referenced.contains(var)&&!referenced.contains(var))  {	  }    else    if(isPropertyAssign    ||    referenced.contains(var))    {    	non-compiled	[CE]  	58	None	replace
484	[BUG]  [BUGGY]  }  else  if(isUnreferenced  ||  referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isUnreferenced  ||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isUnreferenced  ||  referenced.contains(var))  {	  }    else    if(isPropertyAssign    ||    referenced.contains(var))    {    	non-compiled	[CE]  	58	None	replace
485	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  referenced.contains(var)&&  callSiteOptimizer.optimize(fnScope,  parentScope))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  referenced.contains(var)&&  callSiteOptimizer.optimize(fnScope,  parentScope))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  referenced.contains(var)&&  callSiteOptimizer.optimize(fnScope,  parentScope))  {	  }    else    if(referenced.contains(var)&&    referenced.contains(var)||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	69	None	replace
486	[BUG]  [BUGGY]  Node  fnScope  =  fnScope.getFunctionDeclaration();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  fnScope  =  fnScope.getFunctionDeclaration();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  fnScope  =  fnScope.getFunctionDeclaration();	  Node    fnScope    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	87	None	replace
487	[BUG]  [BUGGY]  }  else  if(var!=  null  &&  referenced.size()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var!=  null  &&  referenced.size()  >  0)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var!=  null  &&  referenced.size()  >  0)  {	  }    else    if(var!=    null)    {    	non-compiled	[CE]  	67	None	replace
488	[BUG]  [BUGGY]  }  else  if(var!=  null  &&  referenced.isEmpty())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var!=  null  &&  referenced.isEmpty())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var!=  null  &&  referenced.isEmpty())  {	  }    else    if(var!=    null)    {    	non-compiled	[CE]  	67	None	replace
489	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  referenced.contains(var)||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  referenced.contains(var)||  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced.contains(var)||    isPropertyAssign    ||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	7	None	replace
490	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&!referenced.contains(var)&&  isPropertyAssign)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&!referenced.contains(var)&&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&!referenced.contains(var)&&  isPropertyAssign)  {	  }    else    if(!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	11	None	replace
491	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&!referenced.contains(var)||!callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&!referenced.contains(var)||!callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&!referenced.contains(var)||!callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(!isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	44	None	replace
492	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  mayHaveSecondarySideEffects)  {	  }    else    if(!isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	44	None	replace
493	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  frumoase);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(isPropertyAssign  frumoase);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(isPropertyAssign  frumoase);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
494	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isVarArgs);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isVarArgs);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(isPropertyAssign  ||  isVarArgs);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	49	None	replace
495	[BUG]  [BUGGY]  Node  argScope  =  fnScope.getVar(var.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  argScope  =  fnScope.getVar(var.getString());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  argScope  =  fnScope.getVar(var.getString());	  Node    fnScope    =    fnScope.getVar(var.getString());    	non-compiled	[CE]  	47	None	replace
496	[BUG]  [BUGGY]  Node  args  =  fnScope.getVar(var.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  args  =  fnScope.getVar(var.getString());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  args  =  fnScope.getVar(var.getString());	  Node    fnScope    =    fnScope.getVar(var.getString());    	non-compiled	[CE]  	47	None	replace
497	[BUG]  [BUGGY]  Node  argList  =  fnScope.getVar(var.getString());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  argList  =  fnScope.getVar(var.getString());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  argList  =  fnScope.getVar(var.getString());	  Node    fnScope    =    fnScope.getVar(var.getString());    	non-compiled	[CE]  	47	None	replace
498	[BUG]  [BUGGY]  Node  argScope  =  parentScope.getVar(var.getString());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Node  argScope  =  parentScope.getVar(var.getString());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Node  argScope  =  parentScope.getVar(var.getString());	  Node    fnScope    =    fnScope.getVar(var.getString());    	non-compiled	[CE]  	47	None	replace
499	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  &&  referenced.contains(var)&&  isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  &&  referenced.contains(var)&&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  ||  isPropertyAssign  &&  referenced.contains(var)&&  isPropertyAssign)  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	90	None	replace
500	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||  scope.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||  scope.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||  scope.contains(var))  {	  }    else    if(referenced.contains(var)||    parentScope.contains(var))    {    	non-compiled	[CE]  	5	None	replace
501	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced!=    null    &&    referenced.contains(var))    {    	non-compiled	[CE]  	18	None	replace
502	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  callSiteOptimizer.optimize(fnScope))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  callSiteOptimizer.optimize(fnScope))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  callSiteOptimizer.optimize(fnScope))  {	  }    else    if(referenced!=    null    &&    referenced.contains(var))    {    	non-compiled	[CE]  	18	None	replace
503	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  argList.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  argList.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  argList.contains(var))  {	  }    else    if(referenced!=    null    &&    referenced.contains(var))    {    	non-compiled	[CE]  	18	None	replace
504	[BUG]  [BUGGY]  }  else  if(referenced.size()  >  0  ||  referenced.contains(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >  0  ||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >  0  ||  referenced.contains(var))  {	  }    else    if(referenced.size()    >    0    &&    referenced.contains(var))    {    	non-compiled	[CE]  	25	None	replace
505	[BUG]  [BUGGY]  }  else  if(referenced.size()!=  2)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()!=  2)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()!=  2)  {	  }    else    if(referenced.size()    >=    0)    {    	non-compiled	[CE]  	22	None	replace
506	[BUG]  [BUGGY]  }  else  if(referenced.size()  >  1  &&  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >  1  &&  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >  1  &&  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced.size()    >    1)    {    	non-compiled	[CE]  	24	None	replace
507	[BUG]  [BUGGY]  }  else  if(referenced.size()  >  0  ||  mayHaveSecondarySideEffects)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >  0  ||  mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >  0  ||  mayHaveSecondarySideEffects)  {	  }    else    if(referenced.size()    >    0    ||    isPropertyAssign)    {    	non-compiled	[CE]  	23	None	replace
508	[BUG]  [BUGGY]  }  else  if(referenced.size()  >  1  ||  isPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >  1  ||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >  1  ||  isPropertyAssign)  {	  }    else    if(referenced.size()    >    0    ||    isPropertyAssign)    {    	non-compiled	[CE]  	23	None	replace
509	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(argList.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    compiler.reportCodeChange();    	non-compiled	[CE]  	72	None	replace
510	[BUG]  [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(lastArg.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    compiler.reportCodeChange();    	non-compiled	[CE]  	72	None	replace
511	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  nameNode.contains(var)||!referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  nameNode.contains(var)||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  nameNode.contains(var)||!referenced.contains(var))  {	  }    else    if(!isPropertyAssign    &&    referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	80	None	replace
512	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.isEmpty()  &&  referenced.contains(var))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.isEmpty()  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  referenced.isEmpty()  &&  referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    &&    referenced.contains(var))    {    	non-compiled	[CE]  	34	None	replace
513	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  referenced.isLocal())  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  referenced.isLocal())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  referenced.isLocal())  {	  }    else    if(referenced.isEmpty()    ||    referenced.isEmpty())    {    	non-compiled	[CE]  	33	None	replace
514	[BUG]  [BUGGY]  }  else  if(referenced.isEmpty()  ||  referenced.isUnreferenced())  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.isEmpty()  ||  referenced.isUnreferenced())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.isEmpty()  ||  referenced.isUnreferenced())  {	  }    else    if(referenced.isEmpty()    ||    referenced.isEmpty())    {    	non-compiled	[CE]  	33	None	replace
515	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.contains(var)||  mayHaveSecondarySideEffects)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  referenced.contains(var)||  mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  referenced.contains(var)||  mayHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)||    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	9	None	replace
516	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkArgument(!isPropertyAssign);	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	51	None	replace
517	[BUG]  [BUGGY]  }  else  if(referenced.size()  >  0  ||  NodeUtil.isFunctionObjectApply(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >  0  ||  NodeUtil.isFunctionObjectApply(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >  0  ||  NodeUtil.isFunctionObjectApply(var))  {	  }    else    if(referenced.size()    >    0    ||    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	85	None	replace
518	[BUG]  [BUGGY]  }  else  if(referenced.size()  >  0  ||  NodeUtil.isFunctionObjectCall(var)&&  isPropertyAssign)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.size()  >  0  ||  NodeUtil.isFunctionObjectCall(var)&&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.size()  >  0  ||  NodeUtil.isFunctionObjectCall(var)&&  isPropertyAssign)  {	  }    else    if(referenced.size()    >    0    ||    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	85	None	replace
519	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||!isFunctionExpressionAssign)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||!isFunctionExpressionAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||!isFunctionExpressionAssign)  {	  }    else    if(referenced.contains(var)||!isPropertyAssign)    {    	non-compiled	[CE]  	42	None	replace
520	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)||!isUnreferenced)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)||!isUnreferenced)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)||!isUnreferenced)  {	  }    else    if(referenced.contains(var)||!isPropertyAssign)    {    	non-compiled	[CE]  	42	None	replace
521	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||  parentScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  ||  parentScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  ||  parentScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {	  }    else    if(!isPropertyAssign    &&    parentScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	84	None	replace
522	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope  ==  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!isPropertyAssign  &&  parentScope  ==  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!isPropertyAssign  &&  parentScope  ==  null  &&  parentScope.getType()  ==  Token.FUNCTION)  {	  }    else    if(!isPropertyAssign    &&    parentScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	84	None	replace
523	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  &&  referenced.contains(var)||  isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  &&  referenced.contains(var)||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  ||  isPropertyAssign  &&  referenced.contains(var)||  isPropertyAssign)  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)||    isPropertyAssign)    {    	non-compiled	[CE]  	8	None	replace
524	[BUG]  [BUGGY]  }  else  if(isFunctionExpressionNames  &&  referenced.contains(var)||  isPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isFunctionExpressionNames  &&  referenced.contains(var)||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isFunctionExpressionNames  &&  referenced.contains(var)||  isPropertyAssign)  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)||    isPropertyAssign)    {    	non-compiled	[CE]  	8	None	replace
525	[BUG]  [BUGGY]  }  else  if(isFunctionExpressionAssign  &&  referenced.contains(var)||  isPropertyAssign)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isFunctionExpressionAssign  &&  referenced.contains(var)||  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isFunctionExpressionAssign  &&  referenced.contains(var)||  isPropertyAssign)  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)||    isPropertyAssign)    {    	non-compiled	[CE]  	8	None	replace
526	[BUG]  [BUGGY]  }  else  if(!referenced.isEmpty()  ||  NodeUtil.isFunctionDeclaration(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.isEmpty()  ||  NodeUtil.isFunctionDeclaration(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.isEmpty()  ||  NodeUtil.isFunctionDeclaration(var))  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionDeclaration(var))    {    	non-compiled	[CE]  	64	None	replace
527	[BUG]  [BUGGY]  }  else  if(var.isEmpty()  &&  NodeUtil.isFunctionDeclaration(var))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var.isEmpty()  &&  NodeUtil.isFunctionDeclaration(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var.isEmpty()  &&  NodeUtil.isFunctionDeclaration(var))  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionDeclaration(var))    {    	non-compiled	[CE]  	64	None	replace
528	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  callSiteOptimizer.optimize(fnScope,  scope))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  callSiteOptimizer.optimize(fnScope,  scope))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  callSiteOptimizer.optimize(fnScope,  scope))  {	  }    else    if(referenced.contains(var)&&    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	27	None	replace
529	[BUG]  [BUGGY]  }  else  if(referenced  ==  null  ||!isPropertyAssign)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ==  null  ||!isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ==  null  ||!isPropertyAssign)  {	  }    else    if(referenced    ==    null)    {    	non-compiled	[CE]  	15	None	replace
530	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign  ||  callSiteOptimizer.optimize(fnScope,  parentScope))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  isPropertyAssign  ||  callSiteOptimizer.optimize(fnScope,  parentScope))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  isPropertyAssign  ||  callSiteOptimizer.optimize(fnScope,  parentScope))  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    ||    callSiteOptimizer.optimize(fnScope,    referenced))    {    	non-compiled	[CE]  	38	None	replace
531	[BUG]  [BUGGY]  }  else  if(referenced  >=  null  &&!referenced.contains(var))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  >=  null  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  >=  null  &&!referenced.contains(var))  {	  }    else    if(referenced!=    null    ||!referenced.contains(var))    {    	non-compiled	[CE]  	65	None	replace
532	[BUG]  [BUGGY]  }  else  if(!referenced.isEmpty()  ||  referenced.contains(var))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.isEmpty()  ||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.isEmpty()  ||  referenced.contains(var))  {	  }    else    if(referenced.isEmpty()    ||    referenced.contains(var))    {    	non-compiled	[CE]  	35	None	replace
533	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  ||  fnScope.getVar(var.getString())!=  var)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  ||  fnScope.getVar(var.getString())!=  var)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  ||  isPropertyAssign  ||  fnScope.getVar(var.getString())!=  var)  {	  }    else    if(isConstructor    ||    isPropertyAssign)    {    	non-compiled	[CE]  	76	None	replace
534	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  ||  fnScope.getVar(var.getString())!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  ||  isPropertyAssign  ||  fnScope.getVar(var.getString())!=  null)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  ||  isPropertyAssign  ||  fnScope.getVar(var.getString())!=  null)  {	  }    else    if(isConstructor    ||    isPropertyAssign)    {    	non-compiled	[CE]  	76	None	replace
535	[BUG]  [BUGGY]  }  else  if(isUnreferenced  &&  isPropertyAssign)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isUnreferenced  &&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isUnreferenced  &&  isPropertyAssign)  {	  }    else    if(isUnreferenced)    {    	non-compiled	[CE]  	77	None	replace
536	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  mayHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	73	None	replace
537	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  canHaveSecondarySideEffects)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  canHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  canHaveSecondarySideEffects)  {	  }    else    if(referenced.contains(var)&&    isPropertyAssign    &&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	73	None	replace
538	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectCall(var)&&  isPropertyAssign)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectCall(var)&&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectCall(var)&&  isPropertyAssign)  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	78	None	replace
539	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectCall(var)||!NodeUtil.mayHaveSecondarySideEffects(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectCall(var)||!NodeUtil.mayHaveSecondarySideEffects(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectCall(var)||!NodeUtil.mayHaveSecondarySideEffects(var))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	78	None	replace
540	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.mayHaveSecondaryFunctionArgs(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.mayHaveSecondaryFunctionArgs(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  NodeUtil.mayHaveSecondaryFunctionArgs(var))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	78	None	replace
541	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  mayHaveSecondarySideEffects)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  mayHaveSecondarySideEffects)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  mayHaveSecondarySideEffects)  {	  }    else    if(referenced!=    null    &&    isPropertyAssign)    {    	non-compiled	[CE]  	16	None	replace
542	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  isPropertyAssign  &&  callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(referenced!=    null    &&    isPropertyAssign)    {    	non-compiled	[CE]  	16	None	replace
543	[BUG]  [BUGGY]  }  else  if(referenced.contains(var)&&!isUnreferencedFunctionExpressionNames)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.contains(var)&&!isUnreferencedFunctionExpressionNames)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.contains(var)&&!isUnreferencedFunctionExpressionNames)  {	  }    else    if(referenced.contains(var)&&!isPropertyAssign)    {    	non-compiled	[CE]  	43	None	replace
544	[BUG]  [BUGGY]  NodeUtil.removeChild(argList,  lastArg);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(argList,  lastArg);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(argList,  lastArg);	  NodeUtil.removeChild(lastArg);    	non-compiled	[CE]  	71	None	replace
545	[BUG]  [BUGGY]  }  else  if(var.isUnreferenced())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(var.isUnreferenced())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(var.isUnreferenced())  {	  }    else    if(var.isEmpty())    {    	non-compiled	[CE]  	62	None	replace
546	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  parentScope.isFunctionDeclaration())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  parentScope.isFunctionDeclaration())  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  parentScope.isFunctionDeclaration())  {	  }    else    if(referenced!=    null    &&    referenced.isEmpty())    {    	non-compiled	[CE]  	86	None	replace
547	[BUG]  [BUGGY]  }  else  if(isUnreferenced  &&  referenced.contains(var)||  referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isUnreferenced  &&  referenced.contains(var)||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isUnreferenced  &&  referenced.contains(var)||  referenced.contains(var))  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var)||    referenced.contains(var))    {    	non-compiled	[CE]  	1	None	replace
548	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg)&&  isPropertyAssign)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg)&&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg)&&  isPropertyAssign)  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	79	None	replace
549	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectApply(lastArg))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectApply(lastArg))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  NodeUtil.isFunctionObjectApply(lastArg))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	79	None	replace
550	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.mayHaveSecondaryFunctionArgs(lastArg))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  NodeUtil.mayHaveSecondaryFunctionArgs(lastArg))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  NodeUtil.mayHaveSecondaryFunctionArgs(lastArg))  {	  }    else    if(referenced!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	79	None	replace
551	[BUG]  [BUGGY]  fnScope.removeChild(var.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  fnScope.removeChild(var.getString());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	fnScope.removeChild(var.getString());	  fnScope.removeChild(var);    	non-compiled	[CE]  	46	None	replace
552	[BUG]  [BUGGY]  fnScope.removeChild(argList);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  fnScope.removeChild(argList);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	fnScope.removeChild(argList);	  fnScope.removeChild(var);    	non-compiled	[CE]  	46	None	replace
553	[BUG]  [BUGGY]  fnScope.removeChild(var.toString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  fnScope.removeChild(var.toString());  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	fnScope.removeChild(var.toString());	  fnScope.removeChild(var);    	non-compiled	[CE]  	46	None	replace
554	[BUG]  [BUGGY]  }  else  if(isPropertyAssign.contains(var)&&  isUnreferencedFunctionExpressionNames(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign.contains(var)&&  isUnreferencedFunctionExpressionNames(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign.contains(var)&&  isUnreferencedFunctionExpressionNames(var))  {	  }    else    if(isPropertyAssign.contains(var)&&    referenced.contains(var))    {    	non-compiled	[CE]  	39	None	replace
555	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  var,  argList);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(parent,  var,  argList);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(parent,  var,  argList);	  NodeUtil.removeChild(parent,    var);    	non-compiled	[CE]  	50	None	replace
556	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  var,  fnScope);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(parent,  var,  fnScope);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(parent,  var,  fnScope);	  NodeUtil.removeChild(parent,    var);    	non-compiled	[CE]  	50	None	replace
557	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  var,  toReplace);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  NodeUtil.removeChild(parent,  var,  toReplace);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	NodeUtil.removeChild(parent,  var,  toReplace);	  NodeUtil.removeChild(parent,    var);    	non-compiled	[CE]  	50	None	replace
558	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&!referenced.contains(var)&&!isPropertyAssign)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&!referenced.contains(var)&&!isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&!referenced.contains(var)&&!isPropertyAssign)  {	  }    else    if(!referenced.contains(var)&&!isPropertyAssign)    {    	non-compiled	[CE]  	60	None	replace
559	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  references.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  references.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  references.contains(var))  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var))    {    	non-compiled	[CE]  	41	None	replace
560	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  isUnreferencedFunctionExpressionNames  &&  referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  isUnreferencedFunctionExpressionNames  &&  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  isUnreferencedFunctionExpressionNames  &&  referenced.contains(var))  {	  }    else    if(isPropertyAssign    &&    referenced.contains(var))    {    	non-compiled	[CE]  	41	None	replace
561	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
562	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.FUNCTION);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkArgument(var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
563	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
564	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(argList.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
565	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.CALL);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.CALL);  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.CALL);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
566	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!referenced.contains(var)||!callSiteOptimizer.optimize(fnScope,  referenced))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&!referenced.contains(var)||!callSiteOptimizer.optimize(fnScope,  referenced))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&!referenced.contains(var)||!callSiteOptimizer.optimize(fnScope,  referenced))  {	  }    else    if(isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	13	None	replace
567	[BUG]  [BUGGY]  }  else  if(isFunctionAssign  &&!referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isFunctionAssign  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isFunctionAssign  &&!referenced.contains(var))  {	  }    else    if(isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	13	None	replace
568	[BUG]  [BUGGY]  }  else  if(isUnreferenced  &&!referenced.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isUnreferenced  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isUnreferenced  &&!referenced.contains(var))  {	  }    else    if(isPropertyAssign    &&!referenced.contains(var))    {    	non-compiled	[CE]  	13	None	replace
569	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&  parentScope.size()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isPropertyAssign  &&  parentScope.size()  >  0)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isPropertyAssign  &&  parentScope.size()  >  0)  {	  }    else    if(isPropertyAssign    &&    referenced.size()    >    0)    {    	non-compiled	[CE]  	59	None	replace
570	[BUG]  [BUGGY]  }  else  if(referenced  ==  null  ||!referenced.contains(var)||!referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ==  null  ||!referenced.contains(var)||!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ==  null  ||!referenced.contains(var)||!referenced.contains(var))  {	  }    else    if(!referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	54	None	replace
571	[BUG]  [BUGGY]  }  else  if(isConstructor  ||!isPropertyAssign  &&!referenced.contains(var))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  ||!isPropertyAssign  &&!referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  ||!isPropertyAssign  &&!referenced.contains(var))  {	  }    else    if(isConstructor    ||!isPropertyAssign)    {    	non-compiled	[CE]  	82	None	replace
572	[BUG]  [BUGGY]  }  else  if(isConstructor  ||!isFunctionExpressionAssign)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(isConstructor  ||!isFunctionExpressionAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(isConstructor  ||!isFunctionExpressionAssign)  {	  }    else    if(isConstructor    ||!isPropertyAssign)    {    	non-compiled	[CE]  	82	None	replace
573	[BUG]  [BUGGY]  }  else  if(!referenced.isEmpty()  ||  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(!referenced.isEmpty()  ||  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(!referenced.isEmpty()  ||  NodeUtil.isFunctionObjectCall(var))  {	  }    else    if(referenced.isEmpty()    &&    NodeUtil.isFunctionObjectCall(var))    {    	non-compiled	[CE]  	63	None	replace
574	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  references.size()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  references.size()  >  0)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  references.size()  >  0)  {	  }    else    if(referenced!=    null    &&    referenced.size()    >    0)    {    	non-compiled	[CE]  	17	None	replace
575	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&  parentScope.size()  >  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&  parentScope.size()  >  0)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&  parentScope.size()  >  0)  {	  }    else    if(referenced!=    null    &&    referenced.size()    >    0)    {    	non-compiled	[CE]  	17	None	replace
576	[BUG]  [BUGGY]  }  else  if(referenced!=  null  &&!referenced.contains(var)||  referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced!=  null  &&!referenced.contains(var)||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced!=  null  &&!referenced.contains(var)||  referenced.contains(var))  {	  }    else    if(!referenced.contains(var)||    referenced.contains(var))    {    	non-compiled	[CE]  	2	None	replace
577	[BUG]  [BUGGY]  }  else  if(referenced  ==  null  ||!referenced.contains(var)||  referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced  ==  null  ||!referenced.contains(var)||  referenced.contains(var))  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced  ==  null  ||!referenced.contains(var)||  referenced.contains(var))  {	  }    else    if(!referenced.contains(var)||    referenced.contains(var))    {    	non-compiled	[CE]  	2	None	replace
578	[BUG]  [BUGGY]  }  else  if(referenced.equals(var)&&  isPropertyAssign)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }      [BUGGY]  }  else  if(referenced.equals(var)&&  isPropertyAssign)  {  [BUGGY]      callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	}  else  if(referenced.equals(var)&&  isPropertyAssign)  {	  }    else    if(referenced.isEmpty()    &&    isPropertyAssign)    {    	non-compiled	[CE]  	30	None	replace
