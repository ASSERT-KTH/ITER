bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.isFunction());  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.isFunction());	      	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope);	      	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Node  c  =  n.getFirstChild();  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Node  c  =  n.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  	6	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  	6	None	replace
6	[BUG]  [BUGGY]  Node  node  =  n.getFirstChild();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Node  node  =  n.getFirstChild();  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Node  node  =  n.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()!=  1);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.getChildCount()!=  1);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.getChildCount()!=  1);	  Preconditions.checkState(n.getChildCount()    ==    1);    	non-compiled	[CE]  	1	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()!=  2);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.getChildCount()!=  2);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.getChildCount()!=  2);	  Preconditions.checkState(n.getChildCount()    ==    2);    	non-compiled	[CE]  	2	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.isFunction());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.isFunction());  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.isFunction());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  parentScope);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  parentScope);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  parentScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getString().equals( "function "));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getString().equals( "function "));  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getString().equals( "function "));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()  >=  3);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.getChildCount()  >=  3);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.getChildCount()  >=  3);	  Preconditions.checkState(n.getChildCount()!=    3);    	non-compiled	[CE]  	5	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parentScope);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parentScope);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parentScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);	      	non-compiled	[CE]  	6	None	replace
