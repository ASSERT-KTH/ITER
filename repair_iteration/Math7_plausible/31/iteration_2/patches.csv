bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  y,  tEnd);  return  eventT;  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  y,  tEnd);  return  eventT;  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  y,  tEnd);  return  eventT;  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    return    eventT;    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	3	None	replace
2	[BUG]  [BUGGY]  int  yDot  =  computeDerivatives(eventT,  tEnd);  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]                  AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  yDot  =  computeDerivatives(eventT,  tEnd);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  yDot  =  computeDerivatives(eventT,  tEnd);	  int    yDot    =    computeDerivatives(eventT,    y);    	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	37	None	replace
3	[BUG]  [BUGGY]  double  yDot  =  computeDerivatives(eventT,  y);  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]                    AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  double  yDot  =  computeDerivatives(eventT,  y);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	double  yDot  =  computeDerivatives(eventT,  y);	  int    yDot    =    computeDerivatives(eventT,    y);    	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	37	None	replace
4	[BUG]  [BUGGY]  boolean  needReset  =  state.resetOccurred(eventT,  yDot);  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  boolean  needReset  =  state.resetOccurred(eventT,  yDot);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	boolean  needReset  =  state.resetOccurred(eventT,  yDot);	  boolean    needReset    =    state.resetOccurred(eventT,    eventY);    	non-compiled	[CE]  cannot  find  symbol  state	6	None	replace
5	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  tDot);  return  eventT;  }  [CE]  cannot  find  symbol  tDot  [FE]                  AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  tDot);  return  eventT;  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  tDot);  return  eventT;  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tEnd,    yDot);    return    eventT;    }    	non-compiled	[CE]  cannot  find  symbol  tDot	41	None	replace
6	[BUG]  [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  yDot,  tEnd,  orderingSign);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  yDot,  tEnd,  orderingSign);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  orderSign  =  computeDerivatives(eventT,  y,  yDot,  tEnd,  orderingSign);	  int    orderSign    =    computeDerivatives(eventT,    y,    yDot,    tEnd);    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	1	None	replace
7	[BUG]  [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  yDot,  tEnd,  order);  [CE]  cannot  find  symbol  order  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  yDot,  tEnd,  order);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  orderSign  =  computeDerivatives(eventT,  y,  yDot,  tEnd,  order);	  int    orderSign    =    computeDerivatives(eventT,    y,    yDot,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  order	1	None	replace
8	[BUG]  [BUGGY]  if(orderingSign)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  isLastStep);  }  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(orderingSign)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  isLastStep);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(orderingSign)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  isLastStep);  }	  if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    }    	non-compiled	[CE]  incompatible  types	25	None	replace
9	[BUG]  [BUGGY]  if(orderingSign)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  tEnd,  isLastStep);  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(orderingSign)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  tEnd,  isLastStep);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(orderingSign)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  tEnd,  isLastStep);  }	  if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    }    	non-compiled	[CE]  incompatible  types	25	None	replace
10	[BUG]  [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  yDot);  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  yDot);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  yDot);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tStart,    yDot);    }    	non-compiled	[CE]  cannot  find  symbol  state	44	None	replace
11	[BUG]  [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  state.length);  computeDerivatives(eventT,  tEnd,  yDot);  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  state.length);  computeDerivatives(eventT,  tEnd,  yDot);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	state.arraycopy(eventT,  0,  y,  0,  state.length);  computeDerivatives(eventT,  tEnd,  yDot);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tStart,    yDot);    }    	non-compiled	[CE]  cannot  find  symbol  state	44	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  tEnd);  computeDerivatives(eventT,  y,  tEnd);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  tEnd);  computeDerivatives(eventT,  y,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	System.arraycopy(eventT,  0,  y,  0,  tEnd);  computeDerivatives(eventT,  y,  tEnd);	  System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	18	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  orderingSign);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  orderingSign);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  orderingSign);	  System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	18	None	replace
14	[BUG]  [BUGGY]  boolean  needsReset  =  currentEvent.reset(eventT,  yEnd);  [CE]  cannot  find  symbol  yEnd  [FE]        NoBracketingException      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  boolean  needsReset  =  currentEvent.reset(eventT,  yEnd);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	boolean  needsReset  =  currentEvent.reset(eventT,  yEnd);	  boolean    needReset    =    currentEvent.reset(eventT,    yDot);    boolean    needsReset    =    currentEvent.reset(eventT,    yDot);    	non-compiled	[CE]  cannot  find  symbol  yEnd	32	None	replace
15	[BUG]  [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t0);  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t0);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t0);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tEnd,    t0);    }    	non-compiled	[CE]  cannot  find  symbol  state	26	None	replace
16	[BUG]  [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t1);  [CE]  cannot  find  symbol  state  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t1);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t1);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tEnd,    t0);    }    	non-compiled	[CE]  cannot  find  symbol  state	26	None	replace
17	[BUG]  [BUGGY]  boolean  needReset  =  state.reset(eventT,  t0);  [CE]  cannot  find  symbol  t0  [FE]            AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  boolean  needReset  =  state.reset(eventT,  t0);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	boolean  needReset  =  state.reset(eventT,  t0);	  boolean    needReset    =    state.reset(eventT,    yEnd);    	non-compiled	[CE]  cannot  find  symbol  t0	19	None	replace
18	[BUG]  [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  yDot,  tEnd);  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  yDot,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  yDot,  tEnd);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t,    yDot,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  state	46	None	replace
19	[BUG]  [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  currentEvent,  yDot,  tEnd);  [CE]  cannot  find  symbol  state  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  currentEvent,  yDot,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  currentEvent,  yDot,  tEnd);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t,    yDot,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  state	46	None	replace
20	[BUG]  [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  yEnd);  [CE]  cannot  find  symbol  yEnd  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  yEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  orderSign  =  computeDerivatives(eventT,  y,  yEnd);	  int    orderSign    =    computeDerivatives(eventT,    y,    tStart);    	non-compiled	[CE]  cannot  find  symbol  yEnd	16	None	replace
21	[BUG]  [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    yDot);    boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);  boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);  [CE]  variable  isFirstStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    yDot);    boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);  boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	                boolean        isLastStep        =        currentEvent.reset(eventT,        yDot);        boolean    isFirstStep    =    currentEvent.reset(eventT,    yDot);    boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);	  	non-compiled	[CE]  variable  isFirstStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	21	None	add
22	[BUG]  [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    yDot);    boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);  boolean  isLastStep  =  currentEvent.reset(eventT,  yDot);  boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);  [CE]  variable  isLastStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    yDot);    boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);  boolean  isLastStep  =  currentEvent.reset(eventT,  yDot);  boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	                boolean        isLastStep        =        currentEvent.reset(eventT,        yDot);        boolean    isFirstStep    =    currentEvent.reset(eventT,    yDot);    boolean  isLastStep  =  currentEvent.reset(eventT,  yDot);  boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);	  	non-compiled	[CE]  variable  isLastStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	21	None	add
23	[BUG]  [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    yDot);    boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);  boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);  boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);  [CE]  variable  isFirstStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    yDot);    boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);  boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);  boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	                boolean        isLastStep        =        currentEvent.reset(eventT,        yDot);        boolean    isFirstStep    =    currentEvent.reset(eventT,    yDot);    boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);  boolean  isFirstStep  =  currentEvent.reset(eventT,  yDot);	  	non-compiled	[CE]  variable  isFirstStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	21	None	add
24	[BUG]  [BUGGY]  boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  [CE]  cannot  find  symbol  needReset  [FE]    AssertionError    [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	boolean  isFirstStep  =  currentEvent.reset(eventT,  y);	          boolean    isLastStep    =    currentEvent.reset(eventT,    y);    boolean    isFirstStep    =    currentEvent.reset(eventT,    y);    	non-compiled	[CE]  cannot  find  symbol  needReset	14	None	replace
25	[BUG]  [BUGGY]  Boolean  isLastStep  =  currentEvent.reset(eventT,  y);  [CE]  cannot  find  symbol  needReset  [FE]        AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  Boolean  isLastStep  =  currentEvent.reset(eventT,  y);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	Boolean  isLastStep  =  currentEvent.reset(eventT,  y);	          boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    Boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    	non-compiled	[CE]  cannot  find  symbol  needReset	33	None	replace
26	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t);  }  [CE]  cannot  find  symbol  t  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tEnd,    yDot);    }    	non-compiled	[CE]  cannot  find  symbol  t	45	None	replace
27	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  tSign);  }  [CE]  cannot  find  symbol  tSign  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  tSign);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  tSign);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tEnd,    yDot);    }    	non-compiled	[CE]  cannot  find  symbol  tSign	45	None	replace
28	[BUG]  [BUGGY]  boolean  needReset  =  currentEvent.reset(eventT,  t0);  [CE]  cannot  find  symbol  t0  [FE]        NoBracketingException      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  boolean  needReset  =  currentEvent.reset(eventT,  t0);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	boolean  needReset  =  currentEvent.reset(eventT,  t0);	  boolean    needReset    =    currentEvent.reset(eventT,    yEnd);    	non-compiled	[CE]  cannot  find  symbol  t0	8	None	replace
29	[BUG]  [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  tEnd,  yDot);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  tEnd,  yDot);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  orderSign  =  computeDerivatives(eventT,  y,  tEnd,  yDot);	  int    orderSign    =    computeDerivatives(eventT,    y,    tEnd,    t0);    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	39	None	replace
30	[BUG]  [BUGGY]  Boolean  needReset  =  currentEvent.reset(eventT,  yEnd);  [CE]  cannot  find  symbol  yEnd  [FE]          NoBracketingException      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  Boolean  needReset  =  currentEvent.reset(eventT,  yEnd);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	Boolean  needReset  =  currentEvent.reset(eventT,  yEnd);	  boolean    needReset    =    currentEvent.reset(eventT,    yDot);    Boolean    needReset    =    currentEvent.reset(eventT,    yDot);    	non-compiled	[CE]  cannot  find  symbol  yEnd	24	None	replace
31	[BUG]  [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  [CE]  variable  isFirstStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	                boolean        isLastStep        =        currentEvent.reset(eventT,        eventY);        boolean    isFirstStep    =    currentEvent.reset(eventT,    eventY);    boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);	  	non-compiled	[CE]  variable  isFirstStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	10	None	add
32	[BUG]  [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  [CE]  variable  isLastStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	                boolean        isLastStep        =        currentEvent.reset(eventT,        eventY);        boolean    isFirstStep    =    currentEvent.reset(eventT,    eventY);    boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);	  	non-compiled	[CE]  variable  isLastStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	10	None	add
33	[BUG]  [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  [CE]  variable  isFirstStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	                boolean        isLastStep        =        currentEvent.reset(eventT,        eventY);        boolean    isFirstStep    =    currentEvent.reset(eventT,    eventY);    boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);	  	non-compiled	[CE]  variable  isFirstStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	10	None	add
34	[BUG]  [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  orderingSign,  y,  tEnd);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  orderingSign,  y,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  orderSign  =  computeDerivatives(eventT,  orderingSign,  y,  tEnd);	  int    orderSign    =    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	30	None	replace
35	[BUG]  [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  yDot,  orderingSign);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  yDot,  orderingSign);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  orderSign  =  computeDerivatives(eventT,  y,  yDot,  orderingSign);	  int    orderSign    =    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	30	None	replace
36	[BUG]  [BUGGY]  boolean  isLastStep  =  currentEvent.reset(eventT,  orderSign);  [CE]  cannot  find  symbol  orderSign  [FE]        AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  boolean  isLastStep  =  currentEvent.reset(eventT,  orderSign);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	boolean  isLastStep  =  currentEvent.reset(eventT,  orderSign);	  boolean    isLastStep    =    currentEvent.reset(eventT,    yEnd);    	non-compiled	[CE]  cannot  find  symbol  orderSign	4	None	replace
37	[BUG]  [BUGGY]  boolean  isLastStep  =  currentEvent.reset(eventT,  t0);  [CE]  cannot  find  symbol  t0  [FE]          AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  boolean  isLastStep  =  currentEvent.reset(eventT,  t0);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	boolean  isLastStep  =  currentEvent.reset(eventT,  t0);	  boolean    isLastStep    =    currentEvent.reset(eventT,    yEnd);    	non-compiled	[CE]  cannot  find  symbol  t0	4	None	replace
38	[BUG]  [BUGGY]  Boolean  isLastStep  =  currentEvent.reset(eventT,  yEnd);  [CE]  cannot  find  symbol  yEnd  [FE]        AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  Boolean  isLastStep  =  currentEvent.reset(eventT,  yEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	Boolean  isLastStep  =  currentEvent.reset(eventT,  yEnd);	          boolean    isLastStep    =    currentEvent.reset(eventT,    yDot);    Boolean    isLastStep    =    currentEvent.reset(eventT,    yDot);    	non-compiled	[CE]  cannot  find  symbol  yEnd	42	None	replace
39	[BUG]  [BUGGY]  double  orderSign  =  computeDerivatives(eventT,  y,  tEnd);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  double  orderSign  =  computeDerivatives(eventT,  y,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	double  orderSign  =  computeDerivatives(eventT,  y,  tEnd);	  double    orderSign    =    computeDerivatives(eventT,    y,    yDot);    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	34	None	replace
40	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tStart,  tEnd);  return  eventT;  }  [CE]  cannot  find  symbol  tStart  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tStart,  tEnd);  return  eventT;  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tStart,  tEnd);  return  eventT;  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tStart,    yDot);    return    eventT;    }    	non-compiled	[CE]  cannot  find  symbol  tStart	40	None	replace
41	[BUG]  [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd);  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  state	31	None	replace
42	[BUG]  [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tStart,  tEnd);  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tStart,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tStart,  tEnd);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  state	31	None	replace
43	[BUG]  [BUGGY]  boolean  isLastStep  =  currentEvent.reset(eventT,  t0,  tEnd);  [CE]  cannot  find  symbol  t0  [FE]          AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  boolean  isLastStep  =  currentEvent.reset(eventT,  t0,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	boolean  isLastStep  =  currentEvent.reset(eventT,  t0,  tEnd);	  boolean    isLastStep    =    currentEvent.reset(eventT,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t0	5	None	replace
44	[BUG]  [BUGGY]  boolean  isLastStep  =  currentEvent.reset(eventT,  tStart,  tEnd);  [CE]  cannot  find  symbol  tStart  [FE]            AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  boolean  isLastStep  =  currentEvent.reset(eventT,  tStart,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	boolean  isLastStep  =  currentEvent.reset(eventT,  tStart,  tEnd);	  boolean    isLastStep    =    currentEvent.reset(eventT,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  tStart	5	None	replace
45	[BUG]  [BUGGY]  if(orderingSign)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  isLastStep);  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(orderingSign)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  isLastStep);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(orderingSign)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  isLastStep);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    }    	non-compiled	[CE]  incompatible  types	17	None	replace
46	[BUG]  [BUGGY]  if(orderingSign)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  tEnd,  isLastStep);  }  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(orderingSign)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  tEnd,  isLastStep);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(orderingSign)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  tEnd,  isLastStep);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    }    	non-compiled	[CE]  incompatible  types	17	None	replace
47	[BUG]  [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    y);    boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  [CE]  variable  isFirstStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    y);    boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	                boolean        isLastStep        =        currentEvent.reset(eventT,        y);        boolean    isFirstStep    =    currentEvent.reset(eventT,    y);    boolean  isFirstStep  =  currentEvent.reset(eventT,  y);	  	non-compiled	[CE]  variable  isFirstStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	13	None	add
48	[BUG]  [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    y);    boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  boolean  isLastStep  =  currentEvent.reset(eventT,  y);  boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  [CE]  variable  isLastStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    y);    boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  boolean  isLastStep  =  currentEvent.reset(eventT,  y);  boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	                boolean        isLastStep        =        currentEvent.reset(eventT,        y);        boolean    isFirstStep    =    currentEvent.reset(eventT,    y);    boolean  isLastStep  =  currentEvent.reset(eventT,  y);  boolean  isFirstStep  =  currentEvent.reset(eventT,  y);	  	non-compiled	[CE]  variable  isLastStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	13	None	add
49	[BUG]  [BUGGY]  yDot  =  computeDerivatives(eventT,  y,  tEnd);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  yDot  =  computeDerivatives(eventT,  y,  tEnd);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	yDot  =  computeDerivatives(eventT,  y,  tEnd);	  yDot    =    computeDerivatives(eventT,    y);    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	36	None	replace
50	[BUG]  [BUGGY]  yDot  =  computeDerivatives(eventT,  eventY,  tEnd);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  yDot  =  computeDerivatives(eventT,  eventY,  tEnd);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	yDot  =  computeDerivatives(eventT,  eventY,  tEnd);	  yDot    =    computeDerivatives(eventT,    y);    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	36	None	replace
51	[BUG]  [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t1,  y,  tEnd);  [CE]  cannot  find  symbol  state  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t1,  y,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t1,  y,  tEnd);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t0,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  state	47	None	replace
52	[BUG]  [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  y,  tEnd);  [CE]  cannot  find  symbol  state  [FE]                  AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  y,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  y,  tEnd);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t0,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  state	47	None	replace
53	[BUG]  [BUGGY]  boolean  needReset  =  currentEvent.resetOccurred(eventT,  eventT);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  boolean  needReset  =  currentEvent.resetOccurred(eventT,  eventT);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	boolean  needReset  =  currentEvent.resetOccurred(eventT,  eventT);	  boolean    needReset    =    eventT.resetOccurred(eventT,    currentEvent);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
54	[BUG]  [BUGGY]  yDot  =  computeDerivatives(eventT,  y,  stateInitialized);  [CE]  cannot  find  symbol  stateInitialized  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  yDot  =  computeDerivatives(eventT,  y,  stateInitialized);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	yDot  =  computeDerivatives(eventT,  y,  stateInitialized);	  yDot    =    computeDerivatives(eventT,    y);    	non-compiled	[CE]  cannot  find  symbol  stateInitialized	36	None	replace
55	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  orderSign);  }  [CE]  cannot  find  symbol  orderSign  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  orderSign);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  orderSign);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tEnd,    t0);    }    	non-compiled	[CE]  cannot  find  symbol  orderSign	26	None	replace
56	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tStart,  tEnd);  }  [CE]  cannot  find  symbol  tStart  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tStart,  tEnd);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tStart,  tEnd);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tEnd,    t0);    }    	non-compiled	[CE]  cannot  find  symbol  tStart	26	None	replace
57	[BUG]  [BUGGY]  boolean  needReset  =  stateInitialized.resetOccurred(currentEvent,  eventY);  [CE]  cannot  find  symbol  stateInitialized  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  boolean  needReset  =  stateInitialized.resetOccurred(currentEvent,  eventY);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	boolean  needReset  =  stateInitialized.resetOccurred(currentEvent,  eventY);	  boolean    needReset    =    eventT.resetOccurred(currentEvent,    eventY);    	non-compiled	[CE]  cannot  find  symbol  stateInitialized	7	None	replace
58	[BUG]  [BUGGY]  Boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  [CE]  cannot  find  symbol  needReset  [FE]        AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  Boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	Boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);	          boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    Boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    	non-compiled	[CE]  cannot  find  symbol  needReset	33	None	replace
59	[BUG]  [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  t0,  tEnd);  [CE]  cannot  find  symbol  t0  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  t0,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  orderSign  =  computeDerivatives(eventT,  y,  t0,  tEnd);	  int    orderSign    =    computeDerivatives(eventT,    y,    tStart,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t0	2	None	replace
60	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  currentEvent.length);  computeDerivatives(eventT,  t,  yDot,  tEnd);  }  [CE]  cannot  find  symbol  length  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  currentEvent.length);  computeDerivatives(eventT,  t,  yDot,  tEnd);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  currentEvent.length);  computeDerivatives(eventT,  t,  yDot,  tEnd);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t,    yDot,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  length	46	None	replace
61	[BUG]  [BUGGY]  luate(eventT,  y,  0,  y.length);  computeDerivatives(eventT,  t,  yDot,  tEnd);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  luate(eventT,  y,  0,  y.length);  computeDerivatives(eventT,  t,  yDot,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	luate(eventT,  y,  0,  y.length);  computeDerivatives(eventT,  t,  yDot,  tEnd);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t,    yDot,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
62	[BUG]  [BUGGY]  if(orderingSign)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  orderingSign);  }  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(orderingSign)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  orderingSign);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(orderingSign)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  orderingSign);  }	  if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    }    	non-compiled	[CE]  incompatible  types	25	None	replace
63	[BUG]  [BUGGY]  if(orderingSign)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  tEnd,  orderingSign);  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(orderingSign)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  tEnd,  orderingSign);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(orderingSign)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  tEnd,  orderingSign);  }	  if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    }    	non-compiled	[CE]  incompatible  types	25	None	replace
64	[BUG]  [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    y);    boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  [CE]  variable  isFirstStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]          boolean    isLastStep    =    currentEvent.reset(eventT,    y);    boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	                boolean        isLastStep        =        currentEvent.reset(eventT,        y);        boolean    isFirstStep    =    currentEvent.reset(eventT,    y);    boolean  isFirstStep  =  currentEvent.reset(eventT,  y);  boolean  isFirstStep  =  currentEvent.reset(eventT,  y);	  	non-compiled	[CE]  variable  isFirstStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	13	None	add
65	[BUG]  [BUGGY]  int  yDot  =  computeDerivatives(eventT,  yEnd);  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]                  AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  yDot  =  computeDerivatives(eventT,  yEnd);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  yDot  =  computeDerivatives(eventT,  yEnd);	  int    yDot    =    computeDerivatives(eventT,    y);    	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	37	None	replace
66	[BUG]  [BUGGY]  int  yDot  =  computeDerivatives(eventT,  y.length);  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]                    AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  yDot  =  computeDerivatives(eventT,  y.length);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  yDot  =  computeDerivatives(eventT,  y.length);	  int    yDot    =    computeDerivatives(eventT,    y);    	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	37	None	replace
67	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  currentEvent.length);  computeDerivatives(eventT,  t,  tEnd);  }  [CE]  cannot  find  symbol  length  [FE]            AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  currentEvent.length);  computeDerivatives(eventT,  t,  tEnd);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  currentEvent.length);  computeDerivatives(eventT,  t,  tEnd);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  length	31	None	replace
68	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  orderSign);  }  [CE]  cannot  find  symbol  t  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  orderSign);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  orderSign);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  t	31	None	replace
69	[BUG]  [BUGGY]  if(orderingSign)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  orderingSign);  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(orderingSign)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  orderingSign);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(orderingSign)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  orderingSign);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    }    	non-compiled	[CE]  incompatible  types	17	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  yDot);  return  eventT;  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  yDot);  return  eventT;  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  yDot);  return  eventT;	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tStart,    yDot);    return    eventT;    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	40	None	replace
71	[BUG]  [BUGGY]  boolean  needReset  =  stateInitialized.resetOccurred(eventT,  yDot);  [CE]  cannot  find  symbol  stateInitialized  [FE]            AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  boolean  needReset  =  stateInitialized.resetOccurred(eventT,  yDot);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	boolean  needReset  =  stateInitialized.resetOccurred(eventT,  yDot);	  boolean    needReset    =    stateInitialized.resetOccurred(eventT,    eventY);    	non-compiled	[CE]  cannot  find  symbol  stateInitialized	28	None	replace
72	[BUG]  [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  tStart,  tEnd,  orderingSign);  [CE]  cannot  find  symbol  tStart  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  tStart,  tEnd,  orderingSign);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  orderSign  =  computeDerivatives(eventT,  y,  tStart,  tEnd,  orderingSign);	  int    orderSign    =    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    	non-compiled	[CE]  cannot  find  symbol  tStart	30	None	replace
73	[BUG]  [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  tStart,  orderingSign);  [CE]  cannot  find  symbol  tStart  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  tStart,  orderingSign);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  orderSign  =  computeDerivatives(eventT,  y,  tStart,  orderingSign);	  int    orderSign    =    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    	non-compiled	[CE]  cannot  find  symbol  tStart	30	None	replace
74	[BUG]  [BUGGY]  boolean  isLastStep  =  currentEvent.reset(eventT,  yDot  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  boolean  isLastStep  =  currentEvent.reset(eventT,  yDot  +  1);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	boolean  isLastStep  =  currentEvent.reset(eventT,  yDot  +  1);	  boolean    isLastStep    =    currentEvent.reset(eventT,    y    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	29	None	replace
75	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t);  return  eventT;  }  [CE]  cannot  find  symbol  t  [FE]                  AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t);  return  eventT;  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t);  return  eventT;  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tEnd,    yDot);    return    eventT;    }    	non-compiled	[CE]  cannot  find  symbol  t	41	None	replace
76	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  currentEvent.length);  computeDerivatives(eventT,  tStart,  yDot);  [CE]  cannot  find  symbol  length  [FE]            AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  currentEvent.length);  computeDerivatives(eventT,  tStart,  yDot);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	System.arraycopy(eventT,  0,  y,  0,  currentEvent.length);  computeDerivatives(eventT,  tStart,  yDot);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tStart,    yDot);    }    	non-compiled	[CE]  cannot  find  symbol  length	44	None	replace
77	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  currentT.length);  computeDerivatives(eventT,  tStart,  yDot);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  currentT.length);  computeDerivatives(eventT,  tStart,  yDot);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	System.arraycopy(eventT,  0,  y,  0,  currentT.length);  computeDerivatives(eventT,  tStart,  yDot);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tStart,    yDot);    }    	non-compiled	[CE]  double  cannot  be  dereferenced	44	None	replace
78	[BUG]  [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  tStart,  yDot,  tEnd);  [CE]  cannot  find  symbol  tStart  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  tStart,  yDot,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  orderSign  =  computeDerivatives(eventT,  y,  tStart,  yDot,  tEnd);	  int    orderSign    =    computeDerivatives(eventT,    y,    yDot,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  tStart	1	None	replace
79	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  tEnd);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	System.arraycopy(eventT,  0,  y,  0,  tEnd);	  System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	18	None	replace
80	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  tEnd);  computeDerivatives(eventT,  y,  tSize);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  tEnd);  computeDerivatives(eventT,  y,  tSize);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	System.arraycopy(eventT,  0,  y,  0,  tEnd);  computeDerivatives(eventT,  y,  tSize);	  System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	18	None	replace
81	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  currentT.length);  computeDerivatives(eventT,  t0,  y,  tEnd);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  currentT.length);  computeDerivatives(eventT,  t0,  y,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	System.arraycopy(eventT,  0,  y,  0,  currentT.length);  computeDerivatives(eventT,  t0,  y,  tEnd);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t0,    y,    tEnd);    }    	non-compiled	[CE]  double  cannot  be  dereferenced	47	None	replace
82	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t1,  y,  tEnd);  [CE]  cannot  find  symbol  t1  [FE]                  AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t1,  y,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t1,  y,  tEnd);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t0,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  t1	47	None	replace
83	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  tEnd);  }  [CE]  cannot  find  symbol  t0  [FE]            AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  tEnd);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  tEnd);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  t0	31	None	replace
84	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  yDot,  tEnd);  return  eventT;  }  [CE]  cannot  find  symbol  t  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  yDot,  tEnd);  return  eventT;  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  yDot,  tEnd);  return  eventT;  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    return    eventT;    }    	non-compiled	[CE]  cannot  find  symbol  t	3	None	replace
85	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  eventY,  tEnd);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  eventY,  tEnd);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  eventY,  tEnd);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tStart,    yDot);    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	44	None	replace
86	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t1,  y,  tEnd);  }  [CE]  cannot  find  symbol  t1  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t1,  y,  tEnd);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t1,  y,  tEnd);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t0,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  t1	47	None	replace
87	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t2,  y,  tEnd);  }  [CE]  cannot  find  symbol  t2  [FE]                  AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t2,  y,  tEnd);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t2,  y,  tEnd);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t0,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  t2	47	None	replace
88	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  y,  tEnd);  [CE]  cannot  find  symbol  t0  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  y,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  y,  tEnd);	  System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t0	18	None	replace
89	[BUG]  [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  t0,  yDot,  tEnd);  [CE]  cannot  find  symbol  t0  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  t0,  yDot,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  orderSign  =  computeDerivatives(eventT,  y,  t0,  yDot,  tEnd);	  int    orderSign    =    computeDerivatives(eventT,    y,    yDot,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t0	1	None	replace
90	[BUG]  [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  t1,  yDot,  tEnd);  [CE]  cannot  find  symbol  t1  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  t1,  yDot,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  orderSign  =  computeDerivatives(eventT,  y,  t1,  yDot,  tEnd);	  int    orderSign    =    computeDerivatives(eventT,    y,    yDot,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t1	1	None	replace
91	[BUG]  [BUGGY]  Boolean  isLastStep  =  currentEvent.reset(eventT,  yDot);  [CE]  cannot  find  symbol  needReset  [FE]        AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  Boolean  isLastStep  =  currentEvent.reset(eventT,  yDot);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	Boolean  isLastStep  =  currentEvent.reset(eventT,  yDot);	          boolean    isLastStep    =    currentEvent.reset(eventT,    yDot);    Boolean    isLastStep    =    currentEvent.reset(eventT,    yDot);    	non-compiled	[CE]  cannot  find  symbol  needReset	42	None	replace
92	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  tEnd);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  tEnd);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  tEnd);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tEnd,    t0);    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	26	None	replace
93	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tStart,  yDot,  orderingSign);  }  [CE]  cannot  find  symbol  tStart  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tStart,  yDot,  orderingSign);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tStart,  yDot,  orderingSign);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    }    	non-compiled	[CE]  cannot  find  symbol  tStart	17	None	replace
94	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  yDot,  orderingSign);  }  [CE]  cannot  find  symbol  t  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  yDot,  orderingSign);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  yDot,  orderingSign);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    }    	non-compiled	[CE]  cannot  find  symbol  t	17	None	replace
95	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  yDot);  return  eventT;  }  [CE]  cannot  find  symbol  t0  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  yDot);  return  eventT;  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  yDot);  return  eventT;  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    tStart,    yDot);    return    eventT;    }    	non-compiled	[CE]  cannot  find  symbol  t0	40	None	replace
96	[BUG]  [BUGGY]  boolean  needsReset  =  currentEvent.reset(eventT,  yDot);  [CE]  cannot  find  symbol  needReset  [FE]        NoBracketingException      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  boolean  needsReset  =  currentEvent.reset(eventT,  yDot);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	boolean  needsReset  =  currentEvent.reset(eventT,  yDot);	  boolean    needReset    =    currentEvent.reset(eventT,    yDot);    boolean    needsReset    =    currentEvent.reset(eventT,    yDot);    	non-compiled	[CE]  cannot  find  symbol  needReset	32	None	replace
97	[BUG]  [BUGGY]  [FE]  NoBracketingException  [FE]          NoBracketingException      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  Boolean  needReset  =  currentEvent.reset(eventT,  yDot);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	add	Boolean  needReset  =  currentEvent.reset(eventT,  yDot);	  boolean    needReset    =    currentEvent.reset(eventT,    yDot);    Boolean    needReset    =    currentEvent.reset(eventT,    yDot);    	compilable	  [FE]  NoBracketingException  	24	2	replace
98	[BUG]  [BUGGY]  Boolean  needReset  =  currentEvent.reset(eventT,  yDot);  [FE]  NoBracketingException  [FE]          NoBracketingException      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  Boolean  needReset  =  currentEvent.reset(eventT,  yDot);  [BUGGY]      if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	Boolean  needReset  =  currentEvent.reset(eventT,  yDot);	  boolean    needReset    =    currentEvent.reset(eventT,    yDot);    Boolean    needReset    =    currentEvent.reset(eventT,    yDot);    	compilable	  [FE]  NoBracketingException  	24	2	replace
99	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  orderingSign);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  orderingSign);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  orderingSign);  }	  if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	25	None	replace
100	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  yDot,  tEnd);  }  [CE]  cannot  find  symbol  t0  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  yDot,  tEnd);  }  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  yDot,  tEnd);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    t,    yDot,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  t0	46	None	replace
101	[BUG]  [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  tEnd,  t1);  [CE]  cannot  find  symbol  t1  [FE]              AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  tEnd,  t1);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  orderSign  =  computeDerivatives(eventT,  y,  tEnd,  t1);	  int    orderSign    =    computeDerivatives(eventT,    y,    tEnd,    t0);    	non-compiled	[CE]  cannot  find  symbol  t1	39	None	replace
102	[BUG]  [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  t1,  tEnd);  [CE]  cannot  find  symbol  t1  [FE]                AssertionError      [CONTEXT]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }      [BUGGY]  int  orderSign  =  computeDerivatives(eventT,  y,  t1,  tEnd);  [BUGGY]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	int  orderSign  =  computeDerivatives(eventT,  y,  t1,  tEnd);	  int    orderSign    =    computeDerivatives(eventT,    y,    tStart,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t1	2	None	replace
