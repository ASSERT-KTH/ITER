bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  AssertionError.show(eventsInitialized,  isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime()  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  AssertionError.show(eventsInitialized,  isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime()  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	AssertionError.show(eventsInitialized,  isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime()	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.get    	non-compiled	[CE]  ';'  expected	30	None	replace
2	[BUG]  [BUGGY]  AssertionError.show(eventsInitialized,  isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.get  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  AssertionError.show(eventsInitialized,  isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.get  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	AssertionError.show(eventsInitialized,  isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.get	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.get    	non-compiled	[CE]  ';'  expected	30	None	replace
3	[BUG]  [BUGGY]  int  orderingSign  =  state.size();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  orderingSign  =  state.size();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  orderingSign  =  state.size();	  int    orderingSign    =    es0.size();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
4	[BUG]  [BUGGY]  int  orderingSign  =  es1.size();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  orderingSign  =  es1.size();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  orderingSign  =  es1.size();	  int    orderingSign    =    es0.size();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
5	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(orderingSign!=  null)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(orderingSign!=  null)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue	  if(orderingSign!=    null)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.contains(es1))    {    continue    	non-compiled	[CE]  ';'  expected	28	None	replace
6	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1)  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(orderingSign!=  null)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1)  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(orderingSign!=  null)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1)	  if(orderingSign!=    null)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.contains(es1))    {    continue    	non-compiled	[CE]  ')'  expected	28	None	replace
7	[BUG]  [BUGGY]  final  int  stepStart  =  state.evaluateStep(currentT);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  stepStart  =  state.evaluateStep(currentT);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  stepStart  =  state.evaluateStep(currentT);	  final    int    stepStart    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
8	[BUG]  [BUGGY]  final  EventState  remaining  =  state.getEventTime();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  EventState  remaining  =  state.getEventTime();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  EventState  remaining  =  state.getEventTime();	  final    EventState    remaining    =    remaining.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
9	[BUG]  [BUGGY]  final  EventState  remaining  =  eventT.getEventTime();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  EventState  remaining  =  eventT.getEventTime();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  EventState  remaining  =  eventT.getEventTime();	  final    EventState    remaining    =    remaining.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
10	[BUG]  [BUGGY]  int  orderSign  =  state.getOrderingSign();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  orderSign  =  state.getOrderingSign();  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  orderSign  =  state.getOrderingSign();	  int    orderSign    =    es0.getOrderingSign();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
11	[BUG]  [BUGGY]  int  orderSign  =  es1.getOrderingSign();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  orderSign  =  es1.getOrderingSign();  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  orderSign  =  es1.getOrderingSign();	  int    orderSign    =    es0.getOrderingSign();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
12	[BUG]  [BUGGY]  EventState[]  other  =  eventsStates.get(i);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  EventState[]  other  =  eventsStates.get(i);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	EventState[]  other  =  eventsStates.get(i);	  if(!isLastStep)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i,    state);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
13	[BUG]  [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(ignoredEvents[i]  ==  null)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(ignoredEvents[i]  ==  null)  {  break;  }  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(ignoredEvents[i]  ==  null)  {  break;  }  }	  if(isLastStep)    {    for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
14	[BUG]  [BUGGY]  final  int  stepStart  =  es1.getStep();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  stepStart  =  es1.getStep();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  stepStart  =  es1.getStep();	  final    int    stepStart    =    es0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
15	[BUG]  [BUGGY]  final  int  stepStart  =  state.getStep();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  stepStart  =  state.getStep();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  stepStart  =  state.getStep();	  final    int    stepStart    =    es0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderingSign.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(int  i  =  0;  i  <  orderingSign.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	for(int  i  =  0;  i  <  orderingSign.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }	  for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
17	[BUG]  [BUGGY]  EventState[]  remaining  =  eventsStates.get(0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  EventState[]  remaining  =  eventsStates.get(0);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	EventState[]  remaining  =  eventsStates.get(0);	  EventState[]    remaining    =    eventsStates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  EventState[]  remaining  =  eventsStates.get(state);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  EventState[]  remaining  =  eventsStates.get(state);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	EventState[]  remaining  =  eventsStates.get(state);	  EventState[]    remaining    =    eventsStates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  EventState[]  otherStates  =  state.getStatesInitialized();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  EventState[]  otherStates  =  state.getStatesInitialized();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	EventState[]  otherStates  =  state.getStatesInitialized();	  EventState[]    otherStates    =    state.getStates();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  state.evaluate(eventT);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  state.evaluate(eventT);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	state.evaluate(eventT);	  state.evaluate(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
21	[BUG]  [BUGGY]  state.evaluate(occuringSign);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  state.evaluate(occuringSign);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	state.evaluate(occuringSign);	  state.evaluate(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
22	[BUG]  [BUGGY]  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue	  if(orderingSign)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.get(i)!=    eventT)    {    continue    	non-compiled	[CE]  ';'  expected	43	None	replace
23	[BUG]  [BUGGY]  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)  ==  eventT)  {  continue  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)  ==  eventT)  {  continue  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)  ==  eventT)  {  continue	  if(orderingSign)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.get(i)!=    eventT)    {    continue    	non-compiled	[CE]  ';'  expected	43	None	replace
24	[BUG]  [BUGGY]  int  orderSign  =  state.getEventTime();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  orderSign  =  state.getEventTime();  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  orderSign  =  state.getEventTime();	  int    orderSign    =    es0.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
25	[BUG]  [BUGGY]  int  orderSign  =  es1.getEventTime();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  orderSign  =  es1.getEventTime();  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  orderSign  =  es1.getEventTime();	  int    orderSign    =    es0.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
26	[BUG]  [BUGGY]  final  int  isLastStep  =  orderingSign?  isLastStep.size()  :  0;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  orderingSign?  isLastStep.size()  :  0;  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  orderingSign?  isLastStep.size()  :  0;	  final    int    isLastStep    =    isLastStep?    orderingSign.size()    :    0;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
27	[BUG]  [BUGGY]  if(!isLastStep)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(!isLastStep)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(!isLastStep)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue	  if(isLastStep)    {    for(int    i    =    0;    i    <    remaining.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.get(i)!=    eventT)    {    continue    	non-compiled	[CE]  ';'  expected	2	None	replace
28	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(!isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(!isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }	  if(!isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
29	[BUG]  [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue	  if(!isLastStep)    {    for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    continue    	non-compiled	[CE]  ';'  expected	25	None	replace
30	[BUG]  [BUGGY]  int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue;  }  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue;  }	  for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    continue;    }    	non-compiled	[CE]  >  expected	39	None	replace
31	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(currentT);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.evaluateStep(currentT);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  stepStart  =  state.evaluateStep(currentT);	  int    stepStart    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
32	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventStates)  {  return  remaining  *  Double.compare(event.getEventTime(),  es1.getEventTime());  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventStates)  {  return  remaining  *  Double.compare(event.getEventTime(),  es1.getEventTime());  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(final  EventState  remaining  :  eventStates)  {  return  remaining  *  Double.compare(event.getEventTime(),  es1.getEventTime());  }	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    return    remaining    *    Double.compare(event.getEventTime(),    es1.getEventTime());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
33	[BUG]  [BUGGY]  state.evaluateStep(eventT);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  state.evaluateStep(eventT);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	state.evaluateStep(eventT);	  state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
34	[BUG]  [BUGGY]  if(!isLastStep)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(!isLastStep)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(!isLastStep)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue	  if(isLastStep)    {    for(int    i    =    0;    i    <    remaining.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.contains(es1))    {    continue    	non-compiled	[CE]  ';'  expected	17	None	replace
35	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  remaining.size()  :  eventsStates.size();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  isLastStep?  remaining.size()  :  eventsStates.size();  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  remaining.size()  :  eventsStates.size();	  final    int    isLastStep    =    isLastStep?    eventsStates.size()    :    remaining.size();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
36	[BUG]  [BUGGY]  int  stepStart  =  state.getStep()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.getStep()  -  1;  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  stepStart  =  state.getStep()  -  1;	  int    stepStart    =    state.getStep();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  int  stepStart  =  state.getStep()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.getStep()  +  1;  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  stepStart  =  state.getStep()  +  1;	  int    stepStart    =    state.getStep();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
38	[BUG]  [BUGGY]  luateStep(remainingEvents)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime()  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  luateStep(remainingEvents)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime()  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	luateStep(remainingEvents)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime()  }	  luateStep(remainingEvents)    {    if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    eventT    =    remaining.getEventTime()    	non-compiled	[CE]  ';'  expected	23	None	replace
39	[BUG]  [BUGGY]  luateStep(remainingEvents)  {  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime()  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  luateStep(remainingEvents)  {  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime()  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	luateStep(remainingEvents)  {  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime()  }	  luateStep(remainingEvents)    {    if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    eventT    =    remaining.getEventTime()    	non-compiled	[CE]  ';'  expected	23	None	replace
40	[BUG]  [BUGGY]  Integer  orderHandler  =  eventStates.get(orderingSign);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  Integer  orderHandler  =  eventStates.get(orderingSign);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	Integer  orderHandler  =  eventStates.get(orderingSign);	  Integer    orderHandler    =    eventStates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
41	[BUG]  [BUGGY]  Integer  orderHandler  =  eventStates.get(0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  Integer  orderHandler  =  eventStates.get(0);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	Integer  orderHandler  =  eventStates.get(0);	  Integer    orderHandler    =    eventStates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
42	[BUG]  [BUGGY]  luateStep(interpolator)  {  for(final  EventState  remaining  :  eventsInitialized)  {  occuringEvents.add(remaining);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  luateStep(interpolator)  {  for(final  EventState  remaining  :  eventsInitialized)  {  occuringEvents.add(remaining);  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	luateStep(interpolator)  {  for(final  EventState  remaining  :  eventsInitialized)  {  occuringEvents.add(remaining);  }	  luateStep(interpolator)    {    for(final    EventState    remaining    :    eventStates)    {    occuringEvents.add(remaining);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
43	[BUG]  [BUGGY]  luateStep(remainingEvents)  {  for(final  EventState  remaining  :  remaining.getEventTime())  {  eventT  =  remaining.getEventTime();  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  luateStep(remainingEvents)  {  for(final  EventState  remaining  :  remaining.getEventTime())  {  eventT  =  remaining.getEventTime();  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	luateStep(remainingEvents)  {  for(final  EventState  remaining  :  remaining.getEventTime())  {  eventT  =  remaining.getEventTime();  }	  luateStep(remainingEvents)    {    if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    eventT    =    remaining.getEventTime();    }    	non-compiled	[CE]  ';'  expected	24	None	replace
44	[BUG]  [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(ignoredEvents[i]  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(ignoredEvents[i]  ==  null)  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(ignoredEvents[i]  ==  null)  {  continue;  }	  if(isLastStep)    {    for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
45	[BUG]  [BUGGY]  final  int  isLastStep  =  interpolator.evaluateStep(es0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  interpolator.evaluateStep(es0);  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  interpolator.evaluateStep(es0);	  final    int    isLastStep    =    es0.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
46	[BUG]  [BUGGY]  final  int  isLastStep  =  state.evaluateStep(interpolator,  orderingSign);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  state.evaluateStep(interpolator,  orderingSign);  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  state.evaluateStep(interpolator,  orderingSign);	  final    int    isLastStep    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
47	[BUG]  [BUGGY]  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }	  if(eventsStates.contains(interpolator))    {    for(final    EventState    remaining    :    eventsStates)    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
48	[BUG]  [BUGGY]  if(eventsStates.contains(eventT))  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsStates.contains(eventT))  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(eventsStates.contains(eventT))  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }	  if(eventsStates.contains(interpolator))    {    for(final    EventState    remaining    :    eventsStates)    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
49	[BUG]  [BUGGY]  int  orderSign  =  state.size();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  orderSign  =  state.size();  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  orderSign  =  state.size();	  int    orderSign    =    orderingSign.size();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
50	[BUG]  [BUGGY]  int  orderSign  =  event.size();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  orderSign  =  event.size();  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  orderSign  =  event.size();	  int    orderSign    =    orderingSign.size();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
51	[BUG]  [BUGGY]  Integer  orderStart  =  state.getEventTime();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  Integer  orderStart  =  state.getEventTime();  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	Integer  orderStart  =  state.getEventTime();	  Integer    orderStart    =    eventT.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
52	[BUG]  [BUGGY]  Integer  orderStart  =  eventT.getEventTime()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  Integer  orderStart  =  eventT.getEventTime()  -  1;  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	Integer  orderStart  =  eventT.getEventTime()  -  1;	  Integer    orderStart    =    eventT.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
53	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  remaining  :  eventsStates.length);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  isLastStep?  remaining  :  eventsStates.length);  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  remaining  :  eventsStates.length);	  final    int    isLastStep    =    isLastStep?    remaining    :    eventsStates);    	non-compiled	[CE]  ';'  expected	7	None	replace
54	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  remaining  :  eventsStates.size());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  isLastStep?  remaining  :  eventsStates.size());  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  remaining  :  eventsStates.size());	  final    int    isLastStep    =    isLastStep?    remaining    :    eventsStates);    	non-compiled	[CE]  ';'  expected	7	None	replace
55	[BUG]  [BUGGY]  int  stepSize  =  state.evaluateStep(remainingEvents,  orderingSign);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  state.evaluateStep(remainingEvents,  orderingSign);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  stepSize  =  state.evaluateStep(remainingEvents,  orderingSign);	  int    stepSize    =    state.evaluateStep(remainingEvents);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
56	[BUG]  [BUGGY]  final  int  isLastStep  =  0;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  0;  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  0;	  final    int    isLastStep    =    isLastStep;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
57	[BUG]  [BUGGY]  final  int  isLastStep  =  orderingSign;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  orderingSign;  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  orderingSign;	  final    int    isLastStep    =    isLastStep;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
58	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(orderingSign!=  null)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(orderingSign!=  null)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue	  if(orderingSign!=    null)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.get(i)!=    eventT)    {    continue    	non-compiled	[CE]  ';'  expected	22	None	replace
59	[BUG]  [BUGGY]  AllEvents.add(eventsStates.size(),  orderingSign);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  AllEvents.add(eventsStates.size(),  orderingSign);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	AllEvents.add(eventsStates.size(),  orderingSign);	  if(orderingSign)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
60	[BUG]  [BUGGY]  occuringEvents.add(i);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  occuringEvents.add(i);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	occuringEvents.add(i);	  if(orderingSign)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
61	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  eventT.getEventTime();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  eventT.getEventTime();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  eventT.getEventTime();	  final    int    isLastStep    =    isLastStep?    eventsStates.size()    :    remaining.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
62	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  remaining.size()  :  eventT.getEventTime();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  isLastStep?  remaining.size()  :  eventT.getEventTime();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  remaining.size()  :  eventT.getEventTime();	  final    int    isLastStep    =    isLastStep?    eventsStates.size()    :    remaining.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
63	[BUG]  [BUGGY]  int  orderSign  =  this.orderingEvents.size();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  orderSign  =  this.orderingEvents.size();  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  orderSign  =  this.orderingEvents.size();	  int    orderSign    =    orderingSign.size();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
64	[BUG]  [BUGGY]  if(orderingSign  ==  null)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(orderingSign  ==  null)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(orderingSign  ==  null)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue	  if(orderingSign!=    null)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.contains(es1))    {    continue    	non-compiled	[CE]  ';'  expected	28	None	replace
65	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  state.size();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  state.size();  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  state.size();	  final    int    isLastStep    =    isLastStep?    eventsStates.size()    :    remaining.size();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
66	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  eventStates.size();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  eventStates.size();  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  eventStates.size();	  final    int    isLastStep    =    isLastStep?    eventsStates.size()    :    remaining.size();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
67	[BUG]  [BUGGY]  Integer  orderHandler  =  es1.getEventHandler();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  Integer  orderHandler  =  es1.getEventHandler();  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	Integer  orderHandler  =  es1.getEventHandler();	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.get    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
68	[BUG]  [BUGGY]  final  int  isLastStep  =  es1.evaluateStep(currentEvent);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  es1.evaluateStep(currentEvent);  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  es1.evaluateStep(currentEvent);	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.get    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
69	[BUG]  [BUGGY]  efectuareEvents.add(eventsStates.size()  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  efectuareEvents.add(eventsStates.size()  -  1);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	efectuareEvents.add(eventsStates.size()  -  1);	  if(orderingSign)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
70	[BUG]  [BUGGY]  efectuareEvents.add(eventsStates.size());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  efectuareEvents.add(eventsStates.size());  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	efectuareEvents.add(eventsStates.size());	  if(orderingSign)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
71	[BUG]  [BUGGY]  int  stepSize  =  state.evaluateStep(interpolator);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  state.evaluateStep(interpolator);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  stepSize  =  state.evaluateStep(interpolator);	  int    stepSize    =    state.evaluateStep(remainingEvents);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
72	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.get  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(!isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.get  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(!isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.get	  if(!isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    	non-compiled	[CE]  ')'  expected	21	None	replace
73	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(!isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(!isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  }	  if(!isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
74	[BUG]  [BUGGY]  final  int  isLastStep  =  state.evaluateStep(interpolator,  remaining);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  state.evaluateStep(interpolator,  remaining);  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  state.evaluateStep(interpolator,  remaining);	  final    int    isLastStep    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
75	[BUG]  [BUGGY]  if(orderingSign)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(orderingSign)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(orderingSign)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
76	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(eventsStates!=  null)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }	  if(eventsStates.contains(interpolator))    {    for(final    EventState    remaining    :    eventsStates)    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
77	[BUG]  [BUGGY]  luateStep(eventT)  {  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime()  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  luateStep(eventT)  {  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime()  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	luateStep(eventT)  {  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime()	  luateStep(remainingEvents)    {    if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    eventT    =    remaining.getEventTime()    	non-compiled	[CE]  ';'  expected	23	None	replace
78	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  state.getEventTime();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  state.getEventTime();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  state.getEventTime();	  final    int    isLastStep    =    isLastStep?    eventsStates.size()    :    remaining.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(ignoredEvents[i]  ==  null)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(ignoredEvents[i]  ==  null)  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(ignoredEvents[i]  ==  null)  {  break;  }	  for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
80	[BUG]  [BUGGY]  Integer  orderHandler  =  eventsStates.get(orderingSign);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  Integer  orderHandler  =  eventsStates.get(orderingSign);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	Integer  orderHandler  =  eventsStates.get(orderingSign);	  Integer    orderHandler    =    eventStates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
81	[BUG]  [BUGGY]  Integer  orderStart  =  es0.getEventTime();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  Integer  orderStart  =  es0.getEventTime();  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	Integer  orderStart  =  es0.getEventTime();	  Integer    orderStart    =    eventT.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
82	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(final  EventState  remaining  :  eventStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  }	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
83	[BUG]  [BUGGY]  int  stepStart  =  state.getStep(remainingSign);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.getStep(remainingSign);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  stepStart  =  state.getStep(remainingSign);	  int    stepStart    =    state.getStep();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
84	[BUG]  [BUGGY]  if(orderingSign)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(orderingSign)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(orderingSign)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  }	  if(isLastStep)    {    for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
85	[BUG]  [BUGGY]  Integer  orderingSign  =  eventsInitialized.get(interpolator);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  Integer  orderingSign  =  eventsInitialized.get(interpolator);  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	Integer  orderingSign  =  eventsInitialized.get(interpolator);	  if(orderingSign)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.get(i)!=    eventT)    {    continue    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
86	[BUG]  [BUGGY]  Integer  orderingSign  =  event.getOrderingSign();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  Integer  orderingSign  =  event.getOrderingSign();  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	Integer  orderingSign  =  event.getOrderingSign();	  if(orderingSign)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.get(i)!=    eventT)    {    continue    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
87	[BUG]  [BUGGY]  final  int  isLastStep  =  es1.evaluateStep(interpolator);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  es1.evaluateStep(interpolator);  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  es1.evaluateStep(interpolator);	  final    int    isLastStep    =    es0.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(ignoredEvents[i]  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(ignoredEvents[i]  ==  null)  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(ignoredEvents[i]  ==  null)  {  continue;  }	  for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
89	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  remaining  :  0);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  isLastStep?  remaining  :  0);  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  remaining  :  0);	  final    int    isLastStep    =    isLastStep?    remaining    :    eventsStates);    	non-compiled	[CE]  ';'  expected	7	None	replace
90	[BUG]  [BUGGY]  EventState[]  remaining  =  eventsStates.get(orderingSign);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  EventState[]  remaining  =  eventsStates.get(orderingSign);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	EventState[]  remaining  =  eventsStates.get(orderingSign);	  EventState[]    remaining    =    eventsStates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
91	[BUG]  [BUGGY]  EventState[]  remaining  =  eventsStates.get(interpolator);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  EventState[]  remaining  =  eventsStates.get(interpolator);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	EventState[]  remaining  =  eventsStates.get(interpolator);	  EventState[]    remaining    =    eventsStates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
92	[BUG]  [BUGGY]  final  int  isLastStep  =  orderingSign?  orderSign.size()  :  0;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  orderingSign?  orderSign.size()  :  0;  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  orderingSign?  orderSign.size()  :  0;	  final    int    isLastStep    =    isLastStep?    orderingSign.size()    :    0;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
93	[BUG]  [BUGGY]  final  int  isLastStep  =  orderingSign?  es0.size()  :  0;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  orderingSign?  es0.size()  :  0;  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  orderingSign?  es0.size()  :  0;	  final    int    isLastStep    =    isLastStep?    orderingSign.size()    :    0;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
94	[BUG]  [BUGGY]  state.evaluate(expandableODE);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  state.evaluate(expandableODE);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	state.evaluate(expandableODE);	  state.evaluate(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
95	[BUG]  [BUGGY]  if(orderingSign)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(orderingSign)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(orderingSign)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue	  if(isLastStep)    {    for(int    i    =    0;    i    <    remaining.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.get(i)!=    eventT)    {    continue    	non-compiled	[CE]  ';'  expected	2	None	replace
96	[BUG]  [BUGGY]  final  EventState  remaining  =  es0.getEventTime();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  EventState  remaining  =  es0.getEventTime();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  EventState  remaining  =  es0.getEventTime();	  final    EventState    remaining    =    remaining.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue	  if(!isLastStep)    {    for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    continue    	non-compiled	[CE]  ';'  expected	25	None	replace
98	[BUG]  [BUGGY]  final  int  stepStart  =  state.evaluateStep(stepSize);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  stepStart  =  state.evaluateStep(stepSize);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  stepStart  =  state.evaluateStep(stepSize);	  final    int    stepStart    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
99	[BUG]  [BUGGY]  if(orderingSign)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(orderingSign)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(orderingSign)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  }	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
100	[BUG]  [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es2))  {  continue  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es2))  {  continue  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es2))  {  continue	  if(isLastStep)    {    for(int    i    =    0;    i    <    remaining.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.contains(es1))    {    continue    	non-compiled	[CE]  ';'  expected	17	None	replace
101	[BUG]  [BUGGY]  try  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i);  }  [CE]  'try'  without  'catch'  or  'finally'  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  try  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	try  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i);  }	  if(orderingSign)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	20	None	replace
102	[BUG]  [BUGGY]  try  {  for(int  i  =  0;  i  <  eventStates.size();  i++)  {  occuringEvents.add(i);  }  [CE]  'try'  without  'catch'  or  'finally'  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  try  {  for(int  i  =  0;  i  <  eventStates.size();  i++)  {  occuringEvents.add(i);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	try  {  for(int  i  =  0;  i  <  eventStates.size();  i++)  {  occuringEvents.add(i);  }	  if(orderingSign)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	20	None	replace
103	[BUG]  [BUGGY]  if(remainingEvents!=  null)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1)  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(remainingEvents!=  null)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1)  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(remainingEvents!=  null)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1)	  if(orderingSign!=    null)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.contains(es1))    {    continue    	non-compiled	[CE]  ')'  expected	28	None	replace
104	[BUG]  [BUGGY]  luateStep(interpolator)  {  for(final  EventState  remaining  :  remaining)  {  occuringEvents.add(remaining);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  luateStep(interpolator)  {  for(final  EventState  remaining  :  remaining)  {  occuringEvents.add(remaining);  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	luateStep(interpolator)  {  for(final  EventState  remaining  :  remaining)  {  occuringEvents.add(remaining);  }	  luateStep(interpolator)    {    for(final    EventState    remaining    :    eventsStates)    {    occuringEvents.add(remaining);    }    	non-compiled	[CE]  ';'  expected	40	None	replace
105	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  orderingSign.size()  :  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  isLastStep?  orderingSign.size()  :  1;  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  orderingSign.size()  :  1;	  final    int    isLastStep    =    isLastStep?    orderingSign.size()    :    0;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
106	[BUG]  [BUGGY]  aughtExceptionHandler.handleEvent(eventT,  orderingSign);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  aughtExceptionHandler.handleEvent(eventT,  orderingSign);  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	aughtExceptionHandler.handleEvent(eventT,  orderingSign);	  if(orderingSign)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.get(i)!=    eventT)    {    continue    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
107	[BUG]  [BUGGY]  aughtExceptionHandler(eventT,  orderingSign);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  aughtExceptionHandler(eventT,  orderingSign);  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	aughtExceptionHandler(eventT,  orderingSign);	  if(orderingSign)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.get(i)!=    eventT)    {    continue    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
108	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(stepSize);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.evaluateStep(stepSize);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  stepStart  =  state.evaluateStep(stepSize);	  int    stepStart    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
109	[BUG]  [BUGGY]  if(eventsStates.contains(es1))  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsStates.contains(es1))  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(eventsStates.contains(es1))  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }	  if(eventsStates.contains(interpolator))    {    for(final    EventState    remaining    :    eventsStates)    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
110	[BUG]  [BUGGY]  if(orderingSign)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(event.getEventTime(),  es1.getEventTime());  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(orderingSign)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(event.getEventTime(),  es1.getEventTime());  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(orderingSign)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(event.getEventTime(),  es1.getEventTime());  }	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    return    remaining    *    Double.compare(event.getEventTime(),    es1.getEventTime());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
111	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  remaining  :  remaining)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(!isLastStep)  {  for(final  EventState  remaining  :  remaining)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(!isLastStep)  {  for(final  EventState  remaining  :  remaining)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }	  if(!isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
112	[BUG]  [BUGGY]  luateStep(eventT)  {  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime()  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  luateStep(eventT)  {  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime()  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	luateStep(eventT)  {  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime()  }	  luateStep(remainingEvents)    {    if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    eventT    =    remaining.getEventTime()    	non-compiled	[CE]  ';'  expected	23	None	replace
113	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  0  :  eventsStates);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  isLastStep?  0  :  eventsStates);  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  0  :  eventsStates);	  final    int    isLastStep    =    isLastStep?    remaining    :    eventsStates);    	non-compiled	[CE]  ';'  expected	7	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedEvents.length;  i++)  {  if(!ignoredEvents[i])  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(int  i  =  0;  i  <  orderedEvents.length;  i++)  {  if(!ignoredEvents[i])  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	for(int  i  =  0;  i  <  orderedEvents.length;  i++)  {  if(!ignoredEvents[i])  {  continue;  }	  for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
115	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.get  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.get  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(final  EventState  remaining  :  eventStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.get	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.get    	non-compiled	[CE]  ')'  expected	30	None	replace
116	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  es1.size()  :  remaining.getEventTime();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  isLastStep  =  isLastStep?  es1.size()  :  remaining.getEventTime();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  es1.size()  :  remaining.getEventTime();	  final    int    isLastStep    =    isLastStep?    eventsStates.size()    :    remaining.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
117	[BUG]  [BUGGY]  int  stepStart  =  state.getStep(remainingEvents);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.getStep(remainingEvents);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  stepStart  =  state.getStep(remainingEvents);	  int    stepStart    =    state.getStep();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderingSign.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(int  i  =  0;  i  <  orderingSign.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	for(int  i  =  0;  i  <  orderingSign.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  }	  for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
119	[BUG]  [BUGGY]  luateStep(remainingEvents)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime();  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  luateStep(remainingEvents)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime();  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	luateStep(remainingEvents)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime();  }	  luateStep(remainingEvents)    {    if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    eventT    =    remaining.getEventTime();    }    	non-compiled	[CE]  ';'  expected	24	None	replace
