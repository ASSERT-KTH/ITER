bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue;  }  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue;  }	      if(!isLastStep)    {    for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
2	[BUG]  [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue	      if(isLastStep)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.get(i)!=    eventT)    {    continue    	non-compiled	[CE]  ';'  expected	11	None	replace
3	[BUG]  [BUGGY]  EventState[]  remaining  =  eventsStates.get(i);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  EventState[]  remaining  =  eventsStates.get(i);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	EventState[]  remaining  =  eventsStates.get(i);	  if(isLastStep)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  EventState[]  otherStates  =  state.getStates();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  EventState[]  otherStates  =  state.getStates();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	EventState[]  otherStates  =  state.getStates();	  if(isLastStep)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
5	[BUG]  [BUGGY]  int  stepStart  =  state.getStep();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  int  stepStart  =  state.getStep();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  stepStart  =  state.getStep();	  int    stepStart    =    es1.getStep();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
6	[BUG]  [BUGGY]  int  stepSize  =  state.evaluateStep(remainingEvents);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  int  stepSize  =  state.evaluateStep(remainingEvents);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  stepSize  =  state.evaluateStep(remainingEvents);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  remaining  :  eventsStates);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  final  int  isLastStep  =  isLastStep?  remaining  :  eventsStates);  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  remaining  :  eventsStates);	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    occuringEvents.add(remaining);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
8	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  remaining.size();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  remaining.size();  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  remaining.size();	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    occuringEvents.add(remaining);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
9	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(event.getEventTime(),  es1.getEventTime());  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(event.getEventTime(),  es1.getEventTime());  }  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(event.getEventTime(),  es1.getEventTime());  }	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  remaining.getEventTime();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  remaining.getEventTime();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  eventsStates.size()  :  remaining.getEventTime();	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    eventT    =    remaining.getEventTime();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
12	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  final  int  isLastStep  =  isLastStep;  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep;	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    eventT    =    remaining.getEventTime();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
13	[BUG]  [BUGGY]  state.evaluateStep(interpolator);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  state.evaluateStep(interpolator);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	state.evaluateStep(interpolator);	  if(isLastStep)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i,    state);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  state.evaluate(interpolator);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  state.evaluate(interpolator);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	state.evaluate(interpolator);	  if(isLastStep)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i,    state);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  }  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  }	      if(!isLastStep)    {    for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
16	[BUG]  [BUGGY]  final  int  isLastStep  =  isLastStep?  orderingSign.size()  :  0;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  final  int  isLastStep  =  isLastStep?  orderingSign.size()  :  0;  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  isLastStep?  orderingSign.size()  :  0;	      if(isLastStep)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(remainingEvents[i]);    if(remaining    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
17	[BUG]  [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(int  i  =  0;  i  <  remaining.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue	      if(isLastStep)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.contains(es1))    {    continue    	non-compiled	[CE]  ';'  expected	12	None	replace
18	[BUG]  [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }	      if(!isLastStep)    {    for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  }  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  }	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  if(orderingSign)  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(orderingSign)  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(orderingSign)  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i);  }	  if(isLastStep)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
21	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(!isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(!isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
22	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(orderingSign!=  null)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(orderingSign!=  null)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue	      if(isLastStep)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.get(i)!=    eventT)    {    continue    	non-compiled	[CE]  ';'  expected	11	None	replace
23	[BUG]  [BUGGY]  luateStep(remainingEvents)  {  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime()  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  luateStep(remainingEvents)  {  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime()  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	luateStep(remainingEvents)  {  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime()	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    eventT    =    remaining.getEventTime();    }    	non-compiled	[CE]  ';'  expected	10	None	replace
24	[BUG]  [BUGGY]  luateStep(remainingEvents)  {  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime();  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  luateStep(remainingEvents)  {  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime();  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	luateStep(remainingEvents)  {  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime();  }	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    eventT    =    remaining.getEventTime();    }    	non-compiled	[CE]  ';'  expected	10	None	replace
25	[BUG]  [BUGGY]  if(!isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(!isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(!isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue	      if(!isLastStep)    {    for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    continue;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
26	[BUG]  [BUGGY]  final  int  isLastStep  =  state.evaluateStep(interpolator);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  final  int  isLastStep  =  state.evaluateStep(interpolator);  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  state.evaluateStep(interpolator);	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    occuringEvents.add(remaining);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
27	[BUG]  [BUGGY]  final  int  isLastStep  =  es0.evaluateStep(interpolator);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  final  int  isLastStep  =  es0.evaluateStep(interpolator);  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  isLastStep  =  es0.evaluateStep(interpolator);	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    occuringEvents.add(remaining);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
28	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(orderingSign!=  null)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(orderingSign!=  null)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue	      if(isLastStep)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.contains(es1))    {    continue    	non-compiled	[CE]  ';'  expected	12	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  }  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  }	      if(!isLastStep)    {    for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.get  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.get  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.get	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    }    	non-compiled	[CE]  ')'  expected	8	None	replace
31	[BUG]  [BUGGY]  final  int  stepStart  =  state.evaluateStep(interpolator);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  final  int  stepStart  =  state.evaluateStep(interpolator);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  stepStart  =  state.evaluateStep(interpolator);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  stepStart  =  state.evaluateStep(interpolator);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
33	[BUG]  [BUGGY]  int  orderSign  =  es0.getEventTime();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  int  orderSign  =  es0.getEventTime();  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  orderSign  =  es0.getEventTime();	      if(isLastStep)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(remainingEvents[i]);    if(remaining    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
34	[BUG]  [BUGGY]  int  orderSign  =  es0.getOrderingSign();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  int  orderSign  =  es0.getOrderingSign();  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  orderSign  =  es0.getOrderingSign();	      if(isLastStep)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(remainingEvents[i]);    if(remaining    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
35	[BUG]  [BUGGY]  if(!isLastStep)  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i,  state);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(!isLastStep)  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i,  state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(!isLastStep)  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i,  state);  }	  if(isLastStep)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i,    state);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }	      if(!isLastStep)    {    for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  final  EventState  remaining  =  remaining.getEventTime();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  final  EventState  remaining  =  remaining.getEventTime();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  EventState  remaining  =  remaining.getEventTime();	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    eventT    =    remaining.getEventTime();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
38	[BUG]  [BUGGY]  final  int  stepStart  =  es0.getStep();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  final  int  stepStart  =  es0.getStep();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	final  int  stepStart  =  es0.getStep();	  if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    eventT    =    remaining.getEventTime();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue;  }  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue;  }	      if(!isLastStep)    {    for(int    i    =    0;    i    <    eventsInitialized.length;    i++)    {    if(!ignoredEvents[i])    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  luateStep(interpolator)  {  for(final  EventState  remaining  :  eventsStates)  {  occuringEvents.add(remaining);  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  luateStep(interpolator)  {  for(final  EventState  remaining  :  eventsStates)  {  occuringEvents.add(remaining);  }  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	luateStep(interpolator)  {  for(final  EventState  remaining  :  eventsStates)  {  occuringEvents.add(remaining);  }	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    occuringEvents.add(remaining);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
41	[BUG]  [BUGGY]  luateStep(interpolator)  {  for(final  EventState  remaining  :  eventStates)  {  occuringEvents.add(remaining);  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  luateStep(interpolator)  {  for(final  EventState  remaining  :  eventStates)  {  occuringEvents.add(remaining);  }  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	luateStep(interpolator)  {  for(final  EventState  remaining  :  eventStates)  {  occuringEvents.add(remaining);  }	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    occuringEvents.add(remaining);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
42	[BUG]  [BUGGY]  if(eventsStates.contains(interpolator))  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(eventsStates.contains(interpolator))  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(eventsStates.contains(interpolator))  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
43	[BUG]  [BUGGY]  if(orderingSign)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  if(orderingSign)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(orderingSign)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue	      if(isLastStep)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(interpolator);    if(remainingEvents.get(i)!=    eventT)    {    continue    	non-compiled	[CE]  ';'  expected	11	None	replace
44	[BUG]  [BUGGY]  state.evaluateStep(interpolator)&&  isLastStep)  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i,  state);  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  state.evaluateStep(interpolator)&&  isLastStep)  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i,  state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	state.evaluateStep(interpolator)&&  isLastStep)  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i,  state);  }	  if(isLastStep)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i,    state);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
45	[BUG]  [BUGGY]  state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i,  state);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i,  state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i,  state);  }	  if(isLastStep)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i,    state);    }    	non-compiled	[CE]  ';'  expected	1	None	replace
46	[BUG]  [BUGGY]  int  orderSign  =  orderingSign.size();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  int  orderSign  =  orderingSign.size();  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  orderSign  =  orderingSign.size();	      if(isLastStep)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(remainingEvents[i]);    if(remaining    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
47	[BUG]  [BUGGY]  Integer  orderStart  =  eventT.getEventTime();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  Integer  orderStart  =  eventT.getEventTime();  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	Integer  orderStart  =  eventT.getEventTime();	      if(isLastStep)    {    for(int    i    =    0;    i    <    orderingSign.size();    i++)    {    EventState    remaining    =    state.evaluateStep(remainingEvents[i]);    if(remaining    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
48	[BUG]  [BUGGY]  Integer  orderHandler  =  eventStates.get(i);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  Integer  orderHandler  =  eventStates.get(i);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	Integer  orderHandler  =  eventStates.get(i);	  if(isLastStep)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
49	[BUG]  [BUGGY]  int  orderingSign  =  es0.size();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  int  orderingSign  =  es0.size();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  orderingSign  =  es0.size();	  if(isLastStep)    {    for(int    i    =    0;    i    <    eventsStates.size();    i++)    {    occuringEvents.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
50	[BUG]  [BUGGY]  state.evaluateStep(interpolator)&&  isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }    [BUGGY]  state.evaluateStep(interpolator)&&  isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [BUGGY]    }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	state.evaluateStep(interpolator)&&  isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsStates)    {    if(remainingEvents.contains(interpolator))    {    return    remaining    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    }    }    	non-compiled	[CE]  not  a  statement	8	None	replace
