bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(final  EventState  eventT  :  remaining.eventsInitialized)  {  eventT  =  eventT;  }  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  for(final  EventState  eventT  :  remaining.eventsInitialized)  {  eventT  =  eventT;  }  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	for(final  EventState  eventT  :  remaining.eventsInitialized)  {  eventT  =  eventT;  }	      if(remaining!=    null)    {    for(final    EventState    eventT    :    remaining.eventsInitialized)    {    eventT    =    eventT;    }    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	6	None	replace
2	[BUG]  [BUGGY]  For(final  EventState  eventT  :  remaining.eventsInitialized)  {  eventT  =  eventT;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  For(final  EventState  eventT  :  remaining.eventsInitialized)  {  eventT  =  eventT;  }  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	For(final  EventState  eventT  :  remaining.eventsInitialized)  {  eventT  =  eventT;  }	      if(remaining!=    null)    {    for(final    EventState    eventT    :    remaining.eventsInitialized)    {    eventT    =    eventT;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  return  state;  [CE]  cannot  find  symbol  state  [FE]        AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  return  state;  [BUGGY]    }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return  state;	  return    remaining;    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
4	[BUG]  [BUGGY]  eventT  =  remaining.stepAccepted(eventT,  tEnd  +  1);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]        AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  eventT  =  remaining.stepAccepted(eventT,  tEnd  +  1);  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  remaining.stepAccepted(eventT,  tEnd  +  1);	      eventT    =    remaining.stepAccepted(eventT,    tEnd);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	1	None	replace
5	[BUG]  [BUGGY]  eventT  =  remaining.stepAccepted(eventT,  yEnd);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]          AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  eventT  =  remaining.stepAccepted(eventT,  yEnd);  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  remaining.stepAccepted(eventT,  yEnd);	      eventT    =    remaining.stepAccepted(eventT,    yDot);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	2	None	replace
6	[BUG]  [BUGGY]  yDot  =  remaining.stepAccepted(eventT,  tEnd);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  yDot  =  remaining.stepAccepted(eventT,  tEnd);  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	yDot  =  remaining.stepAccepted(eventT,  tEnd);	      yDot    =    remaining.stepAccepted(eventT,    yEnd);    	non-compiled	[CE]  cannot  find  symbol  remaining	3	None	replace
7	[BUG]  [BUGGY]  yDot  =  remaining.stepAccepted(eventT,  eventY);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  yDot  =  remaining.stepAccepted(eventT,  eventY);  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	yDot  =  remaining.stepAccepted(eventT,  eventY);	      yDot    =    remaining.stepAccepted(eventT,    yEnd);    	non-compiled	[CE]  cannot  find  symbol  remaining	3	None	replace
8	[BUG]  [BUGGY]  for(final  EventState  eventT  :  remaining.getEvents())  {  eventT  =  eventT;  }  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]            AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  for(final  EventState  eventT  :  remaining.getEvents())  {  eventT  =  eventT;  }  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	for(final  EventState  eventT  :  remaining.getEvents())  {  eventT  =  eventT;  }	      if(remaining!=    null)    {    for(final    EventState    eventT    :    remaining.getEvents())    {    eventT    =    eventT;    }    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	8	None	replace
9	[BUG]  [BUGGY]  final  EventState  eventT  =  remaining.getEvents();  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]              AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  final  EventState  eventT  =  remaining.getEvents();  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	final  EventState  eventT  =  remaining.getEvents();	      if(remaining!=    null)    {    for(final    EventState    eventT    :    remaining.getEvents())    {    eventT    =    eventT;    }    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	8	None	replace
10	[BUG]  [BUGGY]  return  previousT.stepSize;  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  return  previousT.stepSize;  [BUGGY]    }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return  previousT.stepSize;	  return    remaining.stepSize;    	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
11	[BUG]  [BUGGY]  if(remaining.stepAccepted(eventT,  y))  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  remaining  [FE]        AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  if(remaining.stepAccepted(eventT,  y))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	if(remaining.stepAccepted(eventT,  y))  {  throw  new  IllegalStateException( " ");  }	      if(remaining.stepAccepted(eventT,    t0))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  remaining	9	None	replace
12	[BUG]  [BUGGY]  if(remaining.stepAccepted(eventT,  yEnd))  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  yEnd  [FE]          AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  if(remaining.stepAccepted(eventT,  yEnd))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	if(remaining.stepAccepted(eventT,  yEnd))  {  throw  new  IllegalStateException( " ");  }	      if(remaining.stepAccepted(eventT,    t0))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  yEnd	9	None	replace
13	[BUG]  [BUGGY]  for(final  EventState  eventT  :  remaining.getState())  {  eventT  =  eventT;  }  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]          AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  for(final  EventState  eventT  :  remaining.getState())  {  eventT  =  eventT;  }  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	for(final  EventState  eventT  :  remaining.getState())  {  eventT  =  eventT;  }	      if(remaining!=    null)    {    for(final    EventState    eventT    :    remaining.getState())    {    eventT    =    eventT;    }    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	7	None	replace
14	[BUG]  [BUGGY]  For(final  EventState  eventT  :  remaining.getState())  {  eventT  =  eventT;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  For(final  EventState  eventT  :  remaining.getState())  {  eventT  =  eventT;  }  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	For(final  EventState  eventT  :  remaining.getState())  {  eventT  =  eventT;  }	      if(remaining!=    null)    {    for(final    EventState    eventT    :    remaining.getState())    {    eventT    =    eventT;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
15	[BUG]  [BUGGY]  eventT  =  remaining.stepAccepted(eventT,  eventY);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]          AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  eventT  =  remaining.stepAccepted(eventT,  eventY);  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  remaining.stepAccepted(eventT,  eventY);	      eventT    =    remaining.stepAccepted(eventT,    yDot);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	2	None	replace
16	[BUG]  [BUGGY]  return  remaining.stepSize  -  1;  [CE]  cannot  find  symbol  remaining  [FE]          AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  return  remaining.stepSize  -  1;  [BUGGY]    }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return  remaining.stepSize  -  1;	  return    remaining.stepSize;    	non-compiled	[CE]  cannot  find  symbol  remaining	5	None	replace
17	[BUG]  [BUGGY]  final  EventState  eventT  :  remaining.getState())  {  eventT  =  eventT;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  final  EventState  eventT  :  remaining.getState())  {  eventT  =  eventT;  }  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	final  EventState  eventT  :  remaining.getState())  {  eventT  =  eventT;  }	      if(remaining!=    null)    {    for(final    EventState    eventT    :    remaining.getState())    {    eventT    =    eventT;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
18	[BUG]  [BUGGY]  final  EventState  eventT  :  remaining.eventsInitialized)  {  eventT  =  eventT;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  final  EventState  eventT  :  remaining.eventsInitialized)  {  eventT  =  eventT;  }  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	final  EventState  eventT  :  remaining.eventsInitialized)  {  eventT  =  eventT;  }	      if(remaining!=    null)    {    for(final    EventState    eventT    :    remaining.eventsInitialized)    {    eventT    =    eventT;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
19	[BUG]  [BUGGY]  final  EventState  eventT  :  remaining.getEvents())  {  eventT  =  eventT;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  final  EventState  eventT  :  remaining.getEvents())  {  eventT  =  eventT;  }  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	final  EventState  eventT  :  remaining.getEvents())  {  eventT  =  eventT;  }	      if(remaining!=    null)    {    for(final    EventState    eventT    :    remaining.getEvents())    {    eventT    =    eventT;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
20	[BUG]  [BUGGY]  if(remaining.stepAccepted(eventT,  tEnd))  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  remaining  [FE]        AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  if(remaining.stepAccepted(eventT,  tEnd))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	if(remaining.stepAccepted(eventT,  tEnd))  {  throw  new  IllegalStateException( " ");  }	      if(remaining.stepAccepted(eventT,    t0))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  remaining	9	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  return  tEnd;  [BUGGY]    }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	add	return  tEnd;	  return    remaining;    	compilable	  [FE]  AssertionError  	4	3	replace
22	[BUG]  [BUGGY]  return  tEnd;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  return  tEnd;  [BUGGY]    }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return  tEnd;	  return    remaining;    	compilable	  [FE]  AssertionError  	4	3	replace
23	[BUG]  [BUGGY]  eventT  =  eventT;  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]            AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  eventT  =  eventT;  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  eventT;	      if(remaining!=    null)    {    for(final    EventState    eventT    :    remaining.getEvents())    {    eventT    =    eventT;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	8	None	replace
24	[BUG]  [BUGGY]  return  currentT.stepSize;  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  return  currentT.stepSize;  [BUGGY]    }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return  currentT.stepSize;	  return    remaining.stepSize;    	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
25	[BUG]  [BUGGY]  return  eventState;  [CE]  cannot  find  symbol  eventState  [FE]        AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  return  eventState;  [BUGGY]    }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return  eventState;	  return    remaining;    	non-compiled	[CE]  cannot  find  symbol  eventState	4	None	replace
26	[BUG]  [BUGGY]  for(final  EventState  eventT  :  other.eventsInitialized)  {  eventT  =  eventT;  }  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  for(final  EventState  eventT  :  other.eventsInitialized)  {  eventT  =  eventT;  }  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	for(final  EventState  eventT  :  other.eventsInitialized)  {  eventT  =  eventT;  }	      if(remaining!=    null)    {    for(final    EventState    eventT    :    remaining.eventsInitialized)    {    eventT    =    eventT;    }    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	6	None	replace
27	[BUG]  [BUGGY]  eventT  =  event.stepAccepted(remaining,  tEnd);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]        AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  eventT  =  event.stepAccepted(remaining,  tEnd);  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  event.stepAccepted(remaining,  tEnd);	      eventT    =    remaining.stepAccepted(eventT,    tEnd);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	1	None	replace
28	[BUG]  [BUGGY]  if(remaining.stepAccepted(eventT,  eventEnd))  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  eventEnd  [FE]        AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  if(remaining.stepAccepted(eventT,  eventEnd))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	if(remaining.stepAccepted(eventT,  eventEnd))  {  throw  new  IllegalStateException( " ");  }	      if(remaining.stepAccepted(eventT,    t0))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  eventEnd	9	None	replace
29	[BUG]  [BUGGY]  eventT  =  event.stepAccepted(remaining,  yDot);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]          AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  eventT  =  event.stepAccepted(remaining,  yDot);  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  event.stepAccepted(remaining,  yDot);	      eventT    =    remaining.stepAccepted(eventT,    yDot);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	2	None	replace
30	[BUG]  [BUGGY]  eventT  =  eventT.stepAccepted(remaining,  yDot);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]            AssertionError    [CONTEXT]    boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }    [BUGGY]  eventT  =  eventT.stepAccepted(remaining,  yDot);  [BUGGY]    return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  eventT.stepAccepted(remaining,  yDot);	      eventT    =    remaining.stepAccepted(eventT,    yDot);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	2	None	replace
