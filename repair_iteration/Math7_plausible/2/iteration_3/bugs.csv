bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NoBracketingException  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    yDot.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);	  	compilable	  [FE]  NoBracketingException  	13	2	add
2	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  [FE]  NoBracketingException  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    yDot.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);	  	compilable	  [FE]  NoBracketingException  	13	2	add
3	[BUG]  [BUGGY]  [FE]  NoBracketingException  [FE]      AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    yDot.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);	  	compilable	  [FE]  NoBracketingException  	13	2	add
4	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  [FE]  NoBracketingException  [FE]      AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    yDot.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);	  	compilable	  [FE]  NoBracketingException  	13	2	add
5	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yEnd);  [CE]  cannot  find  symbol  yEnd  [FE]        AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yEnd);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    yDot.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yEnd);	  	non-compiled	[CE]  cannot  find  symbol  yEnd	13	None	add
6	[BUG]  [BUGGY]  currentEvent.stepAccepted(eventT,  y);  [CE]  illegal  start  of  expression  [FE]        NoBracketingException      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  currentEvent.stepAccepted(eventT,  y);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	currentEvent.stepAccepted(eventT,  y);	  if(isLastStep)    {    System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
7	[BUG]  [BUGGY]  currentEvent.stepAccepted(eventT,  yEnd);  [CE]  illegal  start  of  expression  [FE]          NoBracketingException      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  currentEvent.stepAccepted(eventT,  yEnd);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	currentEvent.stepAccepted(eventT,  yEnd);	  System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yEnd);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  0,  y.length);  previousT.stepAccepted(eventT,  yDot);  [CE]  illegal  start  of  expression  [FE]        NoBracketingException      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  System.arraycopy(y,  0,  y,  0,  y.length);  previousT.stepAccepted(eventT,  yDot);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(y,  0,  y,  0,  y.length);  previousT.stepAccepted(eventT,  yDot);	          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,    0,    y,    0,    y.length);    previousT.stepAccepted(eventT,    yDot);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(handler,  0,  eventY,  0,  handler.length);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  System.arraycopy(handler,  0,  eventY,  0,  handler.length);  [BUGGY]        if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(handler,  0,  eventY,  0,  handler.length);	  System.arraycopy(eventY,    0,    y,    0,    handler.length);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
10	[BUG]  [BUGGY]  for(final  EventState  y  :  eventY)  {  if(isLastStep)  {  System.arraycopy(event,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  for(final  EventState  y  :  eventY)  {  if(isLastStep)  {  System.arraycopy(event,  0,  y,  0,  y.length);  }  [BUGGY]        if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventY)  {  if(isLastStep)  {  System.arraycopy(event,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(event,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  y  =  handler.getY()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  y  =  handler.getY()  +  1;  [BUGGY]        if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	y  =  handler.getY()  +  1;	  y    =    handler.getY();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  [FE]  NoBracketingException  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);	  	compilable	  [FE]  NoBracketingException  	11	2	add
13	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  [FE]  NoBracketingException  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);	  	compilable	  [FE]  NoBracketingException  	11	2	add
14	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  tEnd);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  tEnd);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  tEnd);	  	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	11	None	add
15	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yEnd);  [CE]  cannot  find  symbol  yEnd  [FE]        AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yEnd);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yEnd);	  	non-compiled	[CE]  cannot  find  symbol  yEnd	11	None	add
16	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  0,  y.length);  previousT.stepAccepted(eventT,  eventY);  [CE]  illegal  start  of  expression  [FE]          NoBracketingException      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  System.arraycopy(y,  0,  y,  0,  y.length);  previousT.stepAccepted(eventT,  eventY);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(y,  0,  y,  0,  y.length);  previousT.stepAccepted(eventT,  eventY);	          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,    0,    y,    0,    y.length);    previousT.stepAccepted(eventT,    eventY);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
17	[BUG]  [BUGGY]  final  EventState  y  =  eventsInitialized.get(eventY);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  final  EventState  y  =  eventsInitialized.get(eventY);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	final  EventState  y  =  eventsInitialized.get(eventY);	  if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
18	[BUG]  [BUGGY]  final  EventState  y  =  eventsInitialized.get(eventT);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  final  EventState  y  =  eventsInitialized.get(eventT);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	final  EventState  y  =  eventsInitialized.get(eventT);	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
19	[BUG]  [BUGGY]  for(final  EventState  y  :  eventY)  {  if(isFirstStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  for(final  EventState  y  :  eventY)  {  if(isFirstStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventY)  {  if(isFirstStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventsInitialized)    {    if(isFirstStep)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
20	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  }	          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,    0,    y,    0,    yDot.length);    currentEvent.stepAccepted(eventT,    yDot);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
21	[BUG]  [BUGGY]  y  =  handler.getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  y  =  handler.getNext();  [BUGGY]        if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	y  =  handler.getNext();	  y    =    handler.getParent();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
22	[BUG]  [BUGGY]  currentEvent.stepAccepted(eventT,  t0);  [CE]  illegal  start  of  expression  [FE]        NoBracketingException      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  currentEvent.stepAccepted(eventT,  t0);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	currentEvent.stepAccepted(eventT,  t0);	  currentEvent.stepAccepted(eventT,    tEnd);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
23	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitialized.values().iterator();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitialized.values().iterator();  [BUGGY]        if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	Iterator  <  EventState>  iterator  =  this.eventsInitialized.values().iterator();	  Iterator    <    EventState>    iterator    =    eventsInitialized.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
24	[BUG]  [BUGGY]  for(final  EventState  y  :  handler.getEvents())  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  for(final  EventState  y  :  handler.getEvents())  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  handler.getEvents())  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventState.getEvents())    {    if(isLastStep)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
25	[BUG]  [BUGGY]  for(final  EventState  y  :  currentEvent.getEvents())  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  for(final  EventState  y  :  currentEvent.getEvents())  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  currentEvent.getEvents())  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventState.getEvents())    {    if(isLastStep)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
26	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitialized.entities().iterator();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitialized.entities().iterator();  [BUGGY]        if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	Iterator  <  EventState>  iterator  =  this.eventsInitialized.entities().iterator();	  Iterator    <    EventState>    iterator    =    eventsInitialized.entities().iterator();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
27	[BUG]  [BUGGY]  for(final  EventState  y  :  eventY)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  for(final  EventState  y  :  eventY)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventY)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
28	[BUG]  [BUGGY]  final  EventState  y  =  handler.getEventState();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  final  EventState  y  =  handler.getEventState();  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	final  EventState  y  =  handler.getEventState();	  final    EventState    y    =    eventsInitialized.getEventState();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
29	[BUG]  [BUGGY]  final  EventState  y  =  currentEvent.getEventState();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  final  EventState  y  =  currentEvent.getEventState();  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	final  EventState  y  =  currentEvent.getEventState();	  final    EventState    y    =    eventsInitialized.getEventState();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
30	[BUG]  [BUGGY]  for(final  EventState  y  :  eventY)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  for(final  EventState  y  :  eventY)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventY)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
31	[BUG]  [BUGGY]  for(final  EventState  y  :  eventY)  {  if(y.length  >  1)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  for(final  EventState  y  :  eventY)  {  if(y.length  >  1)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventY)  {  if(y.length  >  1)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventsInitialized)    {    if(y.length    >    1)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
32	[BUG]  [BUGGY]  final  EventState  y  =  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  final  EventState  y  =  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [BUGGY]        if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	final  EventState  y  =  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
33	[BUG]  [BUGGY]  final  EventState  y  =  eventY)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  final  EventState  y  =  eventY)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	final  EventState  y  =  eventY)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	  final    EventState    y    =    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
34	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(eventT,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
35	[BUG]  [BUGGY]  for(final  EventState  y  :  eventY)  {  if(isLastStep)  {  System.arraycopy(eventX,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  for(final  EventState  y  :  eventY)  {  if(isLastStep)  {  System.arraycopy(eventX,  0,  y,  0,  y.length);  }  [BUGGY]        if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventY)  {  if(isLastStep)  {  System.arraycopy(eventX,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(eventX,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yEnd);  [CE]  illegal  start  of  expression  [FE]        NoBracketingException      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yEnd);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(eventY,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yEnd);	  System.arraycopy(eventY,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
37	[BUG]  [BUGGY]  [FE]  NoBracketingException  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        eventY);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);	  	compilable	  [FE]  NoBracketingException  	15	2	add
38	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [FE]  NoBracketingException  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        eventY);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);	  	compilable	  [FE]  NoBracketingException  	15	2	add
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        eventY);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	15	1	add
40	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  y,  0,  y.length);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        eventY);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	15	1	add
41	[BUG]  [BUGGY]  [FE]  NoBracketingException  [FE]        AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  yDot,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        eventY);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  yDot,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);	  	compilable	  [FE]  NoBracketingException  	15	2	add
42	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  yDot,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [FE]  NoBracketingException  [FE]        AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  yDot,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        eventY);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  yDot,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);	  	compilable	  [FE]  NoBracketingException  	15	2	add
43	[BUG]  [BUGGY]  for(final  EventState  y  :  eventY)  {  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  for(final  EventState  y  :  eventY)  {  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [BUGGY]        if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventY)  {  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
44	[BUG]  [BUGGY]  if(orderingSign)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  if(orderingSign)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	if(orderingSign)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    yDot.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	13	1	add
46	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    yDot.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	13	1	add
47	[BUG]  [BUGGY]  luate(eventT,  yDot,  orderSign);  [CE]  illegal  start  of  expression  [FE]        NoBracketingException      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventT,  yDot,  orderSign);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	luate(eventT,  yDot,  orderSign);	  if(isLastStep)    {    System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
48	[BUG]  [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(y.length  <  1)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(y.length  <  1)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventsInitialized)  {  if(y.length  <  1)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventsInitialized)    {    if(y.length    >    1)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
49	[BUG]  [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(y,  0,  yDot,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(y,  0,  yDot,  0,  y.length);  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(y,  0,  yDot,  0,  y.length);  }	  for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  other,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [CE]  illegal  start  of  expression  [FE]        NoBracketingException      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  System.arraycopy(eventY,  0,  other,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(eventY,  0,  other,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);	  System.arraycopy(y,    0,    other,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
51	[BUG]  [BUGGY]  currentEvent.stepAccepted(eventT,  yDot,  tEnd);  [CE]  illegal  start  of  expression  [FE]        NoBracketingException      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  currentEvent.stepAccepted(eventT,  yDot,  tEnd);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	currentEvent.stepAccepted(eventT,  yDot,  tEnd);	  currentEvent.stepAccepted(eventT,    yDot);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
52	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  handler.length);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  handler.length);  [BUGGY]        if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(eventY,  0,  yDot,  0,  handler.length);	  System.arraycopy(eventY,    0,    yDot,    0,    y.length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
53	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  eventsInitialized.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  eventsInitialized.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(eventY,  0,  y,  0,  eventsInitialized.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arra    	non-compiled	[CE]  not  a  statement	42	None	replace
54	[BUG]  [BUGGY]  System.arraycopy(handler,  0,  y,  0,  handler.length);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  System.arraycopy(handler,  0,  y,  0,  handler.length);  [BUGGY]        if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(handler,  0,  y,  0,  handler.length);	  System.arraycopy(eventY,    0,    y,    0,    handler.length);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  eventY.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  eventY.length);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(eventY,  0,  y,  0,  eventY.length);	  System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arra    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
56	[BUG]  [BUGGY]  luate(eventT,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventT,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	luate(eventT,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
57	[BUG]  [BUGGY]  luate(eventY,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventY,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	luate(eventY,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  }	  if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
58	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  }	          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
59	[BUG]  [BUGGY]  currentEvent.stepAccepted(eventY,  eventT);  [CE]  illegal  start  of  expression  [FE]        NoBracketingException      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  currentEvent.stepAccepted(eventY,  eventT);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	currentEvent.stepAccepted(eventY,  eventT);	  currentEvent.stepAccepted(eventT,    eventY);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	11	1	add
61	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	11	1	add
62	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepSizeAccepted(eventT,  yDot);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepSizeAccepted(eventT,  yDot);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepSizeAccepted(eventT,  yDot);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
63	[BUG]  [BUGGY]  currentEvent.stepAccepted(eventT,  tStart);  [CE]  illegal  start  of  expression  [FE]        NoBracketingException      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  currentEvent.stepAccepted(eventT,  tStart);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	currentEvent.stepAccepted(eventT,  tStart);	  currentEvent.stepAccepted(eventT,    tEnd);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
64	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.resetOccurred(eventT,  eventY);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.resetOccurred(eventT,  eventY);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        eventY);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.resetOccurred(eventT,  eventY);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
65	[BUG]  [BUGGY]  luate(eventT,  y,  tEnd,  isLastStep)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventT,  y,  tEnd,  isLastStep)  {  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	luate(eventT,  y,  tEnd,  isLastStep)  {	  if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    }    	non-compiled	[CE]  ';'  expected	21	None	replace
66	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventX,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventX,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	if(isLastStep)  {  System.arraycopy(eventX,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {	  if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
67	[BUG]  [BUGGY]  final  EventState  y  =  stateInitialized.getEventState();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  final  EventState  y  =  stateInitialized.getEventState();  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	final  EventState  y  =  stateInitialized.getEventState();	  final    EventState    y    =    eventsInitialized.getEventState();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
68	[BUG]  [BUGGY]  final  EventState  y  =  this.eventsInitialized.getEventState();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  final  EventState  y  =  this.eventsInitialized.getEventState();  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	final  EventState  y  =  this.eventsInitialized.getEventState();	  final    EventState    y    =    eventsInitialized.getEventState();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
69	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  stateInitialized.entities().iterator();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  Iterator  <  EventState>  iterator  =  stateInitialized.entities().iterator();  [BUGGY]        if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	Iterator  <  EventState>  iterator  =  stateInitialized.entities().iterator();	  Iterator    <    EventState>    iterator    =    eventsInitialized.entities().iterator();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
70	[BUG]  [BUGGY]  for(final  EventState  y  :  eventY)  {  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  for(final  EventState  y  :  eventY)  {  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  }  [BUGGY]        if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventY)  {  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  yDot.length);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    yDot.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	13	1	add
72	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  yDot.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  yDot.length);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    yDot.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	13	1	add
73	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepSizeAccepted(eventT,  eventY);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepSizeAccepted(eventT,  eventY);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        eventY);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepSizeAccepted(eventT,  eventY);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
74	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  yDot.length);  for(final  EventState  y  :  eventsInitialized)  {  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  yDot.length);  for(final  EventState  y  :  eventsInitialized)  {  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  yDot.length);  for(final  EventState  y  :  eventsInitialized)  {  }	  if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
75	[BUG]  [BUGGY]  currentEvent.setInterpolatedTime(eventT);  [CE]  illegal  start  of  expression  [FE]        NoBracketingException      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  currentEvent.setInterpolatedTime(eventT);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	currentEvent.setInterpolatedTime(eventT);	  currentEvent.stepAccepted(eventT,    eventY);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
76	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  yDot.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  yDot.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  yDot.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra	  if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arra    	non-compiled	[CE]  not  a  statement	18	None	replace
77	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepStartAccepted(eventT,  yDot);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepStartAccepted(eventT,  yDot);  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        currentEvent.stepAccepted(eventT,        yDot);        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepStartAccepted(eventT,  yDot);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
78	[BUG]  [BUGGY]  y  =  handler.handleStep(interpolator,  tEnd);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  y  =  handler.handleStep(interpolator,  tEnd);  [BUGGY]        if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	y  =  handler.handleStep(interpolator,  tEnd);	  y    =    handler.getY();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
79	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  }  [CE]  illegal  start  of  expression  [FE]        NoBracketingException      [CONTEXT]      interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  }  [BUGGY]      }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  }	  System.arraycopy(eventY,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
