bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  [CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;	  	non-compiled	[CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	1	None	add
2	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  [CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    int  orderingSign  =  interpolator.isForward()?  1  :  -1;	  	non-compiled	[CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	1	None	add
3	[BUG]  [BUGGY]  final  int  orderingSign  =  state.isInitializing()?  +1  :  -1;  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  final  int  orderingSign  =  state.isInitializing()?  +1  :  -1;  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	final  int  orderingSign  =  state.isInitializing()?  +1  :  -1;	  final    int    orderingSign    =    interpolator.isInitializing()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
4	[BUG]  [BUGGY]  int  orderingSign  =  state.reinitializeBegin(interpolator);  [CE]  cannot  find  symbol  state  [FE]            AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  int  orderingSign  =  state.reinitializeBegin(interpolator);  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	int  orderingSign  =  state.reinitializeBegin(interpolator);	      	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
5	[BUG]  [BUGGY]  int  orderingEvents  =  state.reinitializeBegin(interpolator);  [CE]  cannot  find  symbol  state  [FE]              AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  int  orderingEvents  =  state.reinitializeBegin(interpolator);  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	int  orderingEvents  =  state.reinitializeBegin(interpolator);	      	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
6	[BUG]  [BUGGY]      int  orderSign  =  interpolator.isForward()?  +1  :  1;  int  orderSign  =  interpolator.isForward()?  +1  :  1;  [CE]  variable  orderSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]      int  orderSign  =  interpolator.isForward()?  +1  :  1;  int  orderSign  =  interpolator.isForward()?  +1  :  1;  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	        int    orderSign    =    interpolator.isForward()?    +1    :    1;    int  orderSign  =  interpolator.isForward()?  +1  :  1;	  	non-compiled	[CE]  variable  orderSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	8	None	add
7	[BUG]  [BUGGY]      int  orderSign  =  interpolator.isForward()?  +1  :  1;  int  orderSign  =  interpolator.isForward()?  +1  :  1);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]      int  orderSign  =  interpolator.isForward()?  +1  :  1;  int  orderSign  =  interpolator.isForward()?  +1  :  1);  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	        int    orderSign    =    interpolator.isForward()?    +1    :    1;    int  orderSign  =  interpolator.isForward()?  +1  :  1);	  	non-compiled	[CE]  ';'  expected	8	None	add
8	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.stepHandlers.iterator();  [CE]  package  state  does  not  exist  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  Iterator  <  EventState>  iterator  =  state.stepHandlers.iterator();  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	Iterator  <  EventState>  iterator  =  state.stepHandlers.iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  package  state  does  not  exist	10	None	replace
9	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.iterator();  [CE]  cannot  find  symbol  events  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.iterator();  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	Iterator  <  EventState>  iterator  =  this.events.iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  events	10	None	replace
10	[BUG]  [BUGGY]  int  orderSign  =  interpolator.isInitializing()?  +1  :  -1;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  int  orderSign  =  interpolator.isInitializing()?  +1  :  -1;  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	int  orderSign  =  interpolator.isInitializing()?  +1  :  -1;	      int    orderSign    =    interpolator.isForward()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  0;  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	add	final  int  orderingSign  =  interpolator.isForward()?  1  :  0;	  final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    	compilable	  [FE]  AssertionError  	2	1	replace
12	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  0;  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	final  int  orderingSign  =  interpolator.isForward()?  1  :  0;	  final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    	compilable	  [FE]  AssertionError  	2	1	replace
13	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isInitializing()?  1  :  -1;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  final  int  orderingSign  =  interpolator.isInitializing()?  1  :  -1;  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	final  int  orderingSign  =  interpolator.isInitializing()?  1  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
14	[BUG]  [BUGGY]  Integer[]  stepHandlers  =  getStepHandlers().length;  [CE]  cannot  find  symbol  length  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  Integer[]  stepHandlers  =  getStepHandlers().length;  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	Integer[]  stepHandlers  =  getStepHandlers().length;	      Integer[]    stepHandlers    =    getStepHandlers();    	non-compiled	[CE]  cannot  find  symbol  length	7	None	replace
15	[BUG]  [BUGGY]  int  orderSign  =  interpolator.isInitializing()?  +1  :  1;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  int  orderSign  =  interpolator.isInitializing()?  +1  :  1;  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	int  orderSign  =  interpolator.isInitializing()?  +1  :  1;	      int    orderSign    =    interpolator.isForward()?    +1    :    1;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
16	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitialized.iterator();  [CE]  cannot  find  symbol  eventsInitialized  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitialized.iterator();  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	Iterator  <  EventState>  iterator  =  this.eventsInitialized.iterator();	      Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	14	None	replace
17	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }	      if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]      int  orderSign  =  interpolator.isForward()?  +1  :  -1;  int  orderSign  =  interpolator.isForward()?  +1  :  -1;  [CE]  variable  orderSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]      int  orderSign  =  interpolator.isForward()?  +1  :  -1;  int  orderSign  =  interpolator.isForward()?  +1  :  -1;  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	        int    orderSign    =    interpolator.isForward()?    +1    :    -1;    int  orderSign  =  interpolator.isForward()?  +1  :  -1;	  	non-compiled	[CE]  variable  orderSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	5	None	add
19	[BUG]  [BUGGY]  int  orderSign  =  interpolator.isForward()?  -1  :  -1;  [CE]  cannot  find  symbol  orderingSign  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  int  orderSign  =  interpolator.isForward()?  -1  :  -1;  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	int  orderSign  =  interpolator.isForward()?  -1  :  -1;	      int    orderSign    =    interpolator.isForward()?    +1    :    1;    	non-compiled	[CE]  cannot  find  symbol  orderingSign	9	None	replace
20	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  cannot  find  symbol  orderingSign  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  orderingSign	10	None	replace
21	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }	      if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
22	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }	      if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
23	[BUG]  [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	if(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }	      if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
24	[BUG]  [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	if(eventsInitialized)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }	      if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
25	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(state);  }  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(state);  }	      if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
26	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }	      if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
27	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeBegin(interpolator);  }	      if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
28	[BUG]  [BUGGY]  Integer[]  stepHandlers  =  getStepHandlers(state);  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  Integer[]  stepHandlers  =  getStepHandlers(state);  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	Integer[]  stepHandlers  =  getStepHandlers(state);	      Integer[]    stepHandlers    =    getStepHandlers();    	non-compiled	[CE]  cannot  find  symbol  state	7	None	replace
29	[BUG]  [BUGGY]      int  orderSign  =  interpolator.isForward()?  +1  :  -1;  int  orderSign  =  interface.isForward()?  +1  :  -1;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]      int  orderSign  =  interpolator.isForward()?  +1  :  -1;  int  orderSign  =  interface.isForward()?  +1  :  -1;  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	        int    orderSign    =    interpolator.isForward()?    +1    :    -1;    int  orderSign  =  interface.isForward()?  +1  :  -1;	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
30	[BUG]  [BUGGY]      int  orderSign  =  interpolator.isForward()?  +1  :  1;  int  orderSign  =  interpolator.isForward()?  +1  :  2;  [CE]  variable  orderSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]      int  orderSign  =  interpolator.isForward()?  +1  :  1;  int  orderSign  =  interpolator.isForward()?  +1  :  2;  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	        int    orderSign    =    interpolator.isForward()?    +1    :    1;    int  orderSign  =  interpolator.isForward()?  +1  :  2;	  	non-compiled	[CE]  variable  orderSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	8	None	add
31	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }	      if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
32	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeBegin(interpolator);  }	      if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
33	[BUG]  [BUGGY]  int  orderSign  =  interpolator.isForward()?  -1  :  1;  [CE]  cannot  find  symbol  orderingSign  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      [BUGGY]  int  orderSign  =  interpolator.isForward()?  -1  :  1;  [BUGGY]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	int  orderSign  =  interpolator.isForward()?  -1  :  1;	      int    orderSign    =    interpolator.isForward()?    +1    :    1;    	non-compiled	[CE]  cannot  find  symbol  orderingSign	9	None	replace
