projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java312finalintorderingSign=interpolator.isForward()?+1:-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java312finalintorderingSign=interpolator.isForward()?1:-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java312finalintorderingSign=interpolator.isInitializing()?+1:-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java312
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java312intorderSign=interpolator.isForward()?+1:-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java312Integer[]stepHandlers=getStepHandlers();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java312intorderSign=interpolator.isForward()?+1:1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java312Iterator<EventState>iterator=eventsStates.iterator();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java312if(!isLastStep){for(finalEventStatestate:eventsStates){state.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java312if(!isLastStep){for(finalEventStatestate:eventsStates){state.reinitializeBegin(state);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java312if(isLastStep){for(finalEventStatestate:eventsStates){state.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java312Iterator<EventState>iterator=events.iterator();
