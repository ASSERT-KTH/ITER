bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  eventT  =  previousEvent.getEventTime()  -  1;  [CE]  cannot  find  symbol  previousEvent  [FE]            AssertionError      [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double  eventT  =  previousEvent.getEventTime()  -  1;  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final  double  eventT  =  previousEvent.getEventTime()  -  1;	  final    double    eventT    =    currentEvent.getEventTime()    -    1;    final    double    eventT    =    previousEvent.getEventTime()    -    1;    	non-compiled	[CE]  cannot  find  symbol  previousEvent	20	None	replace
2	[BUG]  [BUGGY]  final  double[]  previousT  =  currentEvent.getEventTime();  [CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]            AssertionError      [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double[]  previousT  =  currentEvent.getEventTime();  [BUGGY]      final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final  double[]  previousT  =  currentEvent.getEventTime();	  final    double[]    previousT    =    currentEvent.getNext();    	non-compiled	[CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	14	None	replace
3	[BUG]  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  *  1;  final  double  eventT  =  currentEvent.getEventTime()  *  1;  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  *  1;  final  double  eventT  =  currentEvent.getEventTime()  *  1;  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final    double    eventT    =    currentEvent.getEventTime()    *    1;    final  double  eventT  =  currentEvent.getEventTime()  *  1;	  	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	17	None	add
4	[BUG]  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  *  1;  Final  double  eventT  =  currentEvent.getEventTime()  *  1;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  *  1;  Final  double  eventT  =  currentEvent.getEventTime()  *  1;  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final    double    eventT    =    currentEvent.getEventTime()    *    1;    Final  double  eventT  =  currentEvent.getEventTime()  *  1;	  	non-compiled	[CE]  not  a  statement	17	None	add
5	[BUG]  [BUGGY]  final  double  eventT  =  previousEvent.getEventTime();  [CE]  cannot  find  symbol  previousEvent  [FE]        AssertionError      [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double  eventT  =  previousEvent.getEventTime();  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final  double  eventT  =  previousEvent.getEventTime();	  final    double    eventT    =    currentEvent.getEventTime()    +    1;    final    double    eventT    =    previousEvent.getEventTime()    +    1;    	non-compiled	[CE]  cannot  find  symbol  previousEvent	21	None	replace
6	[BUG]  [BUGGY]  final  double[]  previousT  =  iterator.getNext();  [CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]            AssertionError      [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double[]  previousT  =  iterator.getNext();  [BUGGY]      final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final  double[]  previousT  =  iterator.getNext();	  final    double[]    previousT    =    iterator.getPrevious();    	non-compiled	[CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	9	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  *  2;  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	add	final  double  eventT  =  currentEvent.getEventTime()  *  2;	  final    double    eventT    =    currentEvent.getEventTime()    *    1;    	compilable	  [FE]  AssertionError  	18	3	replace
8	[BUG]  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  *  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  *  2;  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final  double  eventT  =  currentEvent.getEventTime()  *  2;	  final    double    eventT    =    currentEvent.getEventTime()    *    1;    	compilable	  [FE]  AssertionError  	18	3	replace
9	[BUG]  [BUGGY]  final  double[]  previousT  =  iterator.getPreviousTime();  [CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]              AssertionError      [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double[]  previousT  =  iterator.getPreviousTime();  [BUGGY]      final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final  double[]  previousT  =  iterator.getPreviousTime();	  final    double[]    previousT    =    currentEvent.getPreviousTime();    	non-compiled	[CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	3	None	replace
10	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  /  2;  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	add	final  double  eventT  =  currentEvent.getEventTime()  /  2;	  final    double    eventT    =    currentEvent.getEventTime()    /    1;    	compilable	timeout	8	1	replace
11	[BUG]  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  /  2;  timeout  [FE]    AssertionError    [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  /  2;  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final  double  eventT  =  currentEvent.getEventTime()  /  2;	  final    double    eventT    =    currentEvent.getEventTime()    /    1;    	compilable	timeout	8	1	replace
12	[BUG]  [BUGGY]  currentEvent.stepAccepted(eventT,  isLastStep);  [CE]  cannot  find  symbol  eventT  [FE]                  AssertionError      [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  currentEvent.stepAccepted(eventT,  isLastStep);  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	currentEvent.stepAccepted(eventT,  isLastStep);	  Interpolator    <    EventState>    interpolator    =    iterator.next();    currentEvent.stepAccepted(eventT,    isLastStep);    	non-compiled	[CE]  cannot  find  symbol  eventT	11	None	replace
13	[BUG]  [BUGGY]  final  double  previousT  =  currentEvent.getEventTime();  [CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError      [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double  previousT  =  currentEvent.getEventTime();  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final  double  previousT  =  currentEvent.getEventTime();	  final    double    eventT    =    currentEvent.getEventTime()    +    1;    final    double    previousT    =    currentEvent.getEventTime()    +    1;    	non-compiled	[CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	16	None	replace
14	[BUG]  [BUGGY]  final  double  previousT  =  currentEvent.getEventTime()  +  1;  [CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]          AssertionError      [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double  previousT  =  currentEvent.getEventTime()  +  1;  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final  double  previousT  =  currentEvent.getEventTime()  +  1;	  final    double    eventT    =    currentEvent.getEventTime()    +    1;    final    double    previousT    =    currentEvent.getEventTime()    +    1;    	non-compiled	[CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	16	None	replace
15	[BUG]  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  /  1;  final  double  eventT  =  currentEvent.getEventTime()  /  1;  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  /  1;  final  double  eventT  =  currentEvent.getEventTime()  /  1;  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final    double    eventT    =    currentEvent.getEventTime()    /    1;    final  double  eventT  =  currentEvent.getEventTime()  /  1;	  	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	7	None	add
16	[BUG]  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  /  1;  final  double  eventT  =  currentEvent.getEventTime()  /  2;  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  /  1;  final  double  eventT  =  currentEvent.getEventTime()  /  2;  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final    double    eventT    =    currentEvent.getEventTime()    /    1;    final  double  eventT  =  currentEvent.getEventTime()  /  2;	  	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	7	None	add
17	[BUG]  [BUGGY]  Interpolator  <  EventState>  interpolator  =  iterator.getInterpolator();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  Interpolator  <  EventState>  interpolator  =  iterator.getInterpolator();  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	Interpolator  <  EventState>  interpolator  =  iterator.getInterpolator();	  Interpolator    <    EventState>    interpolator    =    iterator.next();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
18	[BUG]  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  *  1;  final  double  eventT  =  currentEvent.getEventTime()  *  2;  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  *  1;  final  double  eventT  =  currentEvent.getEventTime()  *  2;  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final    double    eventT    =    currentEvent.getEventTime()    *    1;    final  double  eventT  =  currentEvent.getEventTime()  *  2;	  	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	17	None	add
19	[BUG]  [BUGGY]  final  double[]  previousT  =  currentEvent.getPreviousTime()  -  1;  [CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]              AssertionError      [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  final  double[]  previousT  =  currentEvent.getPreviousTime()  -  1;  [BUGGY]      final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final  double[]  previousT  =  currentEvent.getPreviousTime()  -  1;	  final    double[]    previousT    =    currentEvent.getPreviousTime();    	non-compiled	[CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	3	None	replace
20	[BUG]  [BUGGY]  Interpolator  <  EventState>  interpolator  =  iterator.getIterator();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  Interpolator  <  EventState>  interpolator  =  iterator.getIterator();  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	Interpolator  <  EventState>  interpolator  =  iterator.getIterator();	  Interpolator    <    EventState>    interpolator    =    iterator.next();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
21	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]              AssertionError      [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventStates.iterator();  [BUGGY]      final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	Iterator  <  EventState>  iterator  =  this.eventStates.iterator();	  Iterator    <    EventState>    iterator    =    eventStates.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	13	None	replace
22	[BUG]  [BUGGY]  Interpolator  <  EventState>  iterator  =  iterator.next();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();        [BUGGY]  Interpolator  <  EventState>  iterator  =  iterator.next();  [BUGGY]      interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	Interpolator  <  EventState>  iterator  =  iterator.next();	  Interpolator    <    EventState>    other    =    iterator.next();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
