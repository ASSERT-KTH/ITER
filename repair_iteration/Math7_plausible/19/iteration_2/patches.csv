bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  events.get(0).evaluate();  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  events.get(0).evaluate();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  events.get(0).evaluate();	  final    EventState    <    EventState>    eventState    =    eventsStates.get(0).evaluate();    	non-compiled	[CE]  type  EventState  does  not  take  parameters	9	None	replace
2	[BUG]  [BUGGY]  final  EventState[]  remaining  =  events.toArray(new  EventState[occuringEvents.size()  ]);  [CE]  cannot  find  symbol  events  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  remaining  =  events.toArray(new  EventState[occuringEvents.size()  ]);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState[]  remaining  =  events.toArray(new  EventState[occuringEvents.size()  ]);	  final    EventState[]    remaining    =    eventStates.toArray(new    EventState[occuringEvents.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  events	6	None	replace
3	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventStates.iterator();  [CE]  cannot  find  symbol  eventStates  [FE]          NoSuchElementException      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventStates.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  Iterator  <  EventState>  iterator  =  eventStates.iterator();	  final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    final    Iterator    <    EventState>    iterator    =    eventStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventStates	4	None	replace
4	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(eventsStates.size());  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(eventsStates.size());  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(eventsStates.size());	  final    EventState    <    EventState>    remaining    =    eventsStates.get(eventsStates.size()    -    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	19	None	replace
5	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(events,  orderingSign);  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(events,  orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState[]  eventsInitialized  =  getEventsInitialized(events,  orderingSign);	  final    EventState[]    eventsInitialized    =    getEventsInitialized(occuringEvents);    	non-compiled	[CE]  cannot  find  symbol  events	12	None	replace
6	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  events.get(0);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  events.get(0);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  events.get(0);	  final    EventState    <    EventState>    remaining    =    eventStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	11	None	replace
7	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  state,  orderingSign);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  state,  orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState[]  eventsInitialized  =  getEventsInitialized(),  state,  orderingSign);	  final    EventState[]    eventsInitialized    =    getEventsInitialized(),    state);    	non-compiled	[CE]  ';'  expected	8	None	replace
8	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  event);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  event);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState[]  eventsInitialized  =  getEventsInitialized(),  event);	  final    EventState[]    eventsInitialized    =    getEventsInitialized(),    state);    	non-compiled	[CE]  ';'  expected	8	None	replace
9	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(currentEvent);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(currentEvent);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  state.evaluateStep(currentEvent);	  final    EventState    <    EventState>    remaining    =    state.evaluateStep(occuringEvents);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	16	None	replace
10	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  state.get(name,  eventsStates);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  state.get(name,  eventsStates);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  state.get(name,  eventsStates);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(name,    state);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	28	None	replace
11	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  yDot);  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  yDot);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  yDot);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(name,    state);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	28	None	replace
12	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  state.getEventsInitialized();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  state.getEventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState[]  eventsInitialized  =  getEventsInitialized(),  state.getEventsInitialized();	  final    EventState[]    eventsInitialized    =    getEventsInitialized().getEventsInitialized();    	non-compiled	[CE]  ';'  expected	24	None	replace
13	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  orderingEvents);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  orderingEvents);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  orderingEvents);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(name,    orderingSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	5	None	replace
14	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  orderingSign,  tEnd);  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  orderingSign,  tEnd);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  orderingSign,  tEnd);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(name,    orderingSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	5	None	replace
15	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]        NoSuchElementException      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	add	Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	compilable	  [FE]  NoSuchElementException  	3	3	replace
16	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [FE]  NoSuchElementException  [FE]        NoSuchElementException      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	compilable	  [FE]  NoSuchElementException  	3	3	replace
17	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(other,  interpolator);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(other,  interpolator);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  state.evaluateStep(other,  interpolator);	  final    EventState    <    EventState>    remaining    =    state.evaluateStep(interpolator,    other);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	27	None	replace
18	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator,  other,  orderingSign);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator,  other,  orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator,  other,  orderingSign);	  final    EventState    <    EventState>    remaining    =    state.evaluateStep(interpolator,    other);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	27	None	replace
19	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(orderingSign,  warningSign);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(orderingSign,  warningSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(orderingSign,  warningSign);	  final    EventState    <    EventState>    remaining    =    eventsStates.get(ignoredSign,    orderingSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	2	None	replace
20	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(orderingSign,  ignoreSign);  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(orderingSign,  ignoreSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(orderingSign,  ignoreSign);	  final    EventState    <    EventState>    remaining    =    eventsStates.get(ignoredSign,    orderingSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	2	None	replace
21	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    NoSuchElementException    [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	13	None	add
22	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  Final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  ';'  expected  [FE]      NoSuchElementException    [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  Final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    Final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  ';'  expected	13	None	add
23	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name  +  2);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name  +  2);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(name  +  2);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(name    +    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	25	None	replace
24	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(occuringEvents);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(occuringEvents);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(occuringEvents);	  final    EventState    <    EventState>    remaining    =    eventsStates.get(ignoredEvents);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	1	None	replace
25	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(events);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(events);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(events);	  final    EventState    <    EventState>    remaining    =    eventsStates.get(ignoredEvents);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	1	None	replace
26	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  state.eventsInitialized.iterator();  [CE]  package  state  does  not  exist  [FE]          NoSuchElementException      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  state.eventsInitialized.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  Iterator  <  EventState>  iterator  =  state.eventsInitialized.iterator();	  final    Iterator    <    EventState>    iterator    =    eventsInitialized.iterator();    	non-compiled	[CE]  package  state  does  not  exist	15	None	replace
27	[BUG]  [BUGGY]  EventState[]  eventSignsInitialized  =  state.getEventsInitialized();  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  EventState[]  eventSignsInitialized  =  state.getEventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	EventState[]  eventSignsInitialized  =  state.getEventsInitialized();	  EventState[]    eventsInitialized    =    eventState.getEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol  state	20	None	replace
28	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(occuringSign  +  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(occuringSign  +  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(occuringSign  +  1);	  final    EventState    <    EventState>    remaining    =    eventsStates.get(ignoredSign    +    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	30	None	replace
29	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator,  this,  orderingSign);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator,  this,  orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator,  this,  orderingSign);	  final    EventState    <    EventState>    remaining    =    state.evaluateStep(interpolator,    this);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	17	None	replace
30	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  state.getEventStates();  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  state.getEventStates();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  state.getEventStates();	  final    EventState    <    EventState>    remaining    =    eventsStates.get(state);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	29	None	replace
31	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  currentEvent.getEventsInitialized();  [CE]  cannot  find  symbol  currentEvent  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  currentEvent.getEventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState[]  eventsInitialized  =  currentEvent.getEventsInitialized();	  final    EventState[]    eventsInitialized    =    state.getEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol  currentEvent	26	None	replace
32	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(interpolator);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(interpolator);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(interpolator);	  final    EventState    <    EventState>    remaining    =    eventsStates.get(state);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	29	None	replace
33	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  remaining);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  remaining);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  remaining);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(name,    state);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	28	None	replace
34	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(orderingSign);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(orderingSign);	  final    EventState    <    EventState>    remaining    =    eventsStates.get(occuringSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	21	None	replace
35	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  other.evaluateStep(interpolator,  state);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  other.evaluateStep(interpolator,  state);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  other.evaluateStep(interpolator,  state);	  final    EventState    <    EventState>    remaining    =    state.evaluateStep(interpolator,    other);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	27	None	replace
36	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(remainingEvents);  [CE]  cannot  find  symbol  remainingEvents  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(remainingEvents);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState[]  eventsInitialized  =  getEventsInitialized(remainingEvents);	  final    EventState[]    eventsInitialized    =    getEventsInitialized(occuringEvents);    	non-compiled	[CE]  cannot  find  symbol  remainingEvents	12	None	replace
37	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate(null);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate(null);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate(null);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(0).evaluate();    	non-compiled	[CE]  type  EventState  does  not  take  parameters	9	None	replace
38	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  eventState.getEventsInitialized();  [CE]  cannot  find  symbol  eventState  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  eventState.getEventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState[]  eventsInitialized  =  eventState.getEventsInitialized();	  final    EventState[]    eventsInitialized    =    state.getEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol  eventState	26	None	replace
39	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredEvents.size()  +  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredEvents.size()  +  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredEvents.size()  +  1);	  final    EventState    <    EventState>    remaining    =    eventsStates.get(ignoredSign    +    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	30	None	replace
40	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(remainingEvents);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(remainingEvents);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  state.evaluateStep(remainingEvents);	  final    EventState    <    EventState>    remaining    =    state.evaluateStep(occuringEvents);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	16	None	replace
41	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(name  -  1);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(name    +    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	25	None	replace
42	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(remainingSign  +  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(remainingSign  +  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(remainingSign  +  1);	  final    EventState    <    EventState>    remaining    =    eventsStates.get(ignoredSign    +    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	30	None	replace
43	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredSign  /  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredSign  /  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredSign  /  1);	  final    EventState    <    EventState>    remaining    =    eventsStates.get(ignoredSign    +    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	30	None	replace
44	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name  /  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name  /  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(name  /  1);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(name    +    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	25	None	replace
45	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredEvents.size());  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredEvents.size());  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredEvents.size());	  final    EventState    <    EventState>    remaining    =    eventsStates.get(ignoredEvents);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	1	None	replace
46	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  state.stepStart);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  state.stepStart);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  state.stepStart);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(name,    state);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	28	None	replace
47	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator,  event);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator,  event);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator,  event);	  final    EventState    <    EventState>    remaining    =    state.evaluateStep(interpolator,    this);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	17	None	replace
