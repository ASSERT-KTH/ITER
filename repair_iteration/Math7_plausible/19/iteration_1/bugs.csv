bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    final  EventState[]  eventsInitialized  =  getEventsInitialized();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {    [BUGGY]    final  EventState[]  eventsInitialized  =  getEventsInitialized();  [BUGGY]  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	    final  EventState[]  eventsInitialized  =  getEventsInitialized();		non-compiled	[CE]  cannot  find  symbol	38	None	add
2	[BUG]  [BUGGY]    EventState[]  eventsInitialized  =  state.getEventsInitialized();  [CE]  cannot  find  symbol  state  [FE]      AssertionError  [CONTEXT]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {    [BUGGY]    EventState[]  eventsInitialized  =  state.getEventsInitialized();  [BUGGY]  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	    EventState[]  eventsInitialized  =  state.getEventsInitialized();		non-compiled	[CE]  cannot  find  symbol  state	38	None	add
3	[BUG]  [BUGGY]    final  EventState[]  eventsInitialized  =  getEventsInitialized(events);  [CE]  cannot  find  symbol  events  [FE]        AssertionError  [CONTEXT]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {    [BUGGY]    final  EventState[]  eventsInitialized  =  getEventsInitialized(events);  [BUGGY]  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	    final  EventState[]  eventsInitialized  =  getEventsInitialized(events);		non-compiled	[CE]  cannot  find  symbol  events	38	None	add
4	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  events.iterator();  [CE]  cannot  find  symbol  events  [FE]    AssertionError  [CONTEXT]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {    [BUGGY]  final  Iterator  <  EventState>  iterator  =  events.iterator();  [BUGGY]  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  Iterator  <  EventState>  iterator  =  events.iterator();	final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  	non-compiled	[CE]  cannot  find  symbol  events	37	None	replace
5	[BUG]  [BUGGY]    final  EventState[]  remaining  =  eventsStates.toArray(new  EventState[occuringEvents.size()  ]);  [CE]  variable  remaining  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError  [CONTEXT]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {    [BUGGY]    final  EventState[]  remaining  =  eventsStates.toArray(new  EventState[occuringEvents.size()  ]);  [BUGGY]  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	    final  EventState[]  remaining  =  eventsStates.toArray(new  EventState[occuringEvents.size()  ]);		non-compiled	[CE]  variable  remaining  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	38	None	add
6	[BUG]  [BUGGY]    final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredSign);  [CE]  type  EventState  does  not  take  parameters  [FE]      AssertionError  [CONTEXT]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {    [BUGGY]    final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredSign);  [BUGGY]  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	    final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredSign);		non-compiled	[CE]  type  EventState  does  not  take  parameters	38	None	add
7	[BUG]  [BUGGY]    final  EventState  <  EventState>  remaining  =  eventsStates.get(0);  [CE]  type  EventState  does  not  take  parameters  [FE]        AssertionError  [CONTEXT]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {    [BUGGY]    final  EventState  <  EventState>  remaining  =  eventsStates.get(0);  [BUGGY]  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	    final  EventState  <  EventState>  remaining  =  eventsStates.get(0);		non-compiled	[CE]  type  EventState  does  not  take  parameters	38	None	add
8	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]    AssertionError  [CONTEXT]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {    [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	add	final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();	final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  	compilable	  [FE]  NoSuchElementException  	37	3	replace
9	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [FE]  NoSuchElementException  [FE]    AssertionError  [CONTEXT]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {    [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();	final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  	compilable	  [FE]  NoSuchElementException  	37	3	replace
10	[BUG]  [BUGGY]    final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator);  [CE]  type  EventState  does  not  take  parameters  [FE]    AssertionError  [CONTEXT]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {    [BUGGY]    final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator);  [BUGGY]  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	    final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator);		non-compiled	[CE]  type  EventState  does  not  take  parameters	38	None	add
11	[BUG]  [BUGGY]    final  EventState  <  EventState>  eventState  =  eventsStates.get(0);  [CE]  type  EventState  does  not  take  parameters  [FE]      AssertionError  [CONTEXT]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {    [BUGGY]    final  EventState  <  EventState>  eventState  =  eventsStates.get(0);  [BUGGY]  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	    final  EventState  <  EventState>  eventState  =  eventsStates.get(0);		non-compiled	[CE]  type  EventState  does  not  take  parameters	38	None	add
12	[BUG]  [BUGGY]    final  EventState  <  EventState>  eventState  =  eventsStates.get(name);  [CE]  type  EventState  does  not  take  parameters  [FE]        AssertionError  [CONTEXT]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {    [BUGGY]    final  EventState  <  EventState>  eventState  =  eventsStates.get(name);  [BUGGY]  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	    final  EventState  <  EventState>  eventState  =  eventsStates.get(name);		non-compiled	[CE]  type  EventState  does  not  take  parameters	38	None	add
