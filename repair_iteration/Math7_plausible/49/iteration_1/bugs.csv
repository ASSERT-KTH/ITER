bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  [BUGGY]    if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	    if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }		non-compiled	[CE]  illegal  start  of  expression	98	None	add
2	[BUG]  [BUGGY]    if(eventsStates!=  null)  {  for(final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  [BUGGY]    if(eventsStates!=  null)  {  for(final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	    if(eventsStates!=  null)  {  for(final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }		non-compiled	[CE]  illegal  start  of  expression	98	None	add
3	[BUG]  [BUGGY]    if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  [BUGGY]    if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	    if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }		non-compiled	[CE]  illegal  start  of  expression	98	None	add
4	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  [CE]  cannot  find  symbol  eventsInitialized  [FE]    AssertionError  [CONTEXT]  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  [BUGGY]  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  eventsInitialized)  {	for  (final  EventState  state  :  eventsStates)  {  	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	97	None	replace
5	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  [CE]  cannot  find  symbol  eventStates  [FE]      AssertionError  [CONTEXT]  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  [BUGGY]  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  eventStates.values())  {	for  (final  EventState  state  :  eventsStates)  {  	non-compiled	[CE]  cannot  find  symbol  eventStates	97	None	replace
6	[BUG]  [BUGGY]    if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  [BUGGY]    if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [BUGGY]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	    if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }		non-compiled	[CE]  illegal  start  of  expression	98	None	add
7	[BUG]  [BUGGY]    if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  [BUGGY]    if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	    if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }		non-compiled	[CE]  illegal  start  of  expression	98	None	add
8	[BUG]  [BUGGY]    if(eventsStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  [BUGGY]    if(eventsStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [BUGGY]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	    if(eventsStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }		non-compiled	[CE]  illegal  start  of  expression	98	None	add
9	[BUG]  [BUGGY]    if(eventsStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  [BUGGY]    if(eventsStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [BUGGY]  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	    if(eventsStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }		non-compiled	[CE]  illegal  start  of  expression	98	None	add
