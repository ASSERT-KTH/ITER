bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  state.stop();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  state.stop();  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stop();	  state.stepAccepted(currentT,    tEnd);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  state.stepAccepted(currentT,  t0);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  state.stepAccepted(currentT,  t0);  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(currentT,  t0);	  state.stepAccepted(currentT,    tEnd);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();	  if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
4	[BUG]  [BUGGY]  parent!=  null  &&(eventsStates.contains(currentT)||  eventsStates.contains(currentY)))  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  parent!=  null  &&(eventsStates.contains(currentT)||  eventsStates.contains(currentY)))  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	parent!=  null  &&(eventsStates.contains(currentT)||  eventsStates.contains(currentY)))  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();	  if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  not  a  statement	8	None	replace
5	[BUG]  [BUGGY]  ||  handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  ||  handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	      if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
6	[BUG]  [BUGGY]  ||  handler!=  null)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  ||  handler!=  null)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  handler!=  null)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	      if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  ||  tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  ||  tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
8	[BUG]  [BUGGY]  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();	  if(tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
9	[BUG]  [BUGGY]  parent!=  null)  {  for(final  EventState  state  :  parent.getEvents())  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  parent!=  null)  {  for(final  EventState  state  :  parent.getEvents())  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	parent!=  null)  {  for(final  EventState  state  :  parent.getEvents())  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	      if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  not  a  statement	5	None	replace
10	[BUG]  [BUGGY]  ||  tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  ||  tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	      if(tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
11	[BUG]  [BUGGY]  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();	      if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(isLastStep,    tEnd);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  ||  tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  ||  tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	      if(tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
13	[BUG]  [BUGGY]  ||  tEnd  >  0)  {  for(final  EventState  state  :  events)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  ||  tEnd  >  0)  {  for(final  EventState  state  :  events)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  >  0)  {  for(final  EventState  state  :  events)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	      if(tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
14	[BUG]  [BUGGY]  ||  tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  ||  tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	      if(tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
15	[BUG]  [BUGGY]  ||  tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  ||  tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	  if(tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
16	[BUG]  [BUGGY]  ||  tEnd  <  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  ||  tEnd  <  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  <  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	  if(tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
17	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tStart,  1);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  state.stepAccepted(currentT,  tStart,  1);  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(currentT,  tStart,  1);	  state.stepAccepted(currentT,    tEnd,    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
18	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  2);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  state.stepAccepted(currentT,  tEnd,  2);  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(currentT,  tEnd,  2);	  state.stepAccepted(currentT,    tEnd,    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
19	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }	      if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(isLastStep,    tEnd);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  if(eventsStates  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(eventsStates  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(eventsStates  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }	      if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(isLastStep,    tEnd);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
21	[BUG]  [BUGGY]  state.stepAccepted(currentT,  yDot);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  state.stepAccepted(currentT,  yDot);  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(currentT,  yDot);	  state.stepAccepted(currentT,    tEnd);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
22	[BUG]  [BUGGY]  luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	      if(tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	12	None	replace
23	[BUG]  [BUGGY]  luate(eventsStates,  tEnd,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  luate(eventsStates,  tEnd,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	      if(tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	12	None	replace
24	[BUG]  [BUGGY]  luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	      if(tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
25	[BUG]  [BUGGY]  luate(eventsStates,  tEnd,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  luate(eventsStates,  tEnd,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	      if(tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
26	[BUG]  [BUGGY]  tEnd  =  state.stop();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  tEnd  =  state.stop();  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	tEnd  =  state.stop();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
27	[BUG]  [BUGGY]  luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	      if(tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	11	None	replace
28	[BUG]  [BUGGY]  luate(eventsStates,  tEnd,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  luate(eventsStates,  tEnd,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	      if(tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	11	None	replace
29	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	      if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  if(handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stop();  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stop();  isLastStep  =  isLastStep;  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stop();  isLastStep  =  isLastStep;  }	      if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
31	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	      if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  if(eventsStates  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(eventsStates  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(eventsStates  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	      if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
33	[BUG]  [BUGGY]  state.stepAccepted(currentT,  yDot,  1);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  state.stepAccepted(currentT,  yDot,  1);  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(currentT,  yDot,  1);	  state.stepAccepted(currentT,    tEnd,    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
34	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
35	[BUG]  [BUGGY]  if(eventsStates  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(eventsStates  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(eventsStates  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
36	[BUG]  [BUGGY]  luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	  if(tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
37	[BUG]  [BUGGY]  luate(eventsStates,  tEnd)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  luate(eventsStates,  tEnd)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	9	None	replace
38	[BUG]  [BUGGY]  luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	9	None	replace
39	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  state.stepAccepted(currentT,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(currentT,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();	      if(tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
40	[BUG]  [BUGGY]  if(eventT!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(eventT!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(eventT!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	      if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
41	[BUG]  [BUGGY]  yDot  =  handler.getY();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  yDot  =  handler.getY();  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	yDot  =  handler.getY();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
42	[BUG]  [BUGGY]  yDot  =  handler.getY(currentT);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  yDot  =  handler.getY(currentT);  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	yDot  =  handler.getY(currentT);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
43	[BUG]  [BUGGY]  if(eventT!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(eventT!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(eventT!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  if(tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stop();  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stop();  isLastStep  =  isLastStep;  }  [BUGGY]      return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stop();  isLastStep  =  isLastStep;  }	  if(tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
45	[BUG]  [BUGGY]  facesInitializingEvents(eventT,  tEnd,  yDot)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  facesInitializingEvents(eventT,  tEnd,  yDot)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	facesInitializingEvents(eventT,  tEnd,  yDot)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	      if(tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
46	[BUG]  [BUGGY]  facesInitializingEvents(eventT,  tEnd,  yDot)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  facesInitializingEvents(eventT,  tEnd,  yDot)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]    }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	facesInitializingEvents(eventT,  tEnd,  yDot)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	      if(tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
