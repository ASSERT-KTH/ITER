bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]      if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException(   "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	add	        if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(   "   ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  AssertionError  	4	1	add
2	[BUG]  [BUGGY]      if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException(   "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]      if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException(   "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	        if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(   "   ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  AssertionError  	4	1	add
3	[BUG]  [BUGGY]  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!	      if(stepHandlers!=    null)    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(!    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!	      if(stepHandlers!=    null)    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(!    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	  if(stepHandlers!=    null)    {    for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	10	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.	  if(stepHandlers!=    null)    {    for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	10	None	replace
7	[BUG]  [BUGGY]  ||!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  ||!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	||!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( " ");  }	      if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  this.eventsStates.remove(handler);  fireSeriesChanged();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  this.eventsStates.remove(handler);  fireSeriesChanged();  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.remove(handler);  fireSeriesChanged();	  this.eventsStates.add(handler);    fireSeriesChanged();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	      if(stepHandlers!=    null)    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	12	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	      if(stepHandlers!=    null)    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	12	None	replace
11	[BUG]  [BUGGY]  this.eventsStates.add(handler,  expandable);  fireInitializingStep();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  this.eventsStates.add(handler,  expandable);  fireInitializingStep();  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.add(handler,  expandable);  fireInitializingStep();	      this.eventsStates.add(handler);    fireInitializingStep();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
12	[BUG]  [BUGGY]  this.eventsStates.add(handler,  stepStart);  fireInitializingStep();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  this.eventsStates.add(handler,  stepStart);  fireInitializingStep();  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.add(handler,  stepStart);  fireInitializingStep();	      this.eventsStates.add(handler);    fireInitializingStep();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  add(new  Integer(stepStart));  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  add(new  Integer(stepStart));  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	add(new  Integer(stepStart));	  add(new    Integer(stepSize));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
14	[BUG]  [BUGGY]  add(new  Integer(0));  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  add(new  Integer(0));  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	add(new  Integer(0));	  add(new    Integer(stepSize));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
15	[BUG]  [BUGGY]  this.eventsStates.add(handler,  expandable);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  this.eventsStates.add(handler,  expandable);  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.add(handler,  expandable);	  this.eventsStates.add(handler);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
16	[BUG]  [BUGGY]  ||!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  ||!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	||!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( " ");  }	      if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
17	[BUG]  [BUGGY]  if(!stepHandlers.contains(handler))  {  for(int  i  =  0;  i  <  stepSize;  i++)  {  addStepHandler(i,  handler);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  if(!stepHandlers.contains(handler))  {  for(int  i  =  0;  i  <  stepSize;  i++)  {  addStepHandler(i,  handler);  }  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(!stepHandlers.contains(handler))  {  for(int  i  =  0;  i  <  stepSize;  i++)  {  addStepHandler(i,  handler);  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]      if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	add	        if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	6	1	add
19	[BUG]  [BUGGY]      if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]      if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	        if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	6	1	add
20	[BUG]  [BUGGY]  if(stepSize!=  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  if(stepSize!=  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepSize!=  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	  if(stepHandlers!=    null)    {    for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	10	None	replace
21	[BUG]  [BUGGY]  if(stepSize  ==  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  if(stepSize  ==  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepSize  ==  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	  if(stepHandlers!=    null)    {    for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	10	None	replace
22	[BUG]  [BUGGY]  stepHandlers.add(handler);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  stepHandlers.add(handler);  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	stepHandlers.add(handler);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  if(stepHandlers!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  if(stepHandlers!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepHandlers!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
24	[BUG]  [BUGGY]  if(stepHandlers.contains(handler))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  if(stepHandlers.contains(handler))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepHandlers.contains(handler))  {  throw  new  IllegalStateException( " ");  }	      if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  if(hasErrors())  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  if(hasErrors())  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(hasErrors())  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	      if(stepHandlers!=    null)    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	12	None	replace
26	[BUG]  [BUGGY]  if(hasErrors())  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  if(hasErrors())  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(hasErrors())  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  }	      if(stepHandlers!=    null)    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	12	None	replace
27	[BUG]  [BUGGY]  int  stepSize  =  stepHandlers.size();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  int  stepSize  =  stepHandlers.size();  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	int  stepSize  =  stepHandlers.size();	      if(stepHandlers!=    null)    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(!    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
28	[BUG]  [BUGGY]  Integer  stepSize  =  getStepSize();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  Integer  stepSize  =  getStepSize();  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	Integer  stepSize  =  getStepSize();	      if(stepHandlers!=    null)    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(!    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
29	[BUG]  [BUGGY]  this.eventsStates.add(new  ExpandableStatefulODE(stepStart,  stepSize));  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  this.eventsStates.add(new  ExpandableStatefulODE(stepStart,  stepSize));  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.add(new  ExpandableStatefulODE(stepStart,  stepSize));	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
30	[BUG]  [BUGGY]  if(stepHandlers!=  null)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  if(stepHandlers!=  null)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepHandlers!=  null)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!	      if(stepHandlers!=    null)    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(!    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
31	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	throw  new  IllegalStateException( " ");	      if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  if(stepSize!=  0)  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  if(stepSize!=  0)  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepSize!=  0)  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	      if(stepHandlers!=    null)    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	12	None	replace
33	[BUG]  [BUGGY]  if(stepSize!=  null)  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  if(stepSize!=  null)  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepSize!=  null)  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	      if(stepHandlers!=    null)    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	12	None	replace
34	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	throw  new  IllegalArgumentException( " ");	      if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
35	[BUG]  [BUGGY]  parent.addStepHandler(handler);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);    [BUGGY]  parent.addStepHandler(handler);  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	parent.addStepHandler(handler);	      if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
