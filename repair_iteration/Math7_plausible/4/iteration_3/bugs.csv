bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(eventX,  0,  y,  0,  y.length);  [CE]  cannot  find  symbol  eventX  [FE]            AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventX,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventX,  0,  y,  0,  y.length);	          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventX,    0,    y,    0,    y.length);    	non-compiled	[CE]  cannot  find  symbol  eventX	25	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(eventX,  0,  y,  0,  eventY.length);  [CE]  cannot  find  symbol  eventX  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventX,  0,  y,  0,  eventY.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventX,  0,  y,  0,  eventY.length);	          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventX,    0,    y,    0,    y.length);    	non-compiled	[CE]  cannot  find  symbol  eventX	25	None	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  y.length);  System.arraycopy(yDot,  0,  y,  1,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(yDot,    0,    y,    1,    y.length);    System.arraycopy(yDot,  0,  y,  1,  y.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	3	add
4	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  y.length);  System.arraycopy(yDot,  0,  y,  1,  y.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  y.length);  System.arraycopy(yDot,  0,  y,  1,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,    0,    y,    1,    y.length);    System.arraycopy(yDot,  0,  y,  1,  y.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	3	add
5	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.stepAccepted(eventT,  eventY));  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.stepAccepted(eventT,  eventY));  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,    0,    y,    1,    y.length);    ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.stepAccepted(eventT,  eventY));	  	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	51	None	add
6	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.stepAccepted(eventT,  yDot));  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.stepAccepted(eventT,  yDot));  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,    0,    y,    1,    y.length);    ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.stepAccepted(eventT,  yDot));	  	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	51	None	add
7	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  currentEvent.length);  [CE]  cannot  find  symbol  length  [FE]        AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  currentEvent.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,  0,  yDot,  0,  currentEvent.length);	  System.arraycopy(y,    0,    yDot,    0,    yEnd.length);    	non-compiled	[CE]  cannot  find  symbol  length	26	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  currentT.length);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  currentT.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,  0,  yDot,  0,  currentT.length);	  System.arraycopy(y,    0,    yDot,    0,    yEnd.length);    	non-compiled	[CE]  double  cannot  be  dereferenced	26	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  yEnd.length);  [CE]  cannot  find  symbol  yEnd  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  yEnd.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,  0,  yDot,  0,  yEnd.length);	  System.arraycopy(yDot,    0,    yDot,    0,    yDot.length);    	non-compiled	[CE]  cannot  find  symbol  yEnd	47	None	replace
10	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot.length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	17	None	add
11	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot.length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	17	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	17	1	add
13	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	17	1	add
14	[BUG]  [BUGGY]  ensureDerivatives(eventT,  y,  tEnd,  currentT);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  ensureDerivatives(eventT,  y,  tEnd,  currentT);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	ensureDerivatives(eventT,  y,  tEnd,  currentT);	  ensureDerivatives(eventT,    y,    tEnd,    t0);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
15	[BUG]  [BUGGY]  ensureDerivatives(eventT,  y,  tEnd,  tSize);  [CE]  cannot  find  symbol  tSize  [FE]                AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  ensureDerivatives(eventT,  y,  tEnd,  tSize);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	ensureDerivatives(eventT,  y,  tEnd,  tSize);	  ensureDerivatives(eventT,    y,    tEnd,    t0);    	non-compiled	[CE]  cannot  find  symbol  tSize	58	None	replace
16	[BUG]  [BUGGY]  computeDerivatives(eventT,  y,  yDot,  tEnd);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  computeDerivatives(eventT,  y,  yDot,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	computeDerivatives(eventT,  y,  yDot,  tEnd);	  computeDerivatives(eventT,    y,    t0,    tEnd);    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	57	None	replace
17	[BUG]  [BUGGY]  computeDerivatives(eventT,  y,  y.length,  tEnd);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  computeDerivatives(eventT,  y,  y.length,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	computeDerivatives(eventT,  y,  y.length,  tEnd);	  computeDerivatives(eventT,    y,    t0,    tEnd);    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	57	None	replace
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  y,  1,  yDot.length);  System.arraycopy(y,  0,  y,  1,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(y,    0,    y,    1,    yDot.length);    System.arraycopy(y,  0,  y,  1,  yDot.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	3	add
19	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  1,  yDot.length);  System.arraycopy(y,  0,  y,  1,  yDot.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  y,  1,  yDot.length);  System.arraycopy(y,  0,  y,  1,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    y,    1,    yDot.length);    System.arraycopy(y,  0,  y,  1,  yDot.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	3	add
20	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  1,  yDot.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(eventY.length);  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  y,  1,  yDot.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(eventY.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    y,    1,    yDot.length);    ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(eventY.length);	  	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	14	None	add
21	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  1,  yDot.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(eventT.length());  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  y,  1,  yDot.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(eventT.length());  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    y,    1,    yDot.length);    ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(eventT.length());	  	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	14	None	add
22	[BUG]  [BUGGY]  luateDerivatives(eventT,  y,  tEnd,  orderingSign);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  luateDerivatives(eventT,  y,  tEnd,  orderingSign);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	luateDerivatives(eventT,  y,  tEnd,  orderingSign);	  if(isLastStep)    {    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    }    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
23	[BUG]  [BUGGY]  allowReturn(eventT,  y,  tEnd,  orderingSign);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  allowReturn(eventT,  y,  tEnd,  orderingSign);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	allowReturn(eventT,  y,  tEnd,  orderingSign);	  if(isLastStep)    {    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    }    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(y,    0,    yDot,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	60	1	add
25	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    yDot,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	60	1	add
26	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        NumberIsTooSmallException      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(currentEvent,  0,  y,  0,  eventY.length);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(currentEvent,  0,  y,  0,  eventY.length);	          System.arraycopy(eventY,    0,    y,    0,    currentEvent.length);    	compilable	  [FE]  ArrayStoreException  	7	3	replace
27	[BUG]  [BUGGY]  System.arraycopy(currentEvent,  0,  y,  0,  eventY.length);  [FE]  ArrayStoreException  [FE]        NumberIsTooSmallException      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(currentEvent,  0,  y,  0,  eventY.length);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(currentEvent,  0,  y,  0,  eventY.length);	          System.arraycopy(eventY,    0,    y,    0,    currentEvent.length);    	compilable	  [FE]  ArrayStoreException  	7	3	replace
28	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  tEnd,  currentT);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  tEnd,  currentT);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,  0,  yDot,  tEnd,  currentT);	  System.arraycopy(eventY,    0,    yDot,    tEnd,    t0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	10	None	replace
29	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  tEnd,  stateInitialized);  [CE]  cannot  find  symbol  stateInitialized  [FE]                AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  tEnd,  stateInitialized);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,  0,  yDot,  tEnd,  stateInitialized);	  System.arraycopy(eventY,    0,    yDot,    tEnd,    t0);    	non-compiled	[CE]  cannot  find  symbol  stateInitialized	10	None	replace
30	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  y.length);  System.arraycopy(y,  0,  yDot,  1,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(y,    0,    yDot,    1,    y.length);    System.arraycopy(y,  0,  yDot,  1,  y.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	3	add
31	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  y.length);  System.arraycopy(y,  0,  yDot,  1,  y.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  y.length);  System.arraycopy(y,  0,  yDot,  1,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    yDot,    1,    y.length);    System.arraycopy(y,  0,  yDot,  1,  y.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	3	add
32	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(eventT.length());  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(eventT.length());  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    yDot,    1,    y.length);    ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(eventT.length());	  	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	12	None	add
33	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(eventY.length);  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(eventY.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    yDot,    1,    y.length);    ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(eventY.length);	  	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	12	None	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(eventY,    0,    yDot,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	37	1	add
35	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,    0,    yDot,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	37	1	add
36	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventX,  0,  yDot,  0,  y.length);  [CE]  cannot  find  symbol  eventX  [FE]      NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventX,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,    0,    yDot,    0,    y.length);    System.arraycopy(eventX,  0,  yDot,  0,  y.length);	  	non-compiled	[CE]  cannot  find  symbol  eventX	37	None	add
37	[BUG]  [BUGGY]  state.addDerivatives(eventT,  y,  tStart,  tEnd);  [CE]  cannot  find  symbol  tStart  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  state.addDerivatives(eventT,  y,  tStart,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	state.addDerivatives(eventT,  y,  tStart,  tEnd);	  if(isLastStep)    {    computeDerivatives(eventT,    y,    tStart,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  tStart	50	None	replace
38	[BUG]  [BUGGY]  state.addDerivatives(eventT,  y,  tEnd,  isLastStep);  [CE]  cannot  find  symbol  state  [FE]                AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  state.addDerivatives(eventT,  y,  tEnd,  isLastStep);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	state.addDerivatives(eventT,  y,  tEnd,  isLastStep);	  if(isLastStep)    {    computeDerivatives(eventT,    y,    tStart,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  state	50	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  currentEvent.length);  [CE]  cannot  find  symbol  length  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  currentEvent.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,  0,  yDot,  1,  currentEvent.length);	  System.arraycopy(y,    0,    yDot,    1,    y.length);    	non-compiled	[CE]  cannot  find  symbol  length	13	None	replace
40	[BUG]  [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y.length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	21	None	add
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	21	1	add
42	[BUG]  [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	21	1	add
43	[BUG]  [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventY,  0,  y.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventY,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventY,  0,  y.length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	21	None	add
44	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y.length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	1	None	add
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	1	1	add
46	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	1	1	add
47	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  y.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  y.length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	1	None	add
48	[BUG]  [BUGGY]  [FE]  NumberIsTooSmallException  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(yDot,  0,  yDot,  0,  y.length);	          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,    0,    yDot,    0,    y.length);    	compilable	  [FE]  NumberIsTooSmallException  	42	2	replace
49	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  y.length);  [FE]  NumberIsTooSmallException  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,  0,  yDot,  0,  y.length);	          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,    0,    yDot,    0,    y.length);    	compilable	  [FE]  NumberIsTooSmallException  	42	2	replace
50	[BUG]  [BUGGY]  state.addDerivatives(eventT,  yDot,  tEnd);  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  state.addDerivatives(eventT,  yDot,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	state.addDerivatives(eventT,  yDot,  tEnd);	  state.addDerivatives(eventT,    y,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  state	35	None	replace
51	[BUG]  [BUGGY]  ensureCapacity(currentEvent.getValue(),  eventT,  tEnd);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  ensureCapacity(currentEvent.getValue(),  eventT,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	ensureCapacity(currentEvent.getValue(),  eventT,  tEnd);	  ensureCapacity(y.getValue(),    eventT,    tEnd);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
52	[BUG]  [BUGGY]  ensureCapacity(y.getValue(),  t0,  tEnd);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  ensureCapacity(y.getValue(),  t0,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	ensureCapacity(y.getValue(),  t0,  tEnd);	  ensureCapacity(y.getValue(),    eventT,    tEnd);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
53	[BUG]  [BUGGY]  ensureDerivatives(eventT,  y,  orderingSign,  tEnd);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  ensureDerivatives(eventT,  y,  orderingSign,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	ensureDerivatives(eventT,  y,  orderingSign,  tEnd);	  ensureDerivatives(eventT,    y,    tEnd,    orderingSign);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
54	[BUG]  [BUGGY]  ensureDerivatives(eventT,  orderingSign,  y,  tEnd);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  ensureDerivatives(eventT,  orderingSign,  y,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	ensureDerivatives(eventT,  orderingSign,  y,  tEnd);	  ensureDerivatives(eventT,    y,    tEnd,    orderingSign);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  currentT,  tEnd,  orderSign);  [CE]  cannot  find  symbol  orderSign  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  currentT,  tEnd,  orderSign);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,  0,  yDot,  currentT,  tEnd,  orderSign);	  System.arraycopy(eventY,    0,    yDot,    currentT,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  orderSign	36	None	replace
56	[BUG]  [BUGGY]  System.arraycopy(currentT,  0,  yDot,  eventY,  tEnd);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(currentT,  0,  yDot,  eventY,  tEnd);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(currentT,  0,  yDot,  eventY,  tEnd);	  System.arraycopy(eventY,    0,    yDot,    currentT,    tEnd);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	36	None	replace
57	[BUG]  [BUGGY]  state.acceptStep(es0,  y,  tEnd);  [CE]  cannot  find  symbol  es0  [FE]            AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  state.acceptStep(es0,  y,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	state.acceptStep(es0,  y,  tEnd);	  state.acceptStep(eventT,    y,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  es0	34	None	replace
58	[BUG]  [BUGGY]  computeDerivatives(eventT,  orderingSign,  y,  tEnd);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  computeDerivatives(eventT,  orderingSign,  y,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	computeDerivatives(eventT,  orderingSign,  y,  tEnd);	  computeDerivatives(eventT,    y,    tEnd,    orderingSign);    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	6	None	replace
59	[BUG]  [BUGGY]  computeDerivatives(eventT,  y,  orderingSign,  tEnd);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  computeDerivatives(eventT,  y,  orderingSign,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	computeDerivatives(eventT,  y,  orderingSign,  tEnd);	  computeDerivatives(eventT,    y,    tEnd,    orderingSign);    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	6	None	replace
60	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  1,  currentY.length);  [CE]  cannot  find  symbol  currentY  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  y,  1,  currentY.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,  0,  y,  1,  currentY.length);	  System.arraycopy(y,    0,    y,    1,    yDot.length);    	non-compiled	[CE]  cannot  find  symbol  currentY	15	None	replace
61	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  tEnd.length);  [CE]  double  cannot  be  dereferenced  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  tEnd.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,  0,  y,  1,  tEnd.length);	  System.arraycopy(y,    0,    y,    1,    yDot.length);    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
62	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        1,        y.length);        System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  y.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	3	add
63	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  y.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        1,        y.length);        System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  y.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	3	add
64	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        1,        y.length);        System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	3	add
65	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  y.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        1,        y.length);        System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	3	add
66	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        1,        y.length);        System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  yDot.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	3	add
67	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  yDot.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        1,        y.length);        System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  System.arraycopy(y,  0,  y,  1,  yDot.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	3	add
68	[BUG]  [BUGGY]  System.arraycopy(eventSize,  0,  y,  0,  y.length);  [CE]  cannot  find  symbol  eventSize  [FE]        AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventSize,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventSize,  0,  y,  0,  y.length);	          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventSize,    0,    y,    0,    y.length);    	non-compiled	[CE]  cannot  find  symbol  eventSize	62	None	replace
69	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]          AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(currentEvent,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(currentEvent,  0,  y,  0,  y.length);	          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventSize,    0,    y,    0,    y.length);    	compilable	  [FE]  ArrayStoreException  	62	3	replace
70	[BUG]  [BUGGY]  System.arraycopy(currentEvent,  0,  y,  0,  y.length);  [FE]  ArrayStoreException  [FE]          AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(currentEvent,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(currentEvent,  0,  y,  0,  y.length);	          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventSize,    0,    y,    0,    y.length);    	compilable	  [FE]  ArrayStoreException  	62	3	replace
71	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  tEnd,  tEnd);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  tEnd,  tEnd);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,  0,  yDot,  tEnd,  tEnd);	  System.arraycopy(eventY,    0,    yDot,    t0,    tEnd);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	48	None	replace
72	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y.length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	53	None	add
73	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y.length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	53	None	add
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	53	1	add
75	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	53	1	add
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    yDot,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	23	1	add
77	[BUG]  [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    yDot,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	23	1	add
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    yDot,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	23	1	add
79	[BUG]  [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    yDot,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	23	1	add
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    yDot,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	23	1	add
81	[BUG]  [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    yDot,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	23	1	add
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    yDot,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	19	1	add
83	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    yDot,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	19	1	add
84	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    yDot,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot.length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	19	None	add
85	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    yDot,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot.length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	19	None	add
86	[BUG]  [BUGGY]  ensureCapacity(y.getValue(),  currentEvent,  tEnd);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  ensureCapacity(y.getValue(),  currentEvent,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	ensureCapacity(y.getValue(),  currentEvent,  tEnd);	  ensureCapacity(currentEvent.getValue(),    y,    tEnd);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  yDot.length);  System.arraycopy(eventY,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(eventY,    0,    yDot,    0,    yDot.length);    System.arraycopy(eventY,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	44	1	add
88	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  yDot.length);  System.arraycopy(eventY,  0,  yDot,  0,  yDot.length);  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  yDot.length);  System.arraycopy(eventY,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,    0,    yDot,    0,    yDot.length);    System.arraycopy(eventY,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	44	1	add
89	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  yDot.length);  System.arraycopy(eventX,  0,  yDot,  0,  yDot.length);  [CE]  cannot  find  symbol  eventX  [FE]      NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  yDot.length);  System.arraycopy(eventX,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,    0,    yDot,    0,    yDot.length);    System.arraycopy(eventX,  0,  yDot,  0,  yDot.length);	  	non-compiled	[CE]  cannot  find  symbol  eventX	44	None	add
90	[BUG]  [BUGGY]  ensureDerivatives(eventT,  yDot,  tEnd,  orderingSign);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  ensureDerivatives(eventT,  yDot,  tEnd,  orderingSign);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	ensureDerivatives(eventT,  yDot,  tEnd,  orderingSign);	  ensureDerivatives(eventT,    yDot,    tEnd);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
91	[BUG]  [BUGGY]  ensureDerivatives(eventT,  yDot,  tEnd,  orderSign);  [CE]  cannot  find  symbol  orderSign  [FE]                  AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  ensureDerivatives(eventT,  yDot,  tEnd,  orderSign);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	ensureDerivatives(eventT,  yDot,  tEnd,  orderSign);	  ensureDerivatives(eventT,    yDot,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  orderSign	59	None	replace
92	[BUG]  [BUGGY]  Arrays.arraycopy(y,  0,  y,  1,  y.length);  [CE]  cannot  find  symbol  Arrays  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  Arrays.arraycopy(y,  0,  y,  1,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	Arrays.arraycopy(y,  0,  y,  1,  y.length);	          System.arraycopy(y,    0,    y,    1,    y.length);    Arrays.arraycopy(y,    0,    y,    1,    y.length);    	non-compiled	[CE]  cannot  find  symbol  Arrays	43	None	replace
93	[BUG]  [BUGGY]  Arrays.arraycopy(y,  0,  y,  1,  yDot.length);  [CE]  cannot  find  symbol  Arrays  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  Arrays.arraycopy(y,  0,  y,  1,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	Arrays.arraycopy(y,  0,  y,  1,  yDot.length);	          System.arraycopy(y,    0,    y,    1,    y.length);    Arrays.arraycopy(y,    0,    y,    1,    y.length);    	non-compiled	[CE]  cannot  find  symbol  Arrays	43	None	replace
94	[BUG]  [BUGGY]  [FE]  NumberIsTooSmallException  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  eventY,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(yDot,  0,  eventY,  0,  yDot.length);	  System.arraycopy(eventY,    0,    yDot,    0,    yDot.length);    	compilable	  [FE]  NumberIsTooSmallException  	45	2	replace
95	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  eventY,  0,  yDot.length);  [FE]  NumberIsTooSmallException  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  eventY,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,  0,  eventY,  0,  yDot.length);	  System.arraycopy(eventY,    0,    yDot,    0,    yDot.length);    	compilable	  [FE]  NumberIsTooSmallException  	45	2	replace
96	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  yEnd.length);  [CE]  cannot  find  symbol  yEnd  [FE]      NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  yEnd.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,  0,  yDot,  0,  yEnd.length);	  System.arraycopy(eventY,    0,    yDot,    0,    yDot.length);    	non-compiled	[CE]  cannot  find  symbol  yEnd	45	None	replace
97	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  yEnd);  [CE]  cannot  find  symbol  yEnd  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  yEnd);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,  0,  yDot,  0,  yEnd);	  System.arraycopy(y,    0,    yDot,    0,    y.length);    	non-compiled	[CE]  cannot  find  symbol  yEnd	28	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  eventY,  0,  y.length);  System.arraycopy(y,  0,  eventY,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(y,    0,    eventY,    0,    y.length);    System.arraycopy(y,  0,  eventY,  0,  y.length);	  	compilable	  [FE]  AssertionError  	3	1	add
99	[BUG]  [BUGGY]  System.arraycopy(y,  0,  eventY,  0,  y.length);  System.arraycopy(y,  0,  eventY,  0,  y.length);  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  eventY,  0,  y.length);  System.arraycopy(y,  0,  eventY,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    eventY,    0,    y.length);    System.arraycopy(y,  0,  eventY,  0,  y.length);	  	compilable	  [FE]  AssertionError  	3	1	add
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  eventY,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(y,    0,    eventY,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	3	1	add
101	[BUG]  [BUGGY]  System.arraycopy(y,  0,  eventY,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  [FE]  AssertionError  [FE]      NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  eventY,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    eventY,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	3	1	add
102	[BUG]  [BUGGY]  [FE]  NoBracketingException  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  0,  y.length);  System.arraycopy(yDot,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(yDot,    0,    y,    0,    y.length);    System.arraycopy(yDot,  0,  y,  0,  y.length);	  	compilable	  [FE]  NoBracketingException  	29	2	add
103	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  y,  0,  y.length);  System.arraycopy(yDot,  0,  y,  0,  y.length);  [FE]  NoBracketingException  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  0,  y.length);  System.arraycopy(yDot,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,    0,    y,    0,    y.length);    System.arraycopy(yDot,  0,  y,  0,  y.length);	  	compilable	  [FE]  NoBracketingException  	29	2	add
104	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  y,  0,  y.length);  yDot,  0,  y,  0,  y.length);  [CE]  not  a  statement  [FE]      NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  0,  y.length);  yDot,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,    0,    y,    0,    y.length);    yDot,  0,  y,  0,  y.length);	  	non-compiled	[CE]  not  a  statement	29	None	add
105	[BUG]  [BUGGY]  [FE]  NumberIsTooSmallException  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  }  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  }	          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,    0,    yDot,    0,    y.length);    	compilable	  [FE]  NumberIsTooSmallException  	24	2	replace
106	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  }  [FE]  NumberIsTooSmallException  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  }  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  }	          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,    0,    yDot,    0,    y.length);    	compilable	  [FE]  NumberIsTooSmallException  	24	2	replace
107	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    yDot,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	41	1	add
108	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    yDot,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	41	1	add
109	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    yDot,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	41	1	add
110	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    yDot,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	41	1	add
111	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    yDot,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	41	1	add
112	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    yDot,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	41	1	add
113	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(y,    0,    yDot,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	27	1	add
114	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    yDot,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	27	1	add
115	[BUG]  [BUGGY]  ensureDerivatives(eventT,  y,  tEnd,  t1);  [CE]  cannot  find  symbol  t1  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  ensureDerivatives(eventT,  y,  tEnd,  t1);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	ensureDerivatives(eventT,  y,  tEnd,  t1);	  ensureDerivatives(eventT,    y,    tEnd,    orderSign);    	non-compiled	[CE]  cannot  find  symbol  t1	31	None	replace
116	[BUG]  [BUGGY]  tryDerivatives(eventT,  y,  tEnd,  isLastStep);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  tryDerivatives(eventT,  y,  tEnd,  isLastStep);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	tryDerivatives(eventT,  y,  tEnd,  isLastStep);	  if(isLastStep)    {    computeDerivatives(eventT,    y,    tEnd,    t0);    }    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(yDot,    0,    yDot,    0,    yDot.length);    System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	46	1	add
118	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,    0,    yDot,    0,    yDot.length);    System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	46	1	add
119	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  System.arraycopy(yElement,  0,  yDot,  0,  yElement.length);  [CE]  cannot  find  symbol  yElement  [FE]      NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  System.arraycopy(yElement,  0,  yDot,  0,  yElement.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,    0,    yDot,    0,    yDot.length);    System.arraycopy(yElement,  0,  yDot,  0,  yElement.length);	  	non-compiled	[CE]  cannot  find  symbol  yElement	46	None	add
120	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  System.arraycopy(ySign,  0,  yDot,  0,  ySign.length);  [CE]  cannot  find  symbol  ySign  [FE]        NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  System.arraycopy(ySign,  0,  yDot,  0,  ySign.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,    0,    yDot,    0,    yDot.length);    System.arraycopy(ySign,  0,  yDot,  0,  ySign.length);	  	non-compiled	[CE]  cannot  find  symbol  ySign	46	None	add
121	[BUG]  [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	21	None	add
122	[BUG]  [BUGGY]  computeDerivatives(eventT,  y,  t1,  tEnd);  [CE]  cannot  find  symbol  t1  [FE]            AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  computeDerivatives(eventT,  y,  t1,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	computeDerivatives(eventT,  y,  t1,  tEnd);	  computeDerivatives(eventT,    y,    tStart,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t1	5	None	replace
123	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.length);  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        1,        y.length);        System.arraycopy(y,    0,    y,    1,    y.length);    ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.length);	  	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	8	None	add
124	[BUG]  [BUGGY]  ensureDerivatives(eventT,  y,  tStart,  tEnd);  [CE]  cannot  find  symbol  tStart  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  ensureDerivatives(eventT,  y,  tStart,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	ensureDerivatives(eventT,  y,  tStart,  tEnd);	  ensureDerivatives(eventT,    y,    tEnd,    t0);    	non-compiled	[CE]  cannot  find  symbol  tStart	58	None	replace
125	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  System.arraycopy(yDerivatives,  0,  yDot,  0,  yDot.length);  [CE]  cannot  find  symbol  yDerivatives  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  System.arraycopy(yDerivatives,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,    0,    yDot,    0,    yDot.length);    System.arraycopy(yDerivatives,  0,  yDot,  0,  yDot.length);	  	non-compiled	[CE]  cannot  find  symbol  yDerivatives	46	None	add
126	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  System.arraycopy(ySign,  0,  yDot,  0,  yDot.length);  [CE]  cannot  find  symbol  ySign  [FE]      NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  System.arraycopy(ySign,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,    0,    yDot,    0,    yDot.length);    System.arraycopy(ySign,  0,  yDot,  0,  yDot.length);	  	non-compiled	[CE]  cannot  find  symbol  ySign	46	None	add
127	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    yDot,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	41	1	add
128	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    yDot,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	41	1	add
129	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.length);  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    yDot,    1,    y.length);    ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.length);	  	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	12	None	add
130	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  y.length);  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(remaining.length);  [CE]  cannot  find  symbol  remaining  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  y.length);  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(remaining.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    yDot,    1,    y.length);    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(remaining.length);	  	non-compiled	[CE]  cannot  find  symbol  remaining	12	None	add
131	[BUG]  [BUGGY]  if(isLastStep)  {  computeDerivatives(eventT,  y,  tEnd,  currentT);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  if(isLastStep)  {  computeDerivatives(eventT,  y,  tEnd,  currentT);  }  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	if(isLastStep)  {  computeDerivatives(eventT,  y,  tEnd,  currentT);  }	  if(isLastStep)    {    computeDerivatives(eventT,    y,    tEnd,    t0);    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	49	None	replace
132	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  currentT,  tEnd,  orderingSign);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  currentT,  tEnd,  orderingSign);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,  0,  yDot,  currentT,  tEnd,  orderingSign);	  System.arraycopy(eventY,    0,    yDot,    currentT,    tEnd);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	36	None	replace
133	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    yDot,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	19	1	add
134	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    yDot,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	19	1	add
135	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    yDot,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	19	1	add
136	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    yDot,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	19	1	add
137	[BUG]  [BUGGY]  System.arraycopy(y,  0,  eventY,  0,  y.length);  System.arraycopy(x,  0,  eventY,  0,  y.length);  [CE]  cannot  find  symbol  x  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  eventY,  0,  y.length);  System.arraycopy(x,  0,  eventY,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    eventY,    0,    y.length);    System.arraycopy(x,  0,  eventY,  0,  y.length);	  	non-compiled	[CE]  cannot  find  symbol  x	3	None	add
138	[BUG]  [BUGGY]  ensureCapacity(currentEvent.getValue(),  y,  tStart);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  ensureCapacity(currentEvent.getValue(),  y,  tStart);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	ensureCapacity(currentEvent.getValue(),  y,  tStart);	  ensureCapacity(currentEvent.getValue(),    y,    tEnd);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
139	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  y,  1,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(eventY,  0,  y,  1,  yDot.length);	  System.arraycopy(y,    0,    y,    1,    yDot.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	3	replace
140	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  y,  1,  yDot.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  y,  1,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,  0,  y,  1,  yDot.length);	  System.arraycopy(y,    0,    y,    1,    yDot.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	3	replace
141	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(yDot,  0,  y,  1,  yDot.length);	  System.arraycopy(y,    0,    y,    1,    yDot.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	3	replace
142	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  yDot.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,  0,  y,  1,  yDot.length);	  System.arraycopy(y,    0,    y,    1,    yDot.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	3	replace
143	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  yDot);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  yDot);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  yDot);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	1	None	add
144	[BUG]  [BUGGY]  if(orderingSign)  {  computeDerivatives(eventT,  y,  tEnd,  isLastStep);  }  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  if(orderingSign)  {  computeDerivatives(eventT,  y,  tEnd,  isLastStep);  }  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	if(orderingSign)  {  computeDerivatives(eventT,  y,  tEnd,  isLastStep);  }	  if(isLastStep)    {    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    }    	non-compiled	[CE]  incompatible  types	40	None	replace
145	[BUG]  [BUGGY]  if(isLastStep)  {  computeDerivatives(eventT,  y,  tStart,  tEnd,  orderingSign);  }  [CE]  cannot  find  symbol  tStart  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  if(isLastStep)  {  computeDerivatives(eventT,  y,  tStart,  tEnd,  orderingSign);  }  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	if(isLastStep)  {  computeDerivatives(eventT,  y,  tStart,  tEnd,  orderingSign);  }	  if(isLastStep)    {    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    }    	non-compiled	[CE]  cannot  find  symbol  tStart	40	None	replace
146	[BUG]  [BUGGY]  if(isLastStep)  {  computeDerivatives(eventT,  y,  t0,  tEnd);  }  [CE]  cannot  find  symbol  t0  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  if(isLastStep)  {  computeDerivatives(eventT,  y,  t0,  tEnd);  }  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	if(isLastStep)  {  computeDerivatives(eventT,  y,  t0,  tEnd);  }	  if(isLastStep)    {    computeDerivatives(eventT,    y,    tStart,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  t0	50	None	replace
147	[BUG]  [BUGGY]  if(isLastStep)  {  computeDerivatives(eventT,  y,  t1,  tEnd);  }  [CE]  cannot  find  symbol  t1  [FE]                AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  if(isLastStep)  {  computeDerivatives(eventT,  y,  t1,  tEnd);  }  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	if(isLastStep)  {  computeDerivatives(eventT,  y,  t1,  tEnd);  }	  if(isLastStep)    {    computeDerivatives(eventT,    y,    tStart,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  t1	50	None	replace
148	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  tEnd,  t1);  [CE]  cannot  find  symbol  t1  [FE]                AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  tEnd,  t1);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,  0,  yDot,  tEnd,  t1);	  System.arraycopy(eventY,    0,    yDot,    tEnd,    orderSign);    	non-compiled	[CE]  cannot  find  symbol  t1	11	None	replace
149	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  y,  0,  y.length);  System.arraycopy(xDot,  0,  y,  0,  y.length);  [CE]  cannot  find  symbol  xDot  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  0,  y.length);  System.arraycopy(xDot,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,    0,    y,    0,    y.length);    System.arraycopy(xDot,  0,  y,  0,  y.length);	  	non-compiled	[CE]  cannot  find  symbol  xDot	29	None	add
150	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  1,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(eventY,  0,  yDot,  1,  y.length);	  System.arraycopy(y,    0,    yDot,    1,    y.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	3	replace
151	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  1,  y.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  1,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,  0,  yDot,  1,  y.length);	  System.arraycopy(y,    0,    yDot,    1,    y.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	3	replace
152	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  yEnd);  [CE]  cannot  find  symbol  yEnd  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  yEnd);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,  0,  yDot,  1,  yEnd);	  System.arraycopy(y,    0,    yDot,    1,    y.length);    	non-compiled	[CE]  cannot  find  symbol  yEnd	13	None	replace
153	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(y,    0,    yDot,    0,    yDot.length);    System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	60	1	add
154	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    yDot,    0,    yDot.length);    System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	60	1	add
155	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  currentEvent.length);  [CE]  cannot  find  symbol  length  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  currentEvent.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,  0,  yDot,  0,  currentEvent.length);	  System.arraycopy(eventY,    0,    yDot,    0,    yDot.length);    	non-compiled	[CE]  cannot  find  symbol  length	45	None	replace
156	[BUG]  [BUGGY]  System.arraycopy(currentEvent,  0,  y,  0,  currentEvent.length);  [CE]  cannot  find  symbol  length  [FE]        NumberIsTooSmallException      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(currentEvent,  0,  y,  0,  currentEvent.length);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(currentEvent,  0,  y,  0,  currentEvent.length);	          System.arraycopy(eventY,    0,    y,    0,    currentEvent.length);    	non-compiled	[CE]  cannot  find  symbol  length	7	None	replace
157	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  currentEvent.length,  tEnd);  [CE]  cannot  find  symbol  length  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  currentEvent.length,  tEnd);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,  0,  yDot,  currentEvent.length,  tEnd);	  System.arraycopy(eventY,    0,    yDot,    t0,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  length	48	None	replace
158	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	53	None	add
159	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  1,  yDot.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.length);  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  y,  1,  yDot.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    y,    1,    yDot.length);    ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.length);	  	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	14	None	add
160	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  1,  yDot.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.size());  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  y,  1,  yDot.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.size());  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    y,    1,    yDot.length);    ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.size());	  	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	14	None	add
161	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  y,  1,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(eventY,  0,  y,  1,  y.length);	  System.arraycopy(yDot,    0,    y,    1,    y.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	52	3	replace
162	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  y,  1,  y.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  y,  1,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,  0,  y,  1,  y.length);	  System.arraycopy(yDot,    0,    y,    1,    y.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	52	3	replace
163	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(yDot,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(y,    0,    yDot,    0,    y.length);    System.arraycopy(yDot,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	27	1	add
164	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(yDot,  0,  yDot,  0,  y.length);  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(yDot,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    yDot,    0,    y.length);    System.arraycopy(yDot,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	27	1	add
165	[BUG]  [BUGGY]  Arrays.arraycopy(eventY,  0,  yDot,  0,  y.length);  [CE]  cannot  find  symbol  Arrays  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  Arrays.arraycopy(eventY,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	Arrays.arraycopy(eventY,  0,  yDot,  0,  y.length);	          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,    0,    yDot,    0,    y.length);    	non-compiled	[CE]  cannot  find  symbol  Arrays	24	None	replace
166	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.length);  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,    0,    y,    1,    y.length);    ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(remaining.length);	  	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	51	None	add
167	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(eventY);  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(eventY);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,    0,    y,    1,    y.length);    ArrayIndexOutOfBoundsException  yDot  =  new  ArrayIndexOutOfBoundsException(eventY);	  	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	51	None	add
168	[BUG]  [BUGGY]  computeDerivatives(eventT,  y,  tEnd,  orderingSign,  isLastStep);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  computeDerivatives(eventT,  y,  tEnd,  orderingSign,  isLastStep);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	computeDerivatives(eventT,  y,  tEnd,  orderingSign,  isLastStep);	  computeDerivatives(eventT,    y,    tEnd,    orderingSign);    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	6	None	replace
169	[BUG]  [BUGGY]  computeDerivatives(eventT,  y,  tStart,  tEnd,  orderingSign);  [CE]  cannot  find  symbol  tStart  [FE]                AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  computeDerivatives(eventT,  y,  tStart,  tEnd,  orderingSign);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	computeDerivatives(eventT,  y,  tStart,  tEnd,  orderingSign);	  computeDerivatives(eventT,    y,    tEnd,    orderingSign);    	non-compiled	[CE]  cannot  find  symbol  tStart	6	None	replace
170	[BUG]  [BUGGY]  computeDerivatives(eventT,  y,  tDot,  tEnd);  [CE]  cannot  find  symbol  tDot  [FE]            AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  computeDerivatives(eventT,  y,  tDot,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	computeDerivatives(eventT,  y,  tDot,  tEnd);	  computeDerivatives(eventT,    y,    t0,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  tDot	57	None	replace
171	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  yDot.length);  System.arraycopy(eventSize,  0,  yDot,  0,  yDot.length);  [CE]  cannot  find  symbol  eventSize  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  yDot.length);  System.arraycopy(eventSize,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,    0,    yDot,    0,    yDot.length);    System.arraycopy(eventSize,  0,  yDot,  0,  yDot.length);	  	non-compiled	[CE]  cannot  find  symbol  eventSize	44	None	add
172	[BUG]  [BUGGY]  [FE]  NumberIsTooSmallException  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(yDot,  0,  y,  0,  yDot.length);	  System.arraycopy(yDot,    0,    y,    0,    y.length);    	compilable	  [FE]  NumberIsTooSmallException  	30	3	replace
173	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  y,  0,  yDot.length);  [FE]  NumberIsTooSmallException  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,  0,  y,  0,  yDot.length);	  System.arraycopy(yDot,    0,    y,    0,    y.length);    	compilable	  [FE]  NumberIsTooSmallException  	30	3	replace
174	[BUG]  [BUGGY]  [FE]  NumberIsTooSmallException  [FE]      NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(eventY,  0,  y,  0,  yDot.length);	  System.arraycopy(yDot,    0,    y,    0,    y.length);    	compilable	  [FE]  NumberIsTooSmallException  	30	2	replace
175	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  yDot.length);  [FE]  NumberIsTooSmallException  [FE]      NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,  0,  y,  0,  yDot.length);	  System.arraycopy(yDot,    0,    y,    0,    y.length);    	compilable	  [FE]  NumberIsTooSmallException  	30	2	replace
176	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  currentEventT,  tEnd);  [CE]  cannot  find  symbol  currentEventT  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  currentEventT,  tEnd);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,  0,  yDot,  currentEventT,  tEnd);	  System.arraycopy(eventY,    0,    yDot,    t0,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  currentEventT	48	None	replace
177	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  yDot,  0,  y.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  yDot,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    yDot,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  yDot,  0,  y.length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	add
178	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	53	1	add
179	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	53	1	add
180	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventX,  0,  y,  0,  y.length);  [CE]  cannot  find  symbol  eventX  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventX,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventX,  0,  y,  0,  y.length);	  	non-compiled	[CE]  cannot  find  symbol  eventX	53	None	add
181	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	53	1	add
182	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	53	1	add
183	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  eventY,  0,  y.length);  System.arraycopy(eventY,  0,  eventY,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	System.arraycopy(y,    0,    eventY,    0,    y.length);    System.arraycopy(eventY,  0,  eventY,  0,  y.length);	  	compilable	  [FE]  AssertionError  	3	1	add
184	[BUG]  [BUGGY]  System.arraycopy(y,  0,  eventY,  0,  y.length);  System.arraycopy(eventY,  0,  eventY,  0,  y.length);  [FE]  AssertionError  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  eventY,  0,  y.length);  System.arraycopy(eventY,  0,  eventY,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    eventY,    0,    y.length);    System.arraycopy(eventY,  0,  eventY,  0,  y.length);	  	compilable	  [FE]  AssertionError  	3	1	add
185	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	17	1	add
186	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	17	1	add
187	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	17	1	add
188	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	17	1	add
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	17	1	add
190	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);  System.arraycopy(y,  0,  y,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  y,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	17	1	add
191	[BUG]  [BUGGY]  System.arraycopy(currentT,  0,  yDot,  currentY,  tEnd);  [CE]  cannot  find  symbol  currentY  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(currentT,  0,  yDot,  currentY,  tEnd);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(currentT,  0,  yDot,  currentY,  tEnd);	  System.arraycopy(eventY,    0,    yDot,    currentT,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  currentY	36	None	replace
192	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  y,  0,  y.length);  Arrays.arraycopy(yDot,  0,  y,  0,  y.length);  [CE]  cannot  find  symbol  Arrays  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  y,  0,  y.length);  Arrays.arraycopy(yDot,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,    0,    y,    0,    y.length);    Arrays.arraycopy(yDot,  0,  y,  0,  y.length);	  	non-compiled	[CE]  cannot  find  symbol  Arrays	29	None	add
193	[BUG]  [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventX,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [CE]  cannot  find  symbol  eventX  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventX,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    yDot,    0,    y.length);    System.arraycopy(eventX,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  yDot,  0,  y.length);	  	non-compiled	[CE]  cannot  find  symbol  eventX	23	None	add
194	[BUG]  [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventX,  0,  y,  0,  y.length);  System.arraycopy(eventX,  0,  yDot,  0,  y.length);  [CE]  cannot  find  symbol  eventX  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventX,  0,  y,  0,  y.length);  System.arraycopy(eventX,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    yDot,    0,    y.length);    System.arraycopy(eventX,  0,  y,  0,  y.length);  System.arraycopy(eventX,  0,  yDot,  0,  y.length);	  	non-compiled	[CE]  cannot  find  symbol  eventX	23	None	add
195	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  remaining.stepAccepted(eventT,  yDot);  [CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    1,    y.length);    System.arraycopy(y,  0,  y,  1,  y.length);  ArrayIndexOutOfBoundsException  yDot  =  remaining.stepAccepted(eventT,  yDot);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        1,        y.length);        System.arraycopy(y,    0,    y,    1,    y.length);    ArrayIndexOutOfBoundsException  yDot  =  remaining.stepAccepted(eventT,  yDot);	  	non-compiled	[CE]  variable  yDot  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	8	None	add
196	[BUG]  [BUGGY]  System.arraycopy(currentEvent,  0,  eventY,  0,  currentEvent.length);  [CE]  cannot  find  symbol  length  [FE]        NumberIsTooSmallException      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(currentEvent,  0,  eventY,  0,  currentEvent.length);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(currentEvent,  0,  eventY,  0,  currentEvent.length);	          System.arraycopy(eventY,    0,    y,    0,    currentEvent.length);    	non-compiled	[CE]  cannot  find  symbol  length	7	None	replace
197	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  System.arraycopy(yPos,  0,  yDot,  0,  yDot.length);  [CE]  cannot  find  symbol  yPos  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  yDot,  0,  yDot.length);  System.arraycopy(yPos,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,    0,    yDot,    0,    yDot.length);    System.arraycopy(yPos,  0,  yDot,  0,  yDot.length);	  	non-compiled	[CE]  cannot  find  symbol  yPos	46	None	add
198	[BUG]  [BUGGY]  if(isLastStep)  {  computeDerivatives(eventT,  eventY,  tStart,  tEnd);  }  [CE]  cannot  find  symbol  tStart  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  if(isLastStep)  {  computeDerivatives(eventT,  eventY,  tStart,  tEnd);  }  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	if(isLastStep)  {  computeDerivatives(eventT,  eventY,  tStart,  tEnd);  }	  if(isLastStep)    {    computeDerivatives(eventT,    y,    tStart,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  tStart	50	None	replace
199	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	1	1	add
200	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	1	1	add
201	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	1	1	add
202	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        y.length);        System.arraycopy(y,    0,    y,    0,    y.length);    System.arraycopy(y,  0,  y,  0,  y.length);  System.arraycopy(y,  0,  yDot,  0,  y.length);	  	compilable	  [FE]  AssertionError  	1	1	add
203	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  1,  yDot.length);  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(eventY,  1,  yDot.length);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  y,  1,  yDot.length);  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(eventY,  1,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    y,    1,    yDot.length);    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(eventY,  1,  yDot.length);	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int,int)	14	None	add
204	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  1,  yDot.length);  ArrayIndexOutOfBoundsException  ex  =  super.expandableODE(eventT,  yDot);  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  y,  1,  yDot.length);  ArrayIndexOutOfBoundsException  ex  =  super.expandableODE(eventT,  yDot);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    y,    1,    yDot.length);    ArrayIndexOutOfBoundsException  ex  =  super.expandableODE(eventT,  yDot);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
205	[BUG]  [BUGGY]  state.acceptStep(eventT,  y,  t0);  [CE]  cannot  find  symbol  t0  [FE]            AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  state.acceptStep(eventT,  y,  t0);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	state.acceptStep(eventT,  y,  t0);	  state.acceptStep(eventT,    y,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t0	34	None	replace
206	[BUG]  [BUGGY]  state.acceptStep(eventT,  yDot,  tEnd);  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  state.acceptStep(eventT,  yDot,  tEnd);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	state.acceptStep(eventT,  yDot,  tEnd);	  state.acceptStep(eventT,    y,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  state	34	None	replace
207	[BUG]  [BUGGY]  if(isLastStep)  {  computeDerivatives(eventT,  y,  tEnd,  orderingSign,  state);  }  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  if(isLastStep)  {  computeDerivatives(eventT,  y,  tEnd,  orderingSign,  state);  }  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	if(isLastStep)  {  computeDerivatives(eventT,  y,  tEnd,  orderingSign,  state);  }	  if(isLastStep)    {    computeDerivatives(eventT,    y,    tEnd,    orderingSign);    }    	non-compiled	[CE]  cannot  find  symbol  state	40	None	replace
208	[BUG]  [BUGGY]  computeDerivatives(eventT,  y,  tEnd,  orderingSign,  state);  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  computeDerivatives(eventT,  y,  tEnd,  orderingSign,  state);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	computeDerivatives(eventT,  y,  tEnd,  orderingSign,  state);	  computeDerivatives(eventT,    y,    tEnd,    orderingSign);    	non-compiled	[CE]  cannot  find  symbol  state	6	None	replace
209	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventSize,  0,  yDot,  0,  y.length);  [CE]  cannot  find  symbol  eventSize  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  System.arraycopy(eventSize,  0,  yDot,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(eventY,    0,    yDot,    0,    y.length);    System.arraycopy(eventSize,  0,  yDot,  0,  y.length);	  	non-compiled	[CE]  cannot  find  symbol  eventSize	37	None	add
210	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	21	1	add
211	[BUG]  [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);	  	compilable	  [FE]  AssertionError  	21	1	add
212	[BUG]  [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventX,  0,  y,  0,  y.length);  System.arraycopy(eventX,  0,  y,  0,  y.length);  [CE]  cannot  find  symbol  eventX  [FE]      AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventX,  0,  y,  0,  y.length);  System.arraycopy(eventX,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventX,  0,  y,  0,  y.length);  System.arraycopy(eventX,  0,  y,  0,  y.length);	  	non-compiled	[CE]  cannot  find  symbol  eventX	21	None	add
213	[BUG]  [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventX,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  [CE]  cannot  find  symbol  eventX  [FE]        AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventY,  0,  y,  0,  y.length);  System.arraycopy(eventX,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(eventY,        0,        y,        0,        y.length);        System.arraycopy(eventY,    0,    y,    0,    y.length);    System.arraycopy(eventX,  0,  y,  0,  y.length);  System.arraycopy(eventY,  0,  y,  0,  y.length);	  	non-compiled	[CE]  cannot  find  symbol  eventX	21	None	add
214	[BUG]  [BUGGY]  ensureDerivatives(eventT,  y,  tStart,  orderingSign);  [CE]  cannot  find  symbol  tStart  [FE]                AssertionError      [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  ensureDerivatives(eventT,  y,  tStart,  orderingSign);  [BUGGY]      resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	ensureDerivatives(eventT,  y,  tStart,  orderingSign);	  ensureDerivatives(eventT,    y,    tEnd,    orderingSign);    	non-compiled	[CE]  cannot  find  symbol  tStart	32	None	replace
215	[BUG]  [BUGGY]  System.arraycopy(yDot,  0,  currentY,  0,  y.length);  [CE]  cannot  find  symbol  currentY  [FE]    NumberIsTooSmallException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(yDot,  0,  currentY,  0,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(yDot,  0,  currentY,  0,  y.length);	  System.arraycopy(eventY,    0,    yDot,    0,    y.length);    	non-compiled	[CE]  cannot  find  symbol  currentY	38	None	replace
216	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    yDot,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	19	1	add
217	[BUG]  [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]          System.arraycopy(y,    0,    y,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	                System.arraycopy(y,        0,        y,        0,        yDot.length);        System.arraycopy(y,    0,    yDot,    0,    yDot.length);    System.arraycopy(y,  0,  yDot,  0,  yDot.length);  System.arraycopy(y,  0,  yDot,  0,  yDot.length);	  	compilable	  [FE]  AssertionError  	19	1	add
218	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  y.length);  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(eventY,  yDot,  1,  y.length);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],double[],int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  y.length);  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(eventY,  yDot,  1,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    yDot,    1,    y.length);    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(eventY,  yDot,  1,  y.length);	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],double[],int,int)	12	None	add
219	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  y.length);  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(eventY.length,  yDot,  1,  y.length);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,double[],int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);      [BUGGY]  System.arraycopy(y,  0,  yDot,  1,  y.length);  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(eventY.length,  yDot,  1,  y.length);  [BUGGY]      computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	System.arraycopy(y,    0,    yDot,    1,    y.length);    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(eventY.length,  yDot,  1,  y.length);	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,double[],int,int)	12	None	add
