bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  state.getEventHandler().init(t0,  y0,  t);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  [BUGGY]  state.getEventHandler().init(t0,  y0,  t);  [BUGGY]    setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	state.getEventHandler().init(t0,  y0,  t);	}  	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
2	[BUG]  [BUGGY]  state.getEventHandler().init(handler,  t0,  t);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  [BUGGY]  state.getEventHandler().init(handler,  t0,  t);  [BUGGY]    setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	state.getEventHandler().init(handler,  t0,  t);	}  	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
3	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  [BUGGY]    [BUGGY]    setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	  	}  	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
4	[BUG]  [BUGGY]    if(events.size()  >  1)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.remove(i);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  [BUGGY]    if(events.size()  >  1)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.remove(i);  }  [BUGGY]  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	    if(events.size()  >  1)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.remove(i);  }		non-compiled	[CE]  illegal  start  of  expression	82	None	add
5	[BUG]  [BUGGY]    if(events.size()  >  1)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.remove(i);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  [BUGGY]    if(events.size()  >  1)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.remove(i);  }  [BUGGY]  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	    if(events.size()  >  1)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.remove(i);  }		non-compiled	[CE]  illegal  start  of  expression	82	None	add
6	[BUG]  [BUGGY]    if(events.size()  >  1)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.resetCount();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  [BUGGY]    if(events.size()  >  1)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.resetCount();  }  [BUGGY]  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	    if(events.size()  >  1)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.resetCount();  }		non-compiled	[CE]  illegal  start  of  expression	82	None	add
7	[BUG]  [BUGGY]    if(!isLastStep)  {  for(final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluations.resetCount();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  [BUGGY]    if(!isLastStep)  {  for(final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluations.resetCount();  }  [BUGGY]  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	    if(!isLastStep)  {  for(final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluations.resetCount();  }		non-compiled	[CE]  illegal  start  of  expression	82	None	add
8	[BUG]  [BUGGY]    if(!isLastStep)  {  for(final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluates.resetCount();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  [BUGGY]    if(!isLastStep)  {  for(final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluates.resetCount();  }  [BUGGY]  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	    if(!isLastStep)  {  for(final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluates.resetCount();  }		non-compiled	[CE]  illegal  start  of  expression	82	None	add
9	[BUG]  [BUGGY]    initStep(handler,  t0,  t);  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  [BUGGY]    initStep(handler,  t0,  t);  [BUGGY]  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	    initStep(handler,  t0,  t);		non-compiled	[CE]  cannot  find  symbol	82	None	add
10	[BUG]  [BUGGY]  state.getEventHandler().init(t0,  y1,  t);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  [BUGGY]  state.getEventHandler().init(t0,  y1,  t);  [BUGGY]    setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	state.getEventHandler().init(t0,  y1,  t);	}  	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
11	[BUG]  [BUGGY]    if(expanable.equals(handler.getInstance()))  {  for(final  Incrementor  stepStart  :  steps)  {  state.getEventHandler().init(stepStart,  y0,  stepStart);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  [BUGGY]    if(expanable.equals(handler.getInstance()))  {  for(final  Incrementor  stepStart  :  steps)  {  state.getEventHandler().init(stepStart,  y0,  stepStart);  }  [BUGGY]  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	    if(expanable.equals(handler.getInstance()))  {  for(final  Incrementor  stepStart  :  steps)  {  state.getEventHandler().init(stepStart,  y0,  stepStart);  }		non-compiled	[CE]  illegal  start  of  expression	82	None	add
12	[BUG]  [BUGGY]    if(expanable.equals(handler.getInstance()))  {  for(final  Incrementor  stepStart  :  steps)  {  state.getEventHandler().init(y0,  stepStart,  t);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  [BUGGY]    if(expanable.equals(handler.getInstance()))  {  for(final  Incrementor  stepStart  :  steps)  {  state.getEventHandler().init(y0,  stepStart,  t);  }  [BUGGY]  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	    if(expanable.equals(handler.getInstance()))  {  for(final  Incrementor  stepStart  :  steps)  {  state.getEventHandler().init(y0,  stepStart,  t);  }		non-compiled	[CE]  illegal  start  of  expression	82	None	add
13	[BUG]  [BUGGY]    if(expanable.equals(handler.getInstance()))  {  for(final  Incrementor  stepStart  :  steps)  {  state.getEventHandler().init(stepStart,  y0,  t);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  [BUGGY]    if(expanable.equals(handler.getInstance()))  {  for(final  Incrementor  stepStart  :  steps)  {  state.getEventHandler().init(stepStart,  y0,  t);  }  [BUGGY]  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	    if(expanable.equals(handler.getInstance()))  {  for(final  Incrementor  stepStart  :  steps)  {  state.getEventHandler().init(stepStart,  y0,  t);  }		non-compiled	[CE]  illegal  start  of  expression	82	None	add
