bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  events.size();  i++)  {  evaluates.resetCount();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  for(int  i  =  0;  i  <  events.size();  i++)  {  evaluates.resetCount();  }  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	for(int  i  =  0;  i  <  events.size();  i++)  {  evaluates.resetCount();  }	      if(events.size()    >    1)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.resetCount();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.resetCount();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.resetCount();  }  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.resetCount();  }	      if(events.size()    >    1)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.resetCount();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  Integer[]  stepHandlers  =  getStepHandlers();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  Integer[]  stepHandlers  =  getStepHandlers();  [BUGGY]      setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	Integer[]  stepHandlers  =  getStepHandlers();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  initState(t0,  y0,  t);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  initState(t0,  y0,  t);  [BUGGY]      setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	initState(t0,  y0,  t);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluates.resetCount();  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluates.resetCount();  }  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluates.resetCount();  }	      if(!isLastStep)    {    for(final    Incrementor    expansion    :    state.getExecutableStates())    {    evaluates.resetCount();    }    	non-compiled	[CE]  ';'  expected	8	None	replace
6	[BUG]  [BUGGY]  final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluations.resetCount();  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluations.resetCount();  }  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluations.resetCount();  }	      if(!isLastStep)    {    for(final    Incrementor    expansion    :    state.getExecutableStates())    {    evaluates.resetCount();    }    	non-compiled	[CE]  ';'  expected	8	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.remove(i);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.remove(i);  }  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.remove(i);  }	      if(events.size()    >    1)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.remove(i);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  events.size();  ++i)  {  evaluates.remove(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  for(int  i  =  0;  i  <  events.size();  ++i)  {  evaluates.remove(i);  }  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	for(int  i  =  0;  i  <  events.size();  ++i)  {  evaluates.remove(i);  }	      if(events.size()    >    1)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.remove(i);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
9	[BUG]  [BUGGY]  state.getEventHandler().init(y0,  t1,  t);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  state.getEventHandler().init(y0,  t1,  t);  [BUGGY]      setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	state.getEventHandler().init(y0,  t1,  t);	  state.getEventHandler().init(t0,    y1,    t);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
10	[BUG]  [BUGGY]  for(final  Incrementor  stepStart  :  steps)  {  state.getEventHandler().init(stepStart,  y0,  stepStart);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  for(final  Incrementor  stepStart  :  steps)  {  state.getEventHandler().init(stepStart,  y0,  stepStart);  }  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	for(final  Incrementor  stepStart  :  steps)  {  state.getEventHandler().init(stepStart,  y0,  stepStart);  }	      if(expanable.equals(handler.getInstance()))    {    for(final    Incrementor    stepStart    :    steps)    {    state.getEventHandler().init(stepStart,    y0,    stepStart);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
11	[BUG]  [BUGGY]  for(final  Incrementor  stepStart  :  handler.getInstances())  {  state.getEventHandler().init(stepStart,  y0,  stepStart);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  for(final  Incrementor  stepStart  :  handler.getInstances())  {  state.getEventHandler().init(stepStart,  y0,  stepStart);  }  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	for(final  Incrementor  stepStart  :  handler.getInstances())  {  state.getEventHandler().init(stepStart,  y0,  stepStart);  }	      if(expanable.equals(handler.getInstance()))    {    for(final    Incrementor    stepStart    :    steps)    {    state.getEventHandler().init(stepStart,    y0,    stepStart);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
12	[BUG]  [BUGGY]  StatefulStatefulODE  expandable  =  handler.getInstance();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  StatefulStatefulODE  expandable  =  handler.getInstance();  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	StatefulStatefulODE  expandable  =  handler.getInstance();	      if(expanable.equals(handler.getInstance()))    {    for(final    Incrementor    stepStart    :    steps)    {    state.getEventHandler().init(y0,    stepStart,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
13	[BUG]  [BUGGY]  StatefulStatefulODE  expandable  =  state.getStatefulODE();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  StatefulStatefulODE  expandable  =  state.getStatefulODE();  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	StatefulStatefulODE  expandable  =  state.getStatefulODE();	      if(expanable.equals(handler.getInstance()))    {    for(final    Incrementor    stepStart    :    steps)    {    state.getEventHandler().init(y0,    stepStart,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
14	[BUG]  [BUGGY]  initStep(t0,  t,  handler);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  initStep(t0,  t,  handler);  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	initStep(t0,  t,  handler);	      initStep(handler,    t0,    t);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
15	[BUG]  [BUGGY]  initStep(handler,  y0,  t);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  initStep(handler,  y0,  t);  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	initStep(handler,  y0,  t);	      initStep(handler,    t0,    t);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.remove(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.remove(i);  }  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.remove(i);  }	      if(events.size()    >    1)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.remove(i);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  events.size();  i++)  {  evaluates.remove(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  for(int  i  =  0;  i  <  events.size();  i++)  {  evaluates.remove(i);  }  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	for(int  i  =  0;  i  <  events.size();  i++)  {  evaluates.remove(i);  }	      if(events.size()    >    1)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.remove(i);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  state.getEventHandler().init(t0,  t,  handler);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  state.getEventHandler().init(t0,  t,  handler);  [BUGGY]      setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	state.getEventHandler().init(t0,  t,  handler);	  state.getEventHandler().init(handler,    t0,    t);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
19	[BUG]  [BUGGY]  StatefulODE  expandable  =  state.getStatefulODE();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  StatefulODE  expandable  =  state.getStatefulODE();  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	StatefulODE  expandable  =  state.getStatefulODE();	      if(expanable.equals(handler.getInstance()))    {    for(final    Incrementor    stepStart    :    steps)    {    state.getEventHandler().init(stepStart,    y0,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
20	[BUG]  [BUGGY]  Incrementor[]  siblings  =  handler.getInstances();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  Incrementor[]  siblings  =  handler.getInstances();  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	Incrementor[]  siblings  =  handler.getInstances();	      if(expanable.equals(handler.getInstance()))    {    for(final    Incrementor    stepStart    :    steps)    {    state.getEventHandler().init(stepStart,    y0,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
21	[BUG]  [BUGGY]  For(final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluations.resetCount();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  For(final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluations.resetCount();  }  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	For(final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluations.resetCount();  }	      if(!isLastStep)    {    for(final    Incrementor    expansion    :    state.getExecutableStates())    {    evaluations.resetCount();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
22	[BUG]  [BUGGY]  state.getEventHandler().init(t0,  y0,  handler);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  state.getEventHandler().init(t0,  y0,  handler);  [BUGGY]      setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	state.getEventHandler().init(t0,  y0,  handler);	  state.getEventHandler().init(t0,    y0,    t);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  State  state  =  state.getEventHandler().init(handler,  y0,  t);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  State  state  =  state.getEventHandler().init(handler,  y0,  t);  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	State  state  =  state.getEventHandler().init(handler,  y0,  t);	      if(expanable.equals(handler.getInstance()))    {    for(final    Incrementor    stepStart    :    steps)    {    state.getEventHandler().init(stepStart,    y0,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
24	[BUG]  [BUGGY]  State  state  =  state.getEventHandler().init(handlerStart,  y0,  t);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  State  state  =  state.getEventHandler().init(handlerStart,  y0,  t);  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	State  state  =  state.getEventHandler().init(handlerStart,  y0,  t);	      if(expanable.equals(handler.getInstance()))    {    for(final    Incrementor    stepStart    :    steps)    {    state.getEventHandler().init(stepStart,    y0,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
25	[BUG]  [BUGGY]  State  state  =  state.getEventHandler().init(y0,  handler.getInstance());  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  State  state  =  state.getEventHandler().init(y0,  handler.getInstance());  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	State  state  =  state.getEventHandler().init(y0,  handler.getInstance());	      if(expanable.equals(handler.getInstance()))    {    for(final    Incrementor    stepStart    :    steps)    {    state.getEventHandler().init(y0,    stepStart,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
26	[BUG]  [BUGGY]  State  state  =  state.getEventHandler().init(handler,  t0,  t);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  State  state  =  state.getEventHandler().init(handler,  t0,  t);  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	State  state  =  state.getEventHandler().init(handler,  t0,  t);	      if(expanable.equals(handler.getInstance()))    {    for(final    Incrementor    stepStart    :    steps)    {    state.getEventHandler().init(y0,    stepStart,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
27	[BUG]  [BUGGY]  luateStates().resetCount();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  luateStates().resetCount();  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	luateStates().resetCount();	      if(!isLastStep)    {    for(final    Incrementor    expansion    :    state.getExecutableStates())    {    evaluates.resetCount();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
28	[BUG]  [BUGGY]  evaluates.resetCount();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  evaluates.resetCount();  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	evaluates.resetCount();	      if(!isLastStep)    {    for(final    Incrementor    expansion    :    state.getExecutableStates())    {    evaluates.resetCount();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
29	[BUG]  [BUGGY]  for(final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluations.resetCount();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  for(final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluations.resetCount();  }  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	for(final  Incrementor  expansion  :  state.getExecutableStates())  {  evaluations.resetCount();  }	      if(!isLastStep)    {    for(final    Incrementor    expansion    :    state.getExecutableStates())    {    evaluations.resetCount();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  evaluates.remove(handler);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  evaluates.remove(handler);  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	evaluates.remove(handler);	      if(events.size()    >    1)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.remove(i);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  luate(events,  t0,  y0,  t));  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  luate(events,  t0,  y0,  t));  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	luate(events,  t0,  y0,  t));	      if(events.size()    >    1)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.remove(i);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluates.remove(i);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluates.remove(i);  }  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluates.remove(i);  }	      if(events.size()    >    1)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.remove(i);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
33	[BUG]  [BUGGY]  initStep(handler,  t0,  y0);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  initStep(handler,  t0,  y0);  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	initStep(handler,  t0,  y0);	      initStep(handler,    t0,    t);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
34	[BUG]  [BUGGY]  initStep(t0,  handler,  t);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  initStep(t0,  handler,  t);  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	initStep(t0,  handler,  t);	      initStep(handler,    t0,    t);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
35	[BUG]  [BUGGY]  state.getEventHandler().init(handler,  y0,  t);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  state.getEventHandler().init(handler,  y0,  t);  [BUGGY]      setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	state.getEventHandler().init(handler,  y0,  t);	  state.getEventHandler().init(handler,    t0,    t);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  state.getEventHandler().init(t0,  handler,  t);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  state.getEventHandler().init(t0,  handler,  t);  [BUGGY]      setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	state.getEventHandler().init(t0,  handler,  t);	  state.getEventHandler().init(handler,    t0,    t);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
37	[BUG]  [BUGGY]  Integer  stepStart  =  getStep(handler.getStep());  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  Integer  stepStart  =  getStep(handler.getStep());  [BUGGY]      setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	Integer  stepStart  =  getStep(handler.getStep());	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
38	[BUG]  [BUGGY]  initStep(t0,  y0,  t);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  initStep(t0,  y0,  t);  [BUGGY]      setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	initStep(t0,  y0,  t);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
39	[BUG]  [BUGGY]  State  state  =  state.getEventHandler().init(y0,  stepStart,  t);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  State  state  =  state.getEventHandler().init(y0,  stepStart,  t);  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	State  state  =  state.getEventHandler().init(y0,  stepStart,  t);	      if(expanable.equals(handler.getInstance()))    {    for(final    Incrementor    stepStart    :    steps)    {    state.getEventHandler().init(y0,    stepStart,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  State  state  =  state.getEventHandler().init(y0,  t0,  t);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  State  state  =  state.getEventHandler().init(y0,  t0,  t);  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	State  state  =  state.getEventHandler().init(y0,  t0,  t);	      if(expanable.equals(handler.getInstance()))    {    for(final    Incrementor    stepStart    :    steps)    {    state.getEventHandler().init(y0,    stepStart,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
41	[BUG]  [BUGGY]  luates.resetCount();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  luates.resetCount();  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	luates.resetCount();	      if(!isLastStep)    {    for(final    Incrementor    expansion    :    state.getExecutableStates())    {    evaluates.resetCount();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
42	[BUG]  [BUGGY]  State  state  =  state.getEventHandler().init(handler,  y0,  stepStart);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  State  state  =  state.getEventHandler().init(handler,  y0,  stepStart);  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	State  state  =  state.getEventHandler().init(handler,  y0,  stepStart);	      if(expanable.equals(handler.getInstance()))    {    for(final    Incrementor    stepStart    :    steps)    {    state.getEventHandler().init(stepStart,    y0,    stepStart);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluates.remove(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluates.remove(i);  }  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluates.remove(i);  }	      if(events.size()    >    1)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.remove(i);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
44	[BUG]  [BUGGY]  if(expanable.equals(handler.getInitializingState()))  {  for(final  Incrementor  stepStart  :  steps)  {  state.getEventHandler().init(stepStart,  y0,  stepStart);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  if(expanable.equals(handler.getInitializingState()))  {  for(final  Incrementor  stepStart  :  steps)  {  state.getEventHandler().init(stepStart,  y0,  stepStart);  }  [BUGGY]      setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	if(expanable.equals(handler.getInitializingState()))  {  for(final  Incrementor  stepStart  :  steps)  {  state.getEventHandler().init(stepStart,  y0,  stepStart);  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
45	[BUG]  [BUGGY]  int  evaluations.size()  >  1)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.resetCount();  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  int  evaluations.size()  >  1)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.resetCount();  }  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	int  evaluations.size()  >  1)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.resetCount();  }	      if(events.size()    >    1)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.resetCount();    }    	non-compiled	[CE]  ';'  expected	6	None	replace
46	[BUG]  [BUGGY]  StatefulStatefulODE  expandable  =  state.getEventHandler().init(t0,  y0,  t);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  StatefulStatefulODE  expandable  =  state.getEventHandler().init(t0,  y0,  t);  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	StatefulStatefulODE  expandable  =  state.getEventHandler().init(t0,  y0,  t);	      if(expanable.equals(handler.getInstance()))    {    for(final    Incrementor    stepStart    :    steps)    {    state.getEventHandler().init(stepStart,    y0,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
47	[BUG]  [BUGGY]  StatefulStatefulODE  expandable  =  expandable.equals(handler.getInstance());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);  }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);    [BUGGY]  StatefulStatefulODE  expandable  =  expandable.equals(handler.getInstance());  [BUGGY]    }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	StatefulStatefulODE  expandable  =  expandable.equals(handler.getInstance());	      if(expanable.equals(handler.getInstance()))    {    for(final    Incrementor    stepStart    :    steps)    {    state.getEventHandler().init(stepStart,    y0,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
