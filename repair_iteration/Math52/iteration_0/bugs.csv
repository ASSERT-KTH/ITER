bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
2	[BUG] [BUGGY] double u1u1 = u1.getNormSq(); [FE] AssertionError testIssue639 [CONTEXT] public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {  [BUGGY] double u1u1 = u1.getNormSq(); [BUGGY] double u2u2 = u2.getNormSq(); double v1v1 = v1.getNormSq(); double v2v2 = v2.getNormSq(); if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	316	316	1	replace	
3	[BUG] [BUGGY] [FE] AssertionError testIssue639 [CONTEXT] public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {  [BUGGY] [BUGGY] double u1u1 = u1.getNormSq(); double u2u2 = u2.getNormSq(); double v1v1 = v1.getNormSq(); double v2v2 = v2.getNormSq(); if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	316	316	1	add	
4	[BUG] [BUGGY] double u2u2 = u2.getNormSq(); [FE] AssertionError testIssue639 [CONTEXT] public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {  double u1u1 = u1.getNormSq(); [BUGGY] double u2u2 = u2.getNormSq(); [BUGGY] double v1v1 = v1.getNormSq(); double v2v2 = v2.getNormSq(); if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);   [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	317	317	1	replace	
5	[BUG] [BUGGY] [FE] AssertionError testIssue639 [CONTEXT] public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {  double u1u1 = u1.getNormSq(); [BUGGY] [BUGGY] double u2u2 = u2.getNormSq(); double v1v1 = v1.getNormSq(); double v2v2 = v2.getNormSq(); if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);   [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	317	317	1	add	
6	[BUG] [BUGGY] double v1v1 = v1.getNormSq(); [FE] AssertionError testIssue639 [CONTEXT] public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {  double u1u1 = u1.getNormSq(); double u2u2 = u2.getNormSq(); [BUGGY] double v1v1 = v1.getNormSq(); [BUGGY] double v2v2 = v2.getNormSq(); if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  double u1u2 = u1.dotProduct(u2); [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	318	318	1	replace	
7	[BUG] [BUGGY] [FE] AssertionError testIssue639 [CONTEXT] public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {  double u1u1 = u1.getNormSq(); double u2u2 = u2.getNormSq(); [BUGGY] [BUGGY] double v1v1 = v1.getNormSq(); double v2v2 = v2.getNormSq(); if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  double u1u2 = u1.dotProduct(u2); [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	318	318	1	add	
8	[BUG] [BUGGY] double v2v2 = v2.getNormSq(); [FE] AssertionError testIssue639 [CONTEXT] public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {  double u1u1 = u1.getNormSq(); double u2u2 = u2.getNormSq(); double v1v1 = v1.getNormSq(); [BUGGY] double v2v2 = v2.getNormSq(); [BUGGY] if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  double u1u2 = u1.dotProduct(u2); double v1v2 = v1.dotProduct(v2); [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	319	319	1	replace	
9	[BUG] [BUGGY] [FE] AssertionError testIssue639 [CONTEXT] public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {  double u1u1 = u1.getNormSq(); double u2u2 = u2.getNormSq(); double v1v1 = v1.getNormSq(); [BUGGY] [BUGGY] double v2v2 = v2.getNormSq(); if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  double u1u2 = u1.dotProduct(u2); double v1v2 = v1.dotProduct(v2); [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	319	319	1	add	
10	[BUG] [BUGGY] if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { [FE] AssertionError testIssue639 [CONTEXT] public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {  double u1u1 = u1.getNormSq(); double u2u2 = u2.getNormSq(); double v1v1 = v1.getNormSq(); double v2v2 = v2.getNormSq(); [BUGGY] if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { [BUGGY] throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  double u1u2 = u1.dotProduct(u2); double v1v2 = v1.dotProduct(v2); double coeffU = u1u2 / u1u1; [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	320	320	1	replace	
11	[BUG] [BUGGY] [FE] AssertionError testIssue639 [CONTEXT] public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {  double u1u1 = u1.getNormSq(); double u2u2 = u2.getNormSq(); double v1v1 = v1.getNormSq(); double v2v2 = v2.getNormSq(); [BUGGY] [BUGGY] if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  double u1u2 = u1.dotProduct(u2); double v1v2 = v1.dotProduct(v2); double coeffU = u1u2 / u1u1; [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	320	320	1	add	
12	[BUG] [BUGGY] v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1); [FE] AssertionError testIssue639 [CONTEXT]  double u1u1 = u1.getNormSq(); double u2u2 = u2.getNormSq(); double v1v1 = v1.getNormSq(); double v2v2 = v2.getNormSq(); if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  [BUGGY] v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1); [BUGGY]   double u1u2 = u1.dotProduct(u2); double v1v2 = v1.dotProduct(v2); double coeffU = u1u2 / u1u1; double coeffV = v1v2 / u1u1; double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV)); double alpha= coeffU - beta * coeffV; v2 = new Vector3D(alpha, v1, beta, v2);  [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	325	325	1	replace	
13	[BUG] [BUGGY] [FE] AssertionError testIssue639 [CONTEXT]  double u1u1 = u1.getNormSq(); double u2u2 = u2.getNormSq(); double v1v1 = v1.getNormSq(); double v2v2 = v2.getNormSq(); if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  [BUGGY] [BUGGY] v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  double u1u2 = u1.dotProduct(u2); double v1v2 = v1.dotProduct(v2); double coeffU = u1u2 / u1u1; double coeffV = v1v2 / u1u1; double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV)); double alpha= coeffU - beta * coeffV; v2 = new Vector3D(alpha, v1, beta, v2);  [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	325	325	1	add	
14	[BUG] [BUGGY] double u1u2 = u1.dotProduct(u2); [FE] AssertionError testIssue639 [CONTEXT] double v1v1 = v1.getNormSq(); double v2v2 = v2.getNormSq(); if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  [BUGGY] double u1u2 = u1.dotProduct(u2); [BUGGY] double v1v2 = v1.dotProduct(v2); double coeffU = u1u2 / u1u1; double coeffV = v1v2 / u1u1; double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV)); double alpha= coeffU - beta * coeffV; v2 = new Vector3D(alpha, v1, beta, v2);  Vector3D uRef= u1; Vector3D vRef= v1; [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	328	328	1	replace	
15	[BUG] [BUGGY] [FE] AssertionError testIssue639 [CONTEXT] double v1v1 = v1.getNormSq(); double v2v2 = v2.getNormSq(); if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  [BUGGY] [BUGGY] double u1u2 = u1.dotProduct(u2); double v1v2 = v1.dotProduct(v2); double coeffU = u1u2 / u1u1; double coeffV = v1v2 / u1u1; double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV)); double alpha= coeffU - beta * coeffV; v2 = new Vector3D(alpha, v1, beta, v2);  Vector3D uRef= u1; Vector3D vRef= v1; [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	328	328	1	add	
16	[BUG] [BUGGY] double v1v2 = v1.dotProduct(v2); [FE] AssertionError testIssue639 [CONTEXT] double v2v2 = v2.getNormSq(); if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  double u1u2 = u1.dotProduct(u2); [BUGGY] double v1v2 = v1.dotProduct(v2); [BUGGY] double coeffU = u1u2 / u1u1; double coeffV = v1v2 / u1u1; double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV)); double alpha= coeffU - beta * coeffV; v2 = new Vector3D(alpha, v1, beta, v2);  Vector3D uRef= u1; Vector3D vRef= v1; Vector3D v1Su1 = v1.subtract(u1); [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	329	329	1	replace	
17	[BUG] [BUGGY] [FE] AssertionError testIssue639 [CONTEXT] double v2v2 = v2.getNormSq(); if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  double u1u2 = u1.dotProduct(u2); [BUGGY] [BUGGY] double v1v2 = v1.dotProduct(v2); double coeffU = u1u2 / u1u1; double coeffV = v1v2 / u1u1; double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV)); double alpha= coeffU - beta * coeffV; v2 = new Vector3D(alpha, v1, beta, v2);  Vector3D uRef= u1; Vector3D vRef= v1; Vector3D v1Su1 = v1.subtract(u1); [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	329	329	1	add	
18	[BUG] [BUGGY] double coeffU = u1u2 / u1u1; [FE] AssertionError testIssue639 [CONTEXT] if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  double u1u2 = u1.dotProduct(u2); double v1v2 = v1.dotProduct(v2); [BUGGY] double coeffU = u1u2 / u1u1; [BUGGY] double coeffV = v1v2 / u1u1; double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV)); double alpha= coeffU - beta * coeffV; v2 = new Vector3D(alpha, v1, beta, v2);  Vector3D uRef= u1; Vector3D vRef= v1; Vector3D v1Su1 = v1.subtract(u1); Vector3D v2Su2 = v2.subtract(u2); [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	330	330	1	replace	
19	[BUG] [BUGGY] [FE] AssertionError testIssue639 [CONTEXT] if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  double u1u2 = u1.dotProduct(u2); double v1v2 = v1.dotProduct(v2); [BUGGY] [BUGGY] double coeffU = u1u2 / u1u1; double coeffV = v1v2 / u1u1; double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV)); double alpha= coeffU - beta * coeffV; v2 = new Vector3D(alpha, v1, beta, v2);  Vector3D uRef= u1; Vector3D vRef= v1; Vector3D v1Su1 = v1.subtract(u1); Vector3D v2Su2 = v2.subtract(u2); [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	330	330	1	add	
20	[BUG] [BUGGY] double coeffV = v1v2 / u1u1; [FE] AssertionError testIssue639 [CONTEXT] throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  double u1u2 = u1.dotProduct(u2); double v1v2 = v1.dotProduct(v2); double coeffU = u1u2 / u1u1; [BUGGY] double coeffV = v1v2 / u1u1; [BUGGY] double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV)); double alpha= coeffU - beta * coeffV; v2 = new Vector3D(alpha, v1, beta, v2);  Vector3D uRef= u1; Vector3D vRef= v1; Vector3D v1Su1 = v1.subtract(u1); Vector3D v2Su2 = v2.subtract(u2); Vector3D k = v1Su1.crossProduct(v2Su2); [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	331	331	1	replace	
21	[BUG] [BUGGY] [FE] AssertionError testIssue639 [CONTEXT] throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); }  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);  double u1u2 = u1.dotProduct(u2); double v1v2 = v1.dotProduct(v2); double coeffU = u1u2 / u1u1; [BUGGY] [BUGGY] double coeffV = v1v2 / u1u1; double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV)); double alpha= coeffU - beta * coeffV; v2 = new Vector3D(alpha, v1, beta, v2);  Vector3D uRef= u1; Vector3D vRef= v1; Vector3D v1Su1 = v1.subtract(u1); Vector3D v2Su2 = v2.subtract(u2); Vector3D k = v1Su1.crossProduct(v2Su2); [CLASS] Rotation [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D u1 Vector3D u2 Vector3D v1 Vector3D v2 [VARIABLES] boolean Rotation IDENTITY Vector3D k u1 u2 u2Prime u3 uRef v1 v1Su1 v2 v2Su2 v3 v3Su3 vRef double alpha angle beta c coeff coeffU coeffV det halfAngle inv norm q0 q1 q2 q3 s threshold u1u1 u1u2 u2u2 v1v1 v1v2 v2v2 long serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	331	331	1	add	
