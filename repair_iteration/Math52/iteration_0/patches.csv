bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action3	[BUG]  [BUGGY]  double  u1u1  =  u1.getRawNormSq();  [CE]  cannot  find  symbol  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {    [BUGGY]  double  u1u1  =  u1.getRawNormSq();  [BUGGY]  double  u2u2  =  u2.getNormSq();  double  v1v1  =  v1.getNormSq();  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	316	316	1	replace	double  u1u1  =  u1.getRawNormSq();	double  u1u1  =  u1.getNormSq();  	non-compiled	[CE]  cannot  find  symbol	2	None	replace
4	[BUG]  [BUGGY]  double  u1u1  =  u1.getOrMath();  [CE]  cannot  find  symbol  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {    [BUGGY]  double  u1u1  =  u1.getOrMath();  [BUGGY]  double  u2u2  =  u2.getNormSq();  double  v1v1  =  v1.getNormSq();  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	316	316	1	replace	double  u1u1  =  u1.getOrMath();	double  u1u1  =  u1.getNormSq();  	non-compiled	[CE]  cannot  find  symbol	2	None	replace
5	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  u1u1  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {    [BUGGY]    [BUGGY]  double  u2u2  =  u2.getNormSq();  double  v1v1  =  v1.getNormSq();  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	316	316	1	replace	  	double  u1u1  =  u1.getNormSq();  	non-compiled	[CE]  cannot  find  symbol  u1u1	2	None	replace
11	[BUG]  [BUGGY]    double  u1u1  =  u1.dotProduct(u1);  [CE]  variable  u1u1  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)  [CONTEXT]  double  v1v1  =  v1.getNormSq();  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);    [BUGGY]    double  u1u1  =  u1.dotProduct(u1);  [BUGGY]  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  double  coeffU  =  u1u2  /  u1u1;  double  coeffV  =  v1v2  /  u1u1;  double  beta  =  FastMath.sqrt((u2u2  -  u1u2  *  coeffU)  /  (v2v2  -  v1v2  *  coeffV));  double  alpha=  coeffU  -  beta  *  coeffV;  v2  =  new  Vector3D(alpha,  v1,  beta,  v2);  Vector3D  uRef=  u1;  Vector3D  vRef=  v1;  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	328	328	1	replace	    double  u1u1  =  u1.dotProduct(u1);		non-compiled	[CE]  variable  u1u1  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)	15	None	add
12	[BUG]  [BUGGY]    v2  =  new  Vector3D(alpha,  v1,  beta,  v2);  [CE]  cannot  find  symbol  alpha  [CONTEXT]  double  v1v1  =  v1.getNormSq();  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);    [BUGGY]    v2  =  new  Vector3D(alpha,  v1,  beta,  v2);  [BUGGY]  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  double  coeffU  =  u1u2  /  u1u1;  double  coeffV  =  v1v2  /  u1u1;  double  beta  =  FastMath.sqrt((u2u2  -  u1u2  *  coeffU)  /  (v2v2  -  v1v2  *  coeffV));  double  alpha=  coeffU  -  beta  *  coeffV;  v2  =  new  Vector3D(alpha,  v1,  beta,  v2);  Vector3D  uRef=  u1;  Vector3D  vRef=  v1;  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	328	328	1	replace	    v2  =  new  Vector3D(alpha,  v1,  beta,  v2);		non-compiled	[CE]  cannot  find  symbol  alpha	15	None	add
13	[BUG]  [BUGGY]    double  u1u2  =  u1.dotProduct(u1);  [CE]  variable  u1u2  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)  [CONTEXT]  double  v1v1  =  v1.getNormSq();  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);    [BUGGY]    double  u1u2  =  u1.dotProduct(u1);  [BUGGY]  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  double  coeffU  =  u1u2  /  u1u1;  double  coeffV  =  v1v2  /  u1u1;  double  beta  =  FastMath.sqrt((u2u2  -  u1u2  *  coeffU)  /  (v2v2  -  v1v2  *  coeffV));  double  alpha=  coeffU  -  beta  *  coeffV;  v2  =  new  Vector3D(alpha,  v1,  beta,  v2);  Vector3D  uRef=  u1;  Vector3D  vRef=  v1;  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	328	328	1	replace	    double  u1u2  =  u1.dotProduct(u1);		non-compiled	[CE]  variable  u1u2  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)	15	None	add
14	[BUG]  [BUGGY]    double  u1u2  =  u1.dotProduct(u2);  [CE]  variable  u1u2  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)  [CONTEXT]  double  v1v1  =  v1.getNormSq();  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);    [BUGGY]    double  u1u2  =  u1.dotProduct(u2);  [BUGGY]  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  double  coeffU  =  u1u2  /  u1u1;  double  coeffV  =  v1v2  /  u1u1;  double  beta  =  FastMath.sqrt((u2u2  -  u1u2  *  coeffU)  /  (v2v2  -  v1v2  *  coeffV));  double  alpha=  coeffU  -  beta  *  coeffV;  v2  =  new  Vector3D(alpha,  v1,  beta,  v2);  Vector3D  uRef=  u1;  Vector3D  vRef=  v1;  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	328	328	1	replace	    double  u1u2  =  u1.dotProduct(u2);		non-compiled	[CE]  variable  u1u2  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)	15	None	add
15	[BUG]  [BUGGY]    v2  =  new  Vector3D(false,  v1,  beta,  v2);  [CE]  cannot  find  symbol  beta  [CONTEXT]  double  v1v1  =  v1.getNormSq();  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);    [BUGGY]    v2  =  new  Vector3D(false,  v1,  beta,  v2);  [BUGGY]  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  double  coeffU  =  u1u2  /  u1u1;  double  coeffV  =  v1v2  /  u1u1;  double  beta  =  FastMath.sqrt((u2u2  -  u1u2  *  coeffU)  /  (v2v2  -  v1v2  *  coeffV));  double  alpha=  coeffU  -  beta  *  coeffV;  v2  =  new  Vector3D(alpha,  v1,  beta,  v2);  Vector3D  uRef=  u1;  Vector3D  vRef=  v1;  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	328	328	1	replace	    v2  =  new  Vector3D(false,  v1,  beta,  v2);		non-compiled	[CE]  cannot  find  symbol  beta	15	None	add
21	[BUG]  [BUGGY]  double  coeffV  =  v1v2  /  v1u1;  [CE]  cannot  find  symbol  v1u1  [CONTEXT]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  double  coeffU  =  u1u2  /  u1u1;  [BUGGY]  double  coeffV  =  v1v2  /  v1u1;  [BUGGY]  double  beta  =  FastMath.sqrt((u2u2  -  u1u2  *  coeffU)  /  (v2v2  -  v1v2  *  coeffV));  double  alpha=  coeffU  -  beta  *  coeffV;  v2  =  new  Vector3D(alpha,  v1,  beta,  v2);  Vector3D  uRef=  u1;  Vector3D  vRef=  v1;  Vector3D  v1Su1  =  v1.subtract(u1);  Vector3D  v2Su2  =  v2.subtract(u2);  Vector3D  k  =  v1Su1.crossProduct(v2Su2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	331	331	1	replace	double  coeffV  =  v1v2  /  v1u1;	double  coeffV  =  v1v2  /  u1u1;  	non-compiled	[CE]  cannot  find  symbol  v1u1	20	None	replace
22	[BUG]  [BUGGY]  double  coeffV  =  u1v2  /  u1u1;  [CE]  cannot  find  symbol  u1v2  [CONTEXT]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  double  coeffU  =  u1u2  /  u1u1;  [BUGGY]  double  coeffV  =  u1v2  /  u1u1;  [BUGGY]  double  beta  =  FastMath.sqrt((u2u2  -  u1u2  *  coeffU)  /  (v2v2  -  v1v2  *  coeffV));  double  alpha=  coeffU  -  beta  *  coeffV;  v2  =  new  Vector3D(alpha,  v1,  beta,  v2);  Vector3D  uRef=  u1;  Vector3D  vRef=  v1;  Vector3D  v1Su1  =  v1.subtract(u1);  Vector3D  v2Su2  =  v2.subtract(u2);  Vector3D  k  =  v1Su1.crossProduct(v2Su2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	331	331	1	replace	double  coeffV  =  u1v2  /  u1u1;	double  coeffV  =  v1v2  /  u1u1;  	non-compiled	[CE]  cannot  find  symbol  u1v2	20	None	replace
23	[BUG]  [BUGGY]  double  coeffV  =  v1u2  /  v1u1;  [CE]  cannot  find  symbol  v1u2  [CONTEXT]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  double  coeffU  =  u1u2  /  u1u1;  [BUGGY]  double  coeffV  =  v1u2  /  v1u1;  [BUGGY]  double  beta  =  FastMath.sqrt((u2u2  -  u1u2  *  coeffU)  /  (v2v2  -  v1v2  *  coeffV));  double  alpha=  coeffU  -  beta  *  coeffV;  v2  =  new  Vector3D(alpha,  v1,  beta,  v2);  Vector3D  uRef=  u1;  Vector3D  vRef=  v1;  Vector3D  v1Su1  =  v1.subtract(u1);  Vector3D  v2Su2  =  v2.subtract(u2);  Vector3D  k  =  v1Su1.crossProduct(v2Su2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	331	331	1	replace	double  coeffV  =  v1u2  /  v1u1;	double  coeffV  =  v1v2  /  u1u1;  	non-compiled	[CE]  cannot  find  symbol  v1u2	20	None	replace
24	[BUG]  [BUGGY]  double  coeffV  =  v1v2  /  v1u2;  [CE]  cannot  find  symbol  v1u2  [CONTEXT]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  double  coeffU  =  u1u2  /  u1u1;  [BUGGY]  double  coeffV  =  v1v2  /  v1u2;  [BUGGY]  double  beta  =  FastMath.sqrt((u2u2  -  u1u2  *  coeffU)  /  (v2v2  -  v1v2  *  coeffV));  double  alpha=  coeffU  -  beta  *  coeffV;  v2  =  new  Vector3D(alpha,  v1,  beta,  v2);  Vector3D  uRef=  u1;  Vector3D  vRef=  v1;  Vector3D  v1Su1  =  v1.subtract(u1);  Vector3D  v2Su2  =  v2.subtract(u2);  Vector3D  k  =  v1Su1.crossProduct(v2Su2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	331	331	1	replace	double  coeffV  =  v1v2  /  v1u2;	double  coeffV  =  v1v2  /  u1u1;  	non-compiled	[CE]  cannot  find  symbol  v1u2	20	None	replace
25	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  coeffV  [CONTEXT]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  double  coeffU  =  u1u2  /  u1u1;  [BUGGY]    [BUGGY]  double  beta  =  FastMath.sqrt((u2u2  -  u1u2  *  coeffU)  /  (v2v2  -  v1v2  *  coeffV));  double  alpha=  coeffU  -  beta  *  coeffV;  v2  =  new  Vector3D(alpha,  v1,  beta,  v2);  Vector3D  uRef=  u1;  Vector3D  vRef=  v1;  Vector3D  v1Su1  =  v1.subtract(u1);  Vector3D  v2Su2  =  v2.subtract(u2);  Vector3D  k  =  v1Su1.crossProduct(v2Su2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	331	331	1	replace	  	double  coeffV  =  v1v2  /  u1u1;  	non-compiled	[CE]  cannot  find  symbol  coeffV	20	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionError  testIssue639  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {  double  u1u1  =  u1.getNormSq();  double  u2u2  =  u2.getNormSq();  double  v1v1  =  v1.getNormSq();  [BUGGY]    double  v2v1  =  v2.getNormSq();  [BUGGY]  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	319	319	1	add	    double  v2v1  =  v2.getNormSq();		compilable	  [FE]  AssertionError  testIssue639	9	1
32	[BUG]  [BUGGY]    double  v2v1  =  v2.getNormSq();  [FE]  AssertionError  testIssue639  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {  double  u1u1  =  u1.getNormSq();  double  u2u2  =  u2.getNormSq();  double  v1v1  =  v1.getNormSq();  [BUGGY]    double  v2v1  =  v2.getNormSq();  [BUGGY]  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	319	319	1	replace	    double  v2v1  =  v2.getNormSq();		compilable	  [FE]  AssertionError  testIssue639	9	1	add
32	[BUG]  [BUGGY]    double  v2v2  =  v2.getNormSq();  [CE]  variable  v2v2  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {  double  u1u1  =  u1.getNormSq();  double  u2u2  =  u2.getNormSq();  double  v1v1  =  v1.getNormSq();  [BUGGY]    double  v2v2  =  v2.getNormSq();  [BUGGY]  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	319	319	1	replace	    double  v2v2  =  v2.getNormSq();		non-compiled	[CE]  variable  v2v2  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)	9	None	add
33	[BUG]  [BUGGY]  [FE]  AssertionError  testIssue639  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {  double  u1u1  =  u1.getNormSq();  double  u2u2  =  u2.getNormSq();  double  v1v1  =  v1.getNormSq();  [BUGGY]    double  v2u2  =  v2.getNormSq();  [BUGGY]  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	319	319	1	add	    double  v2u2  =  v2.getNormSq();		compilable	  [FE]  AssertionError  testIssue639	9	1
34	[BUG]  [BUGGY]    double  v2u2  =  v2.getNormSq();  [FE]  AssertionError  testIssue639  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {  double  u1u1  =  u1.getNormSq();  double  u2u2  =  u2.getNormSq();  double  v1v1  =  v1.getNormSq();  [BUGGY]    double  v2u2  =  v2.getNormSq();  [BUGGY]  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	319	319	1	replace	    double  v2u2  =  v2.getNormSq();		compilable	  [FE]  AssertionError  testIssue639	9	1	add
34	[BUG]  [BUGGY]    if((  u1u1  ==  0)||(u2u1  ==  0)||(v1v1  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR  [CE]  ')'  expected  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {  double  u1u1  =  u1.getNormSq();  double  u2u2  =  u2.getNormSq();  double  v1v1  =  v1.getNormSq();  [BUGGY]    if((  u1u1  ==  0)||(u2u1  ==  0)||(v1v1  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR  [BUGGY]  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	319	319	1	replace	    if((  u1u1  ==  0)||(u2u1  ==  0)||(v1v1  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR		non-compiled	[CE]  ')'  expected	9	None	add
35	[BUG]  [BUGGY]    if((  u1u1  ==  0)||(v1u2  ==  0))  {  throw  MathRuntimeException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  [CE]  cannot  find  symbol  v1u2  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {  double  u1u1  =  u1.getNormSq();  double  u2u2  =  u2.getNormSq();  double  v1v1  =  v1.getNormSq();  [BUGGY]    if((  u1u1  ==  0)||(v1u2  ==  0))  {  throw  MathRuntimeException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  [BUGGY]  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	319	319	1	replace	    if((  u1u1  ==  0)||(v1u2  ==  0))  {  throw  MathRuntimeException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }		non-compiled	[CE]  cannot  find  symbol  v1u2	9	None	add
41	[BUG]  [BUGGY]    double  coeffV  =  FastMath.sqrt((  u1u2  -  u1u2)/  (v1v2  -  v1v2));  [CE]  variable  coeffV  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)  [CONTEXT]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  double  coeffU  =  u1u2  /  u1u1;  [BUGGY]    double  coeffV  =  FastMath.sqrt((  u1u2  -  u1u2)/  (v1v2  -  v1v2));  [BUGGY]  double  coeffV  =  v1v2  /  u1u1;  double  beta  =  FastMath.sqrt((u2u2  -  u1u2  *  coeffU)  /  (v2v2  -  v1v2  *  coeffV));  double  alpha=  coeffU  -  beta  *  coeffV;  v2  =  new  Vector3D(alpha,  v1,  beta,  v2);  Vector3D  uRef=  u1;  Vector3D  vRef=  v1;  Vector3D  v1Su1  =  v1.subtract(u1);  Vector3D  v2Su2  =  v2.subtract(u2);  Vector3D  k  =  v1Su1.crossProduct(v2Su2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	331	331	1	replace	    double  coeffV  =  FastMath.sqrt((  u1u2  -  u1u2)/  (v1v2  -  v1v2));		non-compiled	[CE]  variable  coeffV  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)	21	None	add
42	[BUG]  [BUGGY]    coeffV  =  FastMath.sqrt((  u1u2  -  u1u2)/  (v1v2  -  v1v2));  [CE]  cannot  find  symbol  coeffV  [CONTEXT]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  double  coeffU  =  u1u2  /  u1u1;  [BUGGY]    coeffV  =  FastMath.sqrt((  u1u2  -  u1u2)/  (v1v2  -  v1v2));  [BUGGY]  double  coeffV  =  v1v2  /  u1u1;  double  beta  =  FastMath.sqrt((u2u2  -  u1u2  *  coeffU)  /  (v2v2  -  v1v2  *  coeffV));  double  alpha=  coeffU  -  beta  *  coeffV;  v2  =  new  Vector3D(alpha,  v1,  beta,  v2);  Vector3D  uRef=  u1;  Vector3D  vRef=  v1;  Vector3D  v1Su1  =  v1.subtract(u1);  Vector3D  v2Su2  =  v2.subtract(u2);  Vector3D  k  =  v1Su1.crossProduct(v2Su2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	331	331	1	replace	    coeffV  =  FastMath.sqrt((  u1u2  -  u1u2)/  (v1v2  -  v1v2));		non-compiled	[CE]  cannot  find  symbol  coeffV	21	None	add
44	[BUG]  [BUGGY]    double  coeffV  =  FastMath.sqrt((  u1u2  -  u1u2)/  (v1v2  -  v1v2);  [CE]  ')'  expected  [CONTEXT]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  double  v1v2  =  v1.dotProduct(v2);  double  coeffU  =  u1u2  /  u1u1;  [BUGGY]    double  coeffV  =  FastMath.sqrt((  u1u2  -  u1u2)/  (v1v2  -  v1v2);  [BUGGY]  double  coeffV  =  v1v2  /  u1u1;  double  beta  =  FastMath.sqrt((u2u2  -  u1u2  *  coeffU)  /  (v2v2  -  v1v2  *  coeffV));  double  alpha=  coeffU  -  beta  *  coeffV;  v2  =  new  Vector3D(alpha,  v1,  beta,  v2);  Vector3D  uRef=  u1;  Vector3D  vRef=  v1;  Vector3D  v1Su1  =  v1.subtract(u1);  Vector3D  v2Su2  =  v2.subtract(u2);  Vector3D  k  =  v1Su1.crossProduct(v2Su2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	331	331	1	replace	    double  coeffV  =  FastMath.sqrt((  u1u2  -  u1u2)/  (v1v2  -  v1v2);		non-compiled	[CE]  ')'  expected	21	None	add
51	[BUG]  [BUGGY]    double  u1u2  =  u1.dotProduct(u1);  [CE]  variable  u1u2  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {  double  u1u1  =  u1.getNormSq();  double  u2u2  =  u2.getNormSq();  [BUGGY]    double  u1u2  =  u1.dotProduct(u1);  [BUGGY]  double  v1v1  =  v1.getNormSq();  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	318	318	1	replace	    double  u1u2  =  u1.dotProduct(u1);		non-compiled	[CE]  variable  u1u2  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)	7	None	add
52	[BUG]  [BUGGY]    double  u1u2  =  u1.dotProduct(u2);  [CE]  variable  u1u2  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {  double  u1u1  =  u1.getNormSq();  double  u2u2  =  u2.getNormSq();  [BUGGY]    double  u1u2  =  u1.dotProduct(u2);  [BUGGY]  double  v1v1  =  v1.getNormSq();  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	318	318	1	replace	    double  u1u2  =  u1.dotProduct(u2);		non-compiled	[CE]  variable  u1u2  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)	7	None	add
53	[BUG]  [BUGGY]  [FE]  AssertionError  testIssue639  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {  double  u1u1  =  u1.getNormSq();  double  u2u2  =  u2.getNormSq();  [BUGGY]    double  u2u1  =  u2.getNormSq();  [BUGGY]  double  v1v1  =  v1.getNormSq();  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	318	318	1	add	    double  u2u1  =  u2.getNormSq();		compilable	  [FE]  AssertionError  testIssue639	7	1
54	[BUG]  [BUGGY]    double  u2u1  =  u2.getNormSq();  [FE]  AssertionError  testIssue639  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {  double  u1u1  =  u1.getNormSq();  double  u2u2  =  u2.getNormSq();  [BUGGY]    double  u2u1  =  u2.getNormSq();  [BUGGY]  double  v1v1  =  v1.getNormSq();  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	318	318	1	replace	    double  u2u1  =  u2.getNormSq();		compilable	  [FE]  AssertionError  testIssue639	7	1	add
54	[BUG]  [BUGGY]    double  u1u2  =  u2.getNormSq();  [CE]  variable  u1u2  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {  double  u1u1  =  u1.getNormSq();  double  u2u2  =  u2.getNormSq();  [BUGGY]    double  u1u2  =  u2.getNormSq();  [BUGGY]  double  v1v1  =  v1.getNormSq();  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	318	318	1	replace	    double  u1u2  =  u2.getNormSq();		non-compiled	[CE]  variable  u1u2  is  already  defined  in  constructor  Rotation(Vector3D,Vector3D,Vector3D,Vector3D)	7	None	add
55	[BUG]  [BUGGY]  [FE]  AssertionError  testIssue639  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {  double  u1u1  =  u1.getNormSq();  double  u2u2  =  u2.getNormSq();  [BUGGY]    double  u2u1  =  u1.dotProduct(u2);  [BUGGY]  double  v1v1  =  v1.getNormSq();  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	318	318	1	add	    double  u2u1  =  u1.dotProduct(u2);		compilable	  [FE]  AssertionError  testIssue639	7	1
56	[BUG]  [BUGGY]    double  u2u1  =  u1.dotProduct(u2);  [FE]  AssertionError  testIssue639  [CONTEXT]  public  Rotation(Vector3D  u1,  Vector3D  u2,  Vector3D  v1,  Vector3D  v2)  {  double  u1u1  =  u1.getNormSq();  double  u2u2  =  u2.getNormSq();  [BUGGY]    double  u2u1  =  u1.dotProduct(u2);  [BUGGY]  double  v1v1  =  v1.getNormSq();  double  v2v2  =  v2.getNormSq();  if  ((u1u1  ==  0)  ||  (u2u2  ==  0)  ||  (v1v1  ==  0)  ||  (v2v2  ==  0))  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);  }  v1  =  new  Vector3D(FastMath.sqrt(u1u1  /  v1v1),  v1);  double  u1u2  =  u1.dotProduct(u2);  [CLASS]  Rotation  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  u1  Vector3D  u2  Vector3D  v1  Vector3D  v2  [VARIABLES]  boolean  Rotation  IDENTITY  Vector3D  k  u1  u2  u2Prime  u3  uRef  v1  v1Su1  v2  v2Su2  v3  v3Su3  vRef  double  alpha  angle  beta  c  coeff  coeffU  coeffV  det  halfAngle  inv  norm  q0  q1  q2  q3  s  threshold  u1u1  u1u2  u2u2  v1v1  v1v2  v2v2  long  serialVersionUID  	projects/Math52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	0.7071067811865475	318	318	1	replace	    double  u2u1  =  u1.dotProduct(u2);		compilable	  [FE]  AssertionError  testIssue639	7	1	add
