bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	while  (pos  <  len  ||  input.length()  >  0)  {	  while    (pos    <    len    &&    input.length()    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	4	1	replace
2	[BUG]  [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while  (pos  <  len  ||  input.length()  >  0)  {	  while    (pos    <    len    &&    input.length()    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	4	1	replace
3	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos)!=  '-')  {  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos)!=  '-')  {	  while    (pos    <    len    &&    input.length()    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	4	1	replace
4	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos)!=  '-')  {  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos)!=  '-')  {  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos)!=  '-')  {	  while    (pos    <    len    &&    input.length()    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	4	1	replace
5	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  while  (pos  <  len  &&  input.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  while  (pos  <  len  &&  input.length()  >  0)  {  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while    (pos    <    len    &&    input.length()    >    0)    {    while  (pos  <  len  &&  input.length()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
6	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  int  len  =  input.length();  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  int  len  =  input.length();  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while    (pos    <    len    &&    input.length()    >    0)    {    int  len  =  input.length();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
7	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  int  pos  =  len  &&  input.length()  >  0)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  int  pos  =  len  &&  input.length()  >  0)  {  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while    (pos    <    len    &&    input.length()    >    0)    {    int  pos  =  len  &&  input.length()  >  0)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
8	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  int  pos  =  len  &&  input.length()  >  0;  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  int  pos  =  len  &&  input.length()  >  0;  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while    (pos    <    len    &&    input.length()    >    0)    {    int  pos  =  len  &&  input.length()  >  0;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
9	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  int  pos  =  len  &&  input.length()  >  0);  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  int  pos  =  len  &&  input.length()  >  0);  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while    (pos    <    len    &&    input.length()    >    0)    {    int  pos  =  len  &&  input.length()  >  0);	  	non-compiled	[CE]  ';'  expected	3	None	add
10	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {  while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {  while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while    (pos    <    len    &&    input.charAt(pos)!=    '-')    {    while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
11	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {  while  (pos  <  len  &&  input.charAt(pos)  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {  while  (pos  <  len  &&  input.charAt(pos)  ==  '-')  {  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while    (pos    <    len    &&    input.charAt(pos)!=    '-')    {    while  (pos  <  len  &&  input.charAt(pos)  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
12	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {  int  len  =  input.length();  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {  int  len  =  input.length();  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while    (pos    <    len    &&    input.charAt(pos)!=    '-')    {    int  len  =  input.length();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
13	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {  while  (pos  <  len  &&  input.charAt(pos)  >=  '-')  {  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {  while  (pos  <  len  &&  input.charAt(pos)  >=  '-')  {  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while    (pos    <    len    &&    input.charAt(pos)!=    '-')    {    while  (pos  <  len  &&  input.charAt(pos)  >=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
14	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {  while  (pos  <  len  &&  input.charAt(pos)  >>  '-')  {  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {  while  (pos  <  len  &&  input.charAt(pos)  >>  '-')  {  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while    (pos    <    len    &&    input.charAt(pos)!=    '-')    {    while  (pos  <  len  &&  input.charAt(pos)  >>  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
15	[BUG]  [BUGGY]  int  pos  =  input.indexOf('n',  len);  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  int  pos  =  input.indexOf('n',  len);  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	int  pos  =  input.indexOf('n',  len);	      int    pos    =    input.indexOf('n',    pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
16	[BUG]  [BUGGY]  int  pos  =  input.indexOf('n',  out);  [CE]  class,  interface,  or  enum  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  int  pos  =  input.indexOf('n',  out);  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	int  pos  =  input.indexOf('n',  out);	      int    pos    =    input.indexOf('n',    pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
17	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('n',  pos);  [CE]  class,  interface,  or  enum  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  int  pos  =  input.lastIndexOf('n',  pos);  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	int  pos  =  input.lastIndexOf('n',  pos);	      int    pos    =    input.indexOf('n',    pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
18	[BUG]  [BUGGY]  char  pos  =  input.indexOf('n',  pos);  [CE]  class,  interface,  or  enum  expected  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  char  pos  =  input.indexOf('n',  pos);  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	char  pos  =  input.indexOf('n',  pos);	      int    pos    =    input.indexOf('n',    pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
19	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)  ==  'n')  {  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	while  (pos  <  len  &&  input.charAt(pos)  ==  'n')  {	  while    (pos    <    len    &&    input.charAt(pos)!=    'n')    {    	compilable	  [FE]  ComparisonFailure  	16	1	replace
20	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)  ==  'n')  {  [FE]  ComparisonFailure  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)  ==  'n')  {  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while  (pos  <  len  &&  input.charAt(pos)  ==  'n')  {	  while    (pos    <    len    &&    input.charAt(pos)!=    'n')    {    	compilable	  [FE]  ComparisonFailure  	16	1	replace
21	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.charAt(pos  +  1)!=  'n')  {  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	while  (pos  <  len  &&  input.charAt(pos  +  1)!=  'n')  {	  while    (pos    <    len    &&    input.charAt(pos)!=    'n')    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	16	1	replace
22	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.charAt(pos  +  1)!=  'n')  {  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  input.charAt(pos  +  1)!=  'n')  {  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while  (pos  <  len  &&  input.charAt(pos  +  1)!=  'n')  {	  while    (pos    <    len    &&    input.charAt(pos)!=    'n')    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	16	1	replace
23	[BUG]  [BUGGY]  pos  +=  len.length();  [CE]  class,  interface,  or  enum  expected  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  pos  +=  len.length();  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	pos  +=  len.length();	      pos    +=    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
24	[BUG]  [BUGGY]  pos  +=  input.length()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  pos  +=  input.length()  +  1;  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	pos  +=  input.length()  +  1;	      pos    +=    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
25	[BUG]  [BUGGY]  pos  =  input.length()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  pos  =  input.length()  +  1;  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	pos  =  input.length()  +  1;	      pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
26	[BUG]  [BUGGY]  pos  =  input.length()  +  len;  [CE]  class,  interface,  or  enum  expected  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  pos  =  input.length()  +  len;  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	pos  =  input.length()  +  len;	      pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
27	[BUG]  [BUGGY]  pos  =  input.length()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  pos  =  input.length()  -  1;  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	pos  =  input.length()  -  1;	      pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
28	[BUG]  [BUGGY]  while  (pos  <  len  &&  output.length()  >  0)  {  [CE]  cannot  find  symbol  output  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  while  (pos  <  len  &&  output.length()  >  0)  {  [BUGGY]    int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while  (pos  <  len  &&  output.length()  >  0)  {	  while    (pos    <    len    &&    out.length()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  output	5	None	replace
29	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]      pos  =  input.length();  pos  =  input.length();  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	        pos    =    input.length();    pos  =  input.length();	  	compilable	  [FE]  ComparisonFailure  	11	1	add
30	[BUG]  [BUGGY]      pos  =  input.length();  pos  =  input.length();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]      pos  =  input.length();  pos  =  input.length();  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	        pos    =    input.length();    pos  =  input.length();	  	compilable	  [FE]  ComparisonFailure  	11	1	add
31	[BUG]  [BUGGY]      pos  =  input.length();  int  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]      pos  =  input.length();  int  pos  =  input.length();  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	        pos    =    input.length();    int  pos  =  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	11	None	add
32	[BUG]  [BUGGY]      pos  =  input.length();  Integer  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]      pos  =  input.length();  Integer  pos  =  input.length();  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	        pos    =    input.length();    Integer  pos  =  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	11	None	add
33	[BUG]  [BUGGY]      pos  =  input.length();  pos  =  output.length();  [CE]  cannot  find  symbol  output  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]      pos  =  input.length();  pos  =  output.length();  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	        pos    =    input.length();    pos  =  output.length();	  	non-compiled	[CE]  cannot  find  symbol  output	11	None	add
34	[BUG]  [BUGGY]      pos  =  input.length();  pos  =  in.length();  [CE]  cannot  find  symbol  in  [FE]            ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]      pos  =  input.length();  pos  =  in.length();  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	        pos    =    input.length();    pos  =  in.length();	  	non-compiled	[CE]  cannot  find  symbol  in	11	None	add
35	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]      pos  +=  input.length();  pos  +=  input.length();  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	        pos    +=    input.length();    pos  +=  input.length();	  	compilable	  [FE]  ComparisonFailure  	9	1	add
36	[BUG]  [BUGGY]      pos  +=  input.length();  pos  +=  input.length();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]      pos  +=  input.length();  pos  +=  input.length();  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	        pos    +=    input.length();    pos  +=  input.length();	  	compilable	  [FE]  ComparisonFailure  	9	1	add
37	[BUG]  [BUGGY]      pos  +=  input.length();  pos  +=  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  <identifier>  expected  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]      pos  +=  input.length();  pos  +=  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	        pos    +=    input.length();    pos  +=  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  <identifier>  expected	9	None	add
38	[BUG]  [BUGGY]      pos  +=  input.length();  pos  +=  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  pos  +=  input.length();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]      pos  +=  input.length();  pos  +=  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  pos  +=  input.length();  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	        pos    +=    input.length();    pos  +=  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  pos  +=  input.length();	  	non-compiled	[CE]  <identifier>  expected	9	None	add
39	[BUG]  [BUGGY]      pos  +=  input.length();  pos  +=  input.length();  this.c  =  Character.toChars(Character.codePointAt(input,  pos));  pos  +=  input.length();  [CE]  cannot  find  symbol  c  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]      pos  +=  input.length();  pos  +=  input.length();  this.c  =  Character.toChars(Character.codePointAt(input,  pos));  pos  +=  input.length();  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	        pos    +=    input.length();    pos  +=  input.length();  this.c  =  Character.toChars(Character.codePointAt(input,  pos));  pos  +=  input.length();	  	non-compiled	[CE]  cannot  find  symbol  c	9	None	add
40	[BUG]  [BUGGY]      pos  +=  input.length();  pos  +=  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]      pos  +=  input.length();  pos  +=  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	        pos    +=    input.length();    pos  +=  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);	  	non-compiled	[CE]  <identifier>  expected	9	None	add
41	[BUG]  [BUGGY]  out.write(c);  [CE]  class,  interface,  or  enum  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  out.write(c);  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	out.write(c);	      out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
42	[BUG]  [BUGGY]  out.write('n');  [CE]  class,  interface,  or  enum  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  out.write('n');  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	out.write('n');	      out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
43	[BUG]  [BUGGY]  out.write(input.charAt(pos));  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  out.write(input.charAt(pos));  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	out.write(input.charAt(pos));	      out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
44	[BUG]  [BUGGY]  out.write('ufffd');  [CE]  unclosed  character  literal  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  out.write('ufffd');  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	out.write('ufffd');	      out.write(len);    	non-compiled	[CE]  unclosed  character  literal	18	None	replace
45	[BUG]  [BUGGY]  pos  +=  len  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  pos  +=  len  +  1;  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	pos  +=  len  +  1;	      pos    +=    len;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
46	[BUG]  [BUGGY]  pos  +=  len  *  2;  [CE]  class,  interface,  or  enum  expected  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  pos  +=  len  *  2;  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	pos  +=  len  *  2;	      pos    +=    len;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
47	[BUG]  [BUGGY]  pos  +=  input.length;  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();    [BUGGY]  pos  +=  input.length;  [BUGGY]    while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	pos  +=  input.length;	      pos    +=    len;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
