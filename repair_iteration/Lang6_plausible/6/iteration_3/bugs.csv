bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  pos  =  out.size();  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  out.size();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  out.size();	  int    pos    =    input.size();    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
2	[BUG]  [BUGGY]  int  pos  =  input.size()  +  1;  [CE]  cannot  find  symbol  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.size()  +  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.size()  +  1;	  int    pos    =    input.size();    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
3	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	89	1	add
4	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	89	1	add
5	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	89	1	add
6	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	89	1	add
7	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	89	1	add
8	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	89	1	add
9	[BUG]  [BUGGY]  char[]  input  =  input.getAstRoot(Character.codePointAt(pos,  output));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.getAstRoot(Character.codePointAt(pos,  output));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  input.getAstRoot(Character.codePointAt(pos,  output));	  char[]    input    =    output.getAstRoot(Character.codePointAt(input,    pos));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	108	None	replace
10	[BUG]  [BUGGY]  String  input  =  input.getAstRoot(Character.codePointAt(pos));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  input  =  input.getAstRoot(Character.codePointAt(pos));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	String  input  =  input.getAstRoot(Character.codePointAt(pos));	  String    input    =    input.getAstRoot(Character.codePointAt(input));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	19	None	replace
11	[BUG]  [BUGGY]  char  input  =  input.getAstRoot(Character.codePointAt(input));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  input  =  input.getAstRoot(Character.codePointAt(input));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char  input  =  input.getAstRoot(Character.codePointAt(input));	  String    input    =    input.getAstRoot(Character.codePointAt(input));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	19	None	replace
12	[BUG]  [BUGGY]  if(input.length()  >  0)  {  int  pos  =  input.length();  pos  =  input.length();  }  [CE]  cannot  find  symbol  pos  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  >  0)  {  int  pos  =  input.length();  pos  =  input.length();  }  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input.length()  >  0)  {  int  pos  =  input.length();  pos  =  input.length();  }	  int    pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  pos	69	None	replace
13	[BUG]  [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  pos  =  input.length();  }  [CE]  cannot  find  symbol  pos  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  pos  =  input.length();  }  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input!=  null)  {  int  pos  =  input.length();  pos  =  input.length();  }	  int    pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  pos	69	None	replace
14	[BUG]  [BUGGY]  if(input.length()  >  0)  {  if(input  ==  null)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  >  0)  {  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input.length()  >  0)  {  if(input  ==  null)  {  out.write('n');  }	          if(input    ==    null)    {    out.write('n');    }    if(input    ==    null)    {    out.write('n');    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
15	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  }	          if(input    ==    null)    {    out.write('n');    }    if(input    ==    null)    {    out.write('n');    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
16	[BUG]  [BUGGY]  if(input!=  null)  {  out.write( "null ");  }  [CE]  cannot  find  symbol  pos  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  out.write( "null ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input!=  null)  {  out.write( "null ");  }	  if(input    ==    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	65	None	replace
17	[BUG]  [BUGGY]  if(input  ==  null)  {  output.write( "null ");  }  [CE]  cannot  find  symbol  output  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null)  {  output.write( "null ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input  ==  null)  {  output.write( "null ");  }	  if(input    ==    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  cannot  find  symbol  output	65	None	replace
18	[BUG]  [BUGGY]  Char  pos  =(input  ==  null)?  0  :  input.length();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char  pos  =(input  ==  null)?  0  :  input.length();	  int    pos    =(input    ==    null)?    0    :    input.length();    char    pos    =(input    ==    null)?    0    :    input.length();    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
19	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	Integer  pos  =(input  ==  null)?  0  :  input.length();	  int    pos    =(input    ==    null)?    0    :    input.length();    char    pos    =(input    ==    null)?    0    :    input.length();    	compilable	  [FE]  ComparisonFailure  	144	1	replace
20	[BUG]  [BUGGY]  Integer  pos  =(input  ==  null)?  0  :  input.length();  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Integer  pos  =(input  ==  null)?  0  :  input.length();	  int    pos    =(input    ==    null)?    0    :    input.length();    char    pos    =(input    ==    null)?    0    :    input.length();    	compilable	  [FE]  ComparisonFailure  	144	1	replace
21	[BUG]  [BUGGY]  char[]  input  =  input.toCharArray();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.toCharArray();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  input.toCharArray();	  char[]    input    =    input.toString();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	111	None	replace
22	[BUG]  [BUGGY]  Char[]  input  =  this.input.getAstRoot(Character.codePointAt(input));  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  this.input.getAstRoot(Character.codePointAt(input));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  this.input.getAstRoot(Character.codePointAt(input));	  Char[]    input    =    input.getAstRoot(Character.codePointAt(input));    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
23	[BUG]  [BUGGY]  Char[]  input  =  out.getAstRoot(Character.codePointAt(input));  [CE]  cannot  find  symbol  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  out.getAstRoot(Character.codePointAt(input));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  out.getAstRoot(Character.codePointAt(input));	  Char[]    input    =    input.getAstRoot(Character.codePointAt(input));    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
24	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	1	add
25	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	1	add
26	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	3	1	add
27	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	3	1	add
28	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	1	add
29	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	1	add
30	[BUG]  [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(out    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	118	None	replace
31	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	Integer  pos  =(input!=  null)?  0  :  input.length();	  int    pos    =(input!=    null)?    0    :    input.length();    int    pos    =(input    >>    null)?    0    :    input.length();    	compilable	  [FE]  StringIndexOutOfBoundsException  	97	1	replace
32	[BUG]  [BUGGY]  Integer  pos  =(input!=  null)?  0  :  input.length();  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Integer  pos  =(input!=  null)?  0  :  input.length();	  int    pos    =(input!=    null)?    0    :    input.length();    int    pos    =(input    >>    null)?    0    :    input.length();    	compilable	  [FE]  StringIndexOutOfBoundsException  	97	1	replace
33	[BUG]  [BUGGY]  OutputStream  input  =  input.getOutputStream();  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  input.getOutputStream();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	OutputStream  input  =  input.getOutputStream();	  OutputStream    input    =    output.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
34	[BUG]  [BUGGY]  OutputStream  input  =  out.getOutputStream();  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  out.getOutputStream();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	OutputStream  input  =  out.getOutputStream();	  OutputStream    input    =    output.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
35	[BUG]  [BUGGY]  OutputStream  input  =  this.output.getOutputStream();  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  this.output.getOutputStream();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	OutputStream  input  =  this.output.getOutputStream();	  OutputStream    input    =    output.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
36	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	Integer  pos  =  1;	  int    pos    =    1;    Integer    pos    =    1;    	compilable	  [FE]  IllegalStateException  	22	1	replace
37	[BUG]  [BUGGY]  Integer  pos  =  1;  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Integer  pos  =  1;	  int    pos    =    1;    Integer    pos    =    1;    	compilable	  [FE]  IllegalStateException  	22	1	replace
38	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
39	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
40	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
41	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
42	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
43	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
44	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  >=  null)  {  out.write('n');  return;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  >=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  >=  null)  {  out.write('n');  return;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	41	None	add
45	[BUG]  [BUGGY]  String  pos  =(input  ==  null)?  0  :  input.length();  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	String  pos  =(input  ==  null)?  0  :  input.length();	  char    pos    =(input    ==    null)?    0    :    input.length();    	non-compiled	[CE]  incompatible  types	24	None	replace
46	[BUG]  [BUGGY]  Character  pos  =(input  ==  null)?  0  :  input.length();  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Character  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Character  pos  =(input  ==  null)?  0  :  input.length();	  char    pos    =(input    ==    null)?    0    :    input.length();    	non-compiled	[CE]  incompatible  types	24	None	replace
47	[BUG]  [BUGGY]  CharSequence  input  =  input.getValues();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getValues();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.getValues();	  char[]    input    =    input.getValues();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	142	None	replace
48	[BUG]  [BUGGY]  Char[]  input  =  input.getValues();  [CE]  cannot  find  symbol  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  input.getValues();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  input.getValues();	  char[]    input    =    input.getValues();    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
49	[BUG]  [BUGGY]  String  input  =  input.getValues();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  input  =  input.getValues();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	String  input  =  input.getValues();	  char[]    input    =    input.getValues();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	142	None	replace
50	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	85	1	add
51	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	85	1	add
52	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	85	1	add
53	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	85	1	add
54	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	85	1	add
55	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	85	1	add
56	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  if(input!=  null)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input.length()  ==  0)  {  if(input!=  null)  {  out.write('n');  }	          if(input!=    null)    {    out.write('n');    }    if(input!=    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
57	[BUG]  [BUGGY]  Char[]  input  =  input.getAstRoot(Character.codePointAt(pos,  out));  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  input.getAstRoot(Character.codePointAt(pos,  out));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  input.getAstRoot(Character.codePointAt(pos,  out));	  Char[]    input    =    input.getAstRoot(Character.codePointAt(pos,    input));    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
58	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  int  pos  =(input  ==  null)?  1  :  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  int  pos  =(input  ==  null)?  1  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =(input    ==    null)?    1    :    input.length();    int  pos  =(input  ==  null)?  1  :  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	25	None	add
59	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  int  pos  =(input!=  null)?  1  :  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  int  pos  =(input!=  null)?  1  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =(input    ==    null)?    1    :    input.length();    int  pos  =(input!=  null)?  1  :  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	25	None	add
60	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  Int  pos  =(input  ==  null)?  1  :  input.length();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  Int  pos  =(input  ==  null)?  1  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =(input    ==    null)?    1    :    input.length();    Int  pos  =(input  ==  null)?  1  :  input.length();	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
61	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  pos  =(input  ==  null)?  1  :  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  pos  =(input  ==  null)?  1  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =(input    ==    null)?    1    :    input.length();    pos  =(input  ==  null)?  1  :  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	25	None	add
62	[BUG]  [BUGGY]  if(input.length()!=  0)  {  out.write('n');  return;  }  [CE]  cannot  find  symbol  pos  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()!=  0)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input.length()!=  0)  {  out.write('n');  return;  }	  if(input.length()    ==    0)    {    out.write('n');    return;    }    	non-compiled	[CE]  cannot  find  symbol  pos	11	None	replace
63	[BUG]  [BUGGY]  if(input.length()  >  0)  {  out.write('n');  return;  }  [CE]  cannot  find  symbol  pos  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  >  0)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input.length()  >  0)  {  out.write('n');  return;  }	  if(input.length()    ==    0)    {    out.write('n');    return;    }    	non-compiled	[CE]  cannot  find  symbol  pos	11	None	replace
64	[BUG]  [BUGGY]  char[]  input  =  out.getAstRoot(Character.codePointAt(pos));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  out.getAstRoot(Character.codePointAt(pos));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  out.getAstRoot(Character.codePointAt(pos));	  char[]    input    =    input.getAstRoot(Character.codePointAt(pos));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	17	None	replace
65	[BUG]  [BUGGY]  char[]  input  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  Character.toChars(Character.codePointAt(input,  pos));	  char[]    input    =    input.getAstRoot(Character.codePointAt(pos));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	17	None	replace
66	[BUG]  [BUGGY]  char[]  input  =  output.getAstRoot(Character.codePointAt(pos));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  output.getAstRoot(Character.codePointAt(pos));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  output.getAstRoot(Character.codePointAt(pos));	  char[]    input    =    input.getAstRoot(Character.codePointAt(pos));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	17	None	replace
67	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(input.readLine());  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(input.readLine());  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	OutputStream  input  =  new  BufferedOutputStream(input.readLine());	  OutputStream    input    =    new    BufferedOutputStream(out.readLine());    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
68	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out,  out.readLine());  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out,  out.readLine());  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	OutputStream  input  =  new  BufferedOutputStream(out,  out.readLine());	  OutputStream    input    =    new    BufferedOutputStream(out.readLine());    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
69	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  out.charAt(0));  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  out.charAt(0));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  out.charAt(0));	  OutputStream    input    =    new    BufferedOutputStream(out.readLine());    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
70	[BUG]  [BUGGY]  if(input.length()  >  0)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  >  0)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input.length()  >  0)  {  int  pos  =  input.length();  int  pos  =  input.length();  }	  int    pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	67	None	replace
71	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	Integer  pos  =  input.length();	  int    pos    =    input.length();    int    pos    =    input.length();    	compilable	  [FE]  ComparisonFailure  	67	1	replace
72	[BUG]  [BUGGY]  Integer  pos  =  input.length();  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Integer  pos  =  input.length();	  int    pos    =    input.length();    int    pos    =    input.length();    	compilable	  [FE]  ComparisonFailure  	67	1	replace
73	[BUG]  [BUGGY]  char[]  input  =  input.toChars(pos,  out);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.toChars(pos,  out);  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  input.toChars(pos,  out);	  char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	76	None	replace
74	[BUG]  [BUGGY]  char[]  input  =  input.toChars(pos  +  1);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.toChars(pos  +  1);  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  input.toChars(pos  +  1);	  char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	76	None	replace
75	[BUG]  [BUGGY]  char[]  input  =  input.toChars(pos)+  1;  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.toChars(pos)+  1;  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  input.toChars(pos)+  1;	  char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	76	None	replace
76	[BUG]  [BUGGY]  String  pos  =  0;  [CE]  incompatible  types  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	String  pos  =  0;	  char    pos    =    0;    String    pos    =    0;    	non-compiled	[CE]  incompatible  types	57	None	replace
77	[BUG]  [BUGGY]  int  pos  =  0;  String  pos  =  0;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  String  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  0;  String  pos  =  0;	  char    pos    =    0;    String    pos    =    0;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	57	None	replace
78	[BUG]  [BUGGY]  CharSequence  pos  =  0;  [CE]  incompatible  types  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  pos  =  0;	  char    pos    =    0;    String    pos    =    0;    	non-compiled	[CE]  incompatible  types	57	None	replace
79	[BUG]  [BUGGY]  Int  pos  =  input.length();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Int  pos  =  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Int  pos  =  input.length();	  int    pos    =    input.length();    Int    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
80	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getBytes(),  out);  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getBytes(),  out);  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	OutputStream  input  =  new  FileOutputStream(input.getBytes(),  out);	  OutputStream    input    =    new    FileOutputStream(input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
81	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(out.getBytes());  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(out.getBytes());  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	OutputStream  input  =  new  FileOutputStream(out.getBytes());	  OutputStream    input    =    new    FileOutputStream(input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
82	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input,  out.getBytes());  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input,  out.getBytes());  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	OutputStream  input  =  new  FileOutputStream(input,  out.getBytes());	  OutputStream    input    =    new    FileOutputStream(input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
83	[BUG]  [BUGGY]  char[]  input  =  out.getAstRoot(Character.codePointAt(pos,  pos));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  out.getAstRoot(Character.codePointAt(pos,  pos));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  out.getAstRoot(Character.codePointAt(pos,  pos));	  char[]    input    =    input.getAstRoot(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	50	None	replace
84	[BUG]  [BUGGY]  Char  pos  =(input!=  null)?  0  :  input.length();  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char  pos  =(input!=  null)?  0  :  input.length();	  char    pos    =(input!=    null)?    0    :    input.length();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
85	[BUG]  [BUGGY]  String  pos  =(input!=  null)?  0  :  input.length();  [CE]  incompatible  types  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	String  pos  =(input!=  null)?  0  :  input.length();	  char    pos    =(input!=    null)?    0    :    input.length();    	non-compiled	[CE]  incompatible  types	14	None	replace
86	[BUG]  [BUGGY]  pos  =(input  ==  null)?  0  :  input.length();  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	pos  =(input  ==  null)?  0  :  input.length();	  int    pos    =(input    ==    null)?    0    :    input.length();    int    pos    =(input    ==    null)?    0    :    input.length();    	non-compiled	[CE]  cannot  find  symbol  pos	100	None	replace
87	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	93	1	add
88	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	93	1	add
89	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	93	1	add
90	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	93	1	add
91	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  nu  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  nu  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  nu	  	non-compiled	[CE]  	93	None	add
92	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	91	1	add
93	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	91	1	add
94	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	91	1	add
95	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	91	1	add
96	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.  [CE]  unclosed  string  literal  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.	  	non-compiled	[CE]  unclosed  string  literal	91	None	add
97	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	91	1	add
98	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	91	1	add
99	[BUG]  [BUGGY]  out.write('n',  pos);  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write('n',  pos);  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write('n',  pos);	  out.write('n');    	non-compiled	[CE]  cannot  find  symbol  pos	78	None	replace
100	[BUG]  [BUGGY]  out.write('n',  input.length());  [CE]  no  suitable  method  found  for  write(char,int)  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write('n',  input.length());  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write('n',  input.length());	  out.write('n');    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	78	None	replace
101	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	149	1	add
102	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	149	1	add
103	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	5	1	add
104	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	5	1	add
105	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null..   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null..   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	5	1	add
106	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null..   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null..   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null..   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	5	1	add
107	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	5	1	add
108	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	5	1	add
109	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.  [CE]  unclosed  string  literal  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	5	None	add
110	[BUG]  [BUGGY]  CharSequence  input  =  input.getAstRoot(Character.codePointAt(pos));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getAstRoot(Character.codePointAt(pos));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.getAstRoot(Character.codePointAt(pos));	  CharSequence    input    =    input.getAstRoot(Character.codePointAt(input));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	122	None	replace
111	[BUG]  [BUGGY]  CharSequence  input  =  output.getAstRoot(Character.codePointAt(input));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  output.getAstRoot(Character.codePointAt(input));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  output.getAstRoot(Character.codePointAt(input));	  CharSequence    input    =    input.getAstRoot(Character.codePointAt(input));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	122	None	replace
112	[BUG]  [BUGGY]  CharSequence  input  =  out.getAstRoot(Character.codePointAt(input));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  out.getAstRoot(Character.codePointAt(input));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  out.getAstRoot(Character.codePointAt(input));	  CharSequence    input    =    input.getAstRoot(Character.codePointAt(input));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	122	None	replace
113	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getChars());  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getChars());  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	OutputStream  input  =  new  FileOutputStream(input.getChars());	          if(input!=    null)    {    out.write('n');    }    if(input    >>    null)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
114	[BUG]  [BUGGY]  int  pos  =  0;  Int  pos  =  0;  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  Int  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  0;  Int  pos  =  0;	  int    pos    =    1;    Int    pos    =    1;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
115	[BUG]  [BUGGY]  int  pos  =  2;  Int  pos  =  1;  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  2;  Int  pos  =  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  2;  Int  pos  =  1;	  int    pos    =    1;    Int    pos    =    1;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
116	[BUG]  [BUGGY]  Char  pos  =  0;  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char  pos  =  0;	  char    pos    =    0;    Char    pos    =    0;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
117	[BUG]  [BUGGY]  Character  pos  =  0;  [CE]  inconvertible  types  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Character  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Character  pos  =  0;	  char    pos    =    0;    Char    pos    =    0;    	non-compiled	[CE]  inconvertible  types	55	None	replace
118	[BUG]  [BUGGY]  out.write(Character.toChars(input));  [CE]  no  suitable  method  found  for  toChars(CharSequence)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Character.toChars(input));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write(Character.toChars(input));	  out.write(c);    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence)	82	None	replace
119	[BUG]  [BUGGY]  out.write(Character.toChars(input,  pos));  [CE]  cannot  find  symbol  pos  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Character.toChars(input,  pos));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write(Character.toChars(input,  pos));	  out.write(c);    	non-compiled	[CE]  cannot  find  symbol  pos	82	None	replace
120	[BUG]  [BUGGY]  out.write(Character.toLowerCase(pos));  [CE]  cannot  find  symbol  pos  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Character.toLowerCase(pos));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write(Character.toLowerCase(pos));	  out.write(c);    	non-compiled	[CE]  cannot  find  symbol  pos	82	None	replace
121	[BUG]  [BUGGY]  int  pos  =  output.length();  [CE]  cannot  find  symbol  output  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  output.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  output.length();	  int    pos    =    out.length();    	non-compiled	[CE]  cannot  find  symbol  output	125	None	replace
122	[BUG]  [BUGGY]  char[]  input  =  input.getAstRoot(Character.codePointAt(pos,  in));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.getAstRoot(Character.codePointAt(pos,  in));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  input.getAstRoot(Character.codePointAt(pos,  in));	  char[]    input    =    input.getAstRoot(Character.codePointAt(pos,    input));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	106	None	replace
123	[BUG]  [BUGGY]  char[]  input  =  Character.getAstRoot(Character.codePointAt(input,  pos));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  Character.getAstRoot(Character.codePointAt(input,  pos));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  Character.getAstRoot(Character.codePointAt(input,  pos));	  char[]    input    =    input.getAstRoot(Character.codePointAt(pos,    input));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	106	None	replace
124	[BUG]  [BUGGY]  int  pos  =  input.length()  +  output.length();  [CE]  cannot  find  symbol  output  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  output.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.length()  +  output.length();	  int    pos    =    input.length()    +    out.length();    	non-compiled	[CE]  cannot  find  symbol  output	124	None	replace
125	[BUG]  [BUGGY]  int  pos  =  input.length()  +  this.out.length();  [CE]  cannot  find  symbol  out  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  this.out.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.length()  +  this.out.length();	  int    pos    =    input.length()    +    out.length();    	non-compiled	[CE]  cannot  find  symbol  out	124	None	replace
126	[BUG]  [BUGGY]  int  pos  =  input.length()  *  out.length();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  *  out.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.length()  *  out.length();	  int    pos    =    input.length()    +    out.length();    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
127	[BUG]  [BUGGY]  String  pos  =  input.length();  [CE]  incompatible  types  [FE]        IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  pos  =  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	String  pos  =  input.length();	  char    pos    =    input.length();    	non-compiled	[CE]  incompatible  types	1	None	replace
128	[BUG]  [BUGGY]  Char  pos  =  input.length();  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char  pos  =  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char  pos  =  input.length();	  char    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
129	[BUG]  [BUGGY]  Int  pos  =(input  ==  null)?  0  :  input.length();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Int  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Int  pos  =(input  ==  null)?  0  :  input.length();	  int    pos    =(input    ==    null)?    0    :    input.length();    Int    pos    =(input    ==    null)?    0    :    input.length();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
130	[BUG]  [BUGGY]  float  pos  =  input.length();  [CE]  no  suitable  method  found  for  translate(CharSequence,float,Writer)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  float  pos  =  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	float  pos  =  input.length();	  int    pos    =    input.length();    float    pos    =    input.length();    	non-compiled	[CE]  no  suitable  method  found  for  translate(CharSequence,float,Writer)	135	None	replace
131	[BUG]  [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(input!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	12	None	replace
132	[BUG]  [BUGGY]  Char[]  input  =  this.input.getChars();  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  this.input.getChars();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  this.input.getChars();	  Char[]    input    =    input.getChars();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
133	[BUG]  [BUGGY]  Char[]  input  =  output.getChars();  [CE]  cannot  find  symbol  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  output.getChars();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  output.getChars();	  Char[]    input    =    input.getChars();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
134	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	145	None	replace
135	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	145	None	replace
136	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	132	None	replace
137	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  pos  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	132	None	replace
138	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  pos  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input  ==  null  ||  input.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	132	None	replace
139	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]              IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	int  pos  =  0;  pos  =  0;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	23	1	replace
140	[BUG]  [BUGGY]  int  pos  =  0;  pos  =  0;  [FE]  StringIndexOutOfBoundsException  [FE]              IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  0;  pos  =  0;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	23	1	replace
141	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  pos  =  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	int  pos  =  0;  pos  =  1;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  IllegalStateException  	23	1	replace
142	[BUG]  [BUGGY]  int  pos  =  0;  pos  =  1;  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  pos  =  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  0;  pos  =  1;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  IllegalStateException  	23	1	replace
143	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  2;  pos  =  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	int  pos  =  2;  pos  =  1;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  IllegalStateException  	23	1	replace
144	[BUG]  [BUGGY]  int  pos  =  2;  pos  =  1;  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  2;  pos  =  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  2;  pos  =  1;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  IllegalStateException  	23	1	replace
145	[BUG]  [BUGGY]  int  pos  =  input.length()  -  1;  int  pos  =  input.length()  -  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    IllegalStateException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  1;  int  pos  =  input.length()  -  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =    input.length()    -    1;    int  pos  =  input.length()  -  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	47	None	add
146	[BUG]  [BUGGY]  int  pos  =  input.length()  -  1;  Int  pos  =  input.length()  -  1;  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  1;  Int  pos  =  input.length()  -  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =    input.length()    -    1;    Int  pos  =  input.length()  -  1;	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
147	[BUG]  [BUGGY]  int  pos  =  input.length()  -  1;  pos  =  input.length()  -  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IllegalStateException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  1;  pos  =  input.length()  -  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =    input.length()    -    1;    pos  =  input.length()  -  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	47	None	add
148	[BUG]  [BUGGY]  int  pos  =  input.length()  -  1;  int  pos  =  output.length()  -  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IllegalStateException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  1;  int  pos  =  output.length()  -  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =    input.length()    -    1;    int  pos  =  output.length()  -  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	47	None	add
149	[BUG]  [BUGGY]  char  pos  =  input.charAt(0);  char  pos  =  input.charAt(0);  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(0);  char  pos  =  input.charAt(0);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char    pos    =    input.charAt(0);    char  pos  =  input.charAt(0);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	58	None	add
150	[BUG]  [BUGGY]  char  pos  =  input.charAt(0);  char  pos  =  input.charAt(1);  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(0);  char  pos  =  input.charAt(1);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char    pos    =    input.charAt(0);    char  pos  =  input.charAt(1);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	58	None	add
151	[BUG]  [BUGGY]  char  pos  =  input.charAt(0);  Character  pos  =  input.charAt(0);  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(0);  Character  pos  =  input.charAt(0);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char    pos    =    input.charAt(0);    Character  pos  =  input.charAt(0);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	58	None	add
152	[BUG]  [BUGGY]  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  cannot  find  symbol  pos  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	150	None	replace
153	[BUG]  [BUGGY]  Char[]  input  =  Character.getAstRoot(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  Character.getAstRoot(Character.codePointAt(input,  pos));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  Character.getAstRoot(Character.codePointAt(input,  pos));	  Char[]    input    =    input.getAstRoot(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
154	[BUG]  [BUGGY]  Char[]  input  =  this.input.getAstRoot(Character.codePointAt(pos,  pos));  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  this.input.getAstRoot(Character.codePointAt(pos,  pos));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  this.input.getAstRoot(Character.codePointAt(pos,  pos));	  Char[]    input    =    input.getAstRoot(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
155	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	Integer  pos  =  0;	  char    pos    =    0;    int    pos    =    0;    	compilable	  [FE]  StringIndexOutOfBoundsException  	56	1	replace
156	[BUG]  [BUGGY]  Integer  pos  =  0;  [FE]  StringIndexOutOfBoundsException  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Integer  pos  =  0;	  char    pos    =    0;    int    pos    =    0;    	compilable	  [FE]  StringIndexOutOfBoundsException  	56	1	replace
157	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('n',  out);  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.lastIndexOf('n',  out);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.lastIndexOf('n',  out);	  int    pos    =    input.lastIndexOf('n');    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
158	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('n',  pos);  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.lastIndexOf('n',  pos);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.lastIndexOf('n',  pos);	  int    pos    =    input.lastIndexOf('n');    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
159	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('n',  off);  [CE]  cannot  find  symbol  off  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.lastIndexOf('n',  off);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.lastIndexOf('n',  off);	  int    pos    =    input.lastIndexOf('n');    	non-compiled	[CE]  cannot  find  symbol  off	131	None	replace
160	[BUG]  [BUGGY]  CharSequence  input  =  input.getOutputChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getOutputChars();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.getOutputChars();	  char[]    input    =    input.getOutputChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	129	None	replace
161	[BUG]  [BUGGY]  Char[]  input  =  input.getOutputChars();  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  input.getOutputChars();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  input.getOutputChars();	  char[]    input    =    input.getOutputChars();    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
162	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	73	1	add
163	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	73	1	add
164	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(       "n       ");    }    if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	73	1	add
165	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(       "n       ");    }    if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	73	1	add
166	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ".n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	146	1	add
167	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ".n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	146	1	add
168	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(1);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	char  pos  =  input.charAt(1);	  char    pos    =    input.charAt(0);    	compilable	  [FE]  ComparisonFailure  	59	1	replace
169	[BUG]  [BUGGY]  char  pos  =  input.charAt(1);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(1);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char  pos  =  input.charAt(1);	  char    pos    =    input.charAt(0);    	compilable	  [FE]  ComparisonFailure  	59	1	replace
170	[BUG]  [BUGGY]  char  pos  =  input.charAt(0,  input.length());  [CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(0,  input.length());  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char  pos  =  input.charAt(0,  input.length());	  char    pos    =    input.charAt(0);    	non-compiled	[CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;	59	None	replace
171	[BUG]  [BUGGY]  CharSequence  input  =  input.getInputChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getInputChars();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.getInputChars();	  char[]    input    =    input.getInputChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	141	None	replace
172	[BUG]  [BUGGY]  Char[]  input  =  input.getInputChars();  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  input.getInputChars();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  input.getInputChars();	  char[]    input    =    input.getInputChars();    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
173	[BUG]  [BUGGY]  char[]  input  =  input.toChars(out,  out);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.toChars(out,  out);  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  input.toChars(out,  out);	  char[]    input    =    input.toChars(out);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	77	None	replace
174	[BUG]  [BUGGY]  char[]  input  =  input.toChars(out,  false);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.toChars(out,  false);  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  input.toChars(out,  false);	  char[]    input    =    input.toChars(out);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	77	None	replace
175	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(input.length());  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	char  pos  =  input.charAt(input.length());	  char    pos    =    input.charAt(pos);    	compilable	  [FE]  StringIndexOutOfBoundsException  	60	1	replace
176	[BUG]  [BUGGY]  char  pos  =  input.charAt(input.length());  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(input.length());  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char  pos  =  input.charAt(input.length());	  char    pos    =    input.charAt(pos);    	compilable	  [FE]  StringIndexOutOfBoundsException  	60	1	replace
177	[BUG]  [BUGGY]  char  pos  =  input.charAt(input.length);  [CE]  cannot  find  symbol  length  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(input.length);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char  pos  =  input.charAt(input.length);	  char    pos    =    input.charAt(pos);    	non-compiled	[CE]  cannot  find  symbol  length	60	None	replace
178	[BUG]  [BUGGY]  char  pos  =  input.charAt(offset);  [CE]  cannot  find  symbol  offset  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(offset);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char  pos  =  input.charAt(offset);	  char    pos    =    input.charAt(pos);    	non-compiled	[CE]  cannot  find  symbol  offset	60	None	replace
179	[BUG]  [BUGGY]  float  pos  =(input  ==  null)?  0  :  input.length();  [CE]  no  suitable  method  found  for  translate(CharSequence,float,Writer)  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  float  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	float  pos  =(input  ==  null)?  0  :  input.length();	  float    pos    =(input!=    null)?    0    :    input.length();    	non-compiled	[CE]  no  suitable  method  found  for  translate(CharSequence,float,Writer)	117	None	replace
180	[BUG]  [BUGGY]  double  pos  =(input!=  null)?  0  :  input.length();  [CE]  no  suitable  method  found  for  translate(CharSequence,double,Writer)  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  double  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	double  pos  =(input!=  null)?  0  :  input.length();	  float    pos    =(input!=    null)?    0    :    input.length();    	non-compiled	[CE]  no  suitable  method  found  for  translate(CharSequence,double,Writer)	117	None	replace
181	[BUG]  [BUGGY]  CharSequence  input  =  input.getChars(pos);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getChars(pos);  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.getChars(pos);	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	61	None	replace
182	[BUG]  [BUGGY]  CharSequence  input  =  input.getValue();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getValue();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.getValue();	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	61	None	replace
183	[BUG]  [BUGGY]  CharSequence  input  =  input.getChars(0,  0);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getChars(0,  0);  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.getChars(0,  0);	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	61	None	replace
184	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	1	add
185	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	1	add
186	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	1	add
187	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	1	add
188	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	1	add
189	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	1	add
190	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	1	add
191	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	1	add
192	[BUG]  [BUGGY]  int  pos  =  1  <  <  input.length()  +  1;  [CE]  >  expected  [FE]        IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  1  <  <  input.length()  +  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  1  <  <  input.length()  +  1;	  int    pos    =    1    <    <    input.length();    	non-compiled	[CE]  >  expected	119	None	replace
193	[BUG]  [BUGGY]  int  pos  =  1  <  <  input.length()  -  1;  [CE]  >  expected  [FE]          IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  1  <  <  input.length()  -  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  1  <  <  input.length()  -  1;	  int    pos    =    1    <    <    input.length();    	non-compiled	[CE]  >  expected	119	None	replace
194	[BUG]  [BUGGY]  int  pos  =  1  <  <  input.length()  +  2;  [CE]  >  expected  [FE]            IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  1  <  <  input.length()  +  2;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  1  <  <  input.length()  +  2;	  int    pos    =    1    <    <    input.length();    	non-compiled	[CE]  >  expected	119	None	replace
195	[BUG]  [BUGGY]  ||  input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  ||  input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	||  input!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  ||    input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
196	[BUG]  [BUGGY]  ||  out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  ||  out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	||  out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  ||    input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
197	[BUG]  [BUGGY]  ||  output  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  ||  output  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	||  output  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  ||    input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
198	[BUG]  [BUGGY]  int  pos  =  0;  int  pos  =  0;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  int  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  0;  int  pos  =  0;	  char    pos    =    0;    char    pos    =    0;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	53	None	replace
199	[BUG]  [BUGGY]  out  =  input.length();  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out  =  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out  =  input.length();	  pos    =    input.length();    	non-compiled	[CE]  incompatible  types	49	None	replace
200	[BUG]  [BUGGY]  int  pos  =(input!=  null)?  1  :  input.length();  int  pos  =(input!=  null)?  1  :  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    IllegalStateException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input!=  null)?  1  :  input.length();  int  pos  =(input!=  null)?  1  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =(input!=    null)?    1    :    input.length();    int  pos  =(input!=  null)?  1  :  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	15	None	add
201	[BUG]  [BUGGY]  int  pos  =(input!=  null)?  1  :  input.length();  int  pos  =(input  ==  null)?  1  :  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      IllegalStateException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input!=  null)?  1  :  input.length();  int  pos  =(input  ==  null)?  1  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =(input!=    null)?    1    :    input.length();    int  pos  =(input  ==  null)?  1  :  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	15	None	add
202	[BUG]  [BUGGY]  int  pos  =(input!=  null)?  1  :  input.length();  int  pos  =(input  >>  null)?  1  :  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IllegalStateException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input!=  null)?  1  :  input.length();  int  pos  =(input  >>  null)?  1  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =(input!=    null)?    1    :    input.length();    int  pos  =(input  >>  null)?  1  :  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	15	None	add
203	[BUG]  [BUGGY]  int  pos  =(input!=  null)?  1  :  input.length();  int  pos  =(input  >=  null)?  1  :  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IllegalStateException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input!=  null)?  1  :  input.length();  int  pos  =(input  >=  null)?  1  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =(input!=    null)?    1    :    input.length();    int  pos  =(input  >=  null)?  1  :  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	15	None	add
204	[BUG]  [BUGGY]  int  pos  =(input!=  null)?  1  :  input.length();  Int  pos  =(input!=  null)?  1  :  input.length();  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input!=  null)?  1  :  input.length();  Int  pos  =(input!=  null)?  1  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =(input!=    null)?    1    :    input.length();    Int  pos  =(input!=  null)?  1  :  input.length();	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
205	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  pos  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	86	None	replace
206	[BUG]  [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    be    null.       ");    }    if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	94	None	replace
207	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".length());  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( ".s.IFJDCS ".length());  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write( ".s.IFJDCS ".length());	  out.write(   "null   ");    	non-compiled	[CE]  cannot  find  symbol  pos	64	None	replace
208	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(0));  [CE]  cannot  find  symbol  pos  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( ".s.IFJDCS ".charAt(0));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write( ".s.IFJDCS ".charAt(0));	  out.write(   "null   ");    	non-compiled	[CE]  cannot  find  symbol  pos	64	None	replace
209	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".getBytes());  [CE]  no  suitable  method  found  for  write(byte[])  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( ".s.IFJDCS ".getBytes());  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write( ".s.IFJDCS ".getBytes());	  out.write(   "null   ");    	non-compiled	[CE]  no  suitable  method  found  for  write(byte[])	64	None	replace
210	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	1	add
211	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	1	add
212	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	1	add
213	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	1	add
214	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	35	None	add
215	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  If(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  If(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    If(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	non-compiled	[CE]  ';'  expected	35	None	add
216	[BUG]  [BUGGY]  String  pos  =  0L;  [CE]  incompatible  types  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  pos  =  0L;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	String  pos  =  0L;	  char    pos    =    0L;    	non-compiled	[CE]  incompatible  types	115	None	replace
217	[BUG]  [BUGGY]  Character  pos  =  0L;  [CE]  incompatible  types  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Character  pos  =  0L;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Character  pos  =  0L;	  char    pos    =    0L;    	non-compiled	[CE]  incompatible  types	115	None	replace
218	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	39	1	add
219	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	39	1	add
220	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	39	1	add
221	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	39	1	add
222	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	39	1	add
223	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	39	1	add
224	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  >=  null)  {  out.write('n');  return;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  >=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  >=  null)  {  out.write('n');  return;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	39	None	add
225	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =(input    ==    null)?    0    :    input.length()    +    1;    int  pos  =(input  ==  null)?  0  :  input.length()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	104	None	add
226	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  int  pos  =(input!=  null)?  0  :  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  int  pos  =(input!=  null)?  0  :  input.length()  +  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =(input    ==    null)?    0    :    input.length()    +    1;    int  pos  =(input!=  null)?  0  :  input.length()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	104	None	add
227	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  Int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  Int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =(input    ==    null)?    0    :    input.length()    +    1;    Int  pos  =(input  ==  null)?  0  :  input.length()  +  1;	  	non-compiled	[CE]  cannot  find  symbol	104	None	add
228	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  pos  =(input  ==  null)?  0  :  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  pos  =(input  ==  null)?  0  :  input.length()  +  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =(input    ==    null)?    0    :    input.length()    +    1;    pos  =(input  ==  null)?  0  :  input.length()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	104	None	add
229	[BUG]  [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	92	None	replace
230	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	140	None	replace
231	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	140	None	replace
232	[BUG]  [BUGGY]  If(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  If(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	If(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  	140	None	replace
233	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	27	1	add
234	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	27	1	add
235	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	27	1	add
236	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	27	1	add
237	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	27	1	add
238	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	27	1	add
239	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	27	None	add
240	[BUG]  [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    If(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
241	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  return;  }  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    If(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
242	[BUG]  [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  }	          if(input    ==    null)    {    out.write('n');    }    if(input    ==    null)    {    out.write('n');    continue;    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
243	[BUG]  [BUGGY]  Int  pos  =(input!=  null)?  0  :  input.length();  [CE]  cannot  find  symbol  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Int  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Int  pos  =(input!=  null)?  0  :  input.length();	  int    pos    =(input!=    null)?    0    :    input.length();    Int    pos    =(input!=    null)?    0    :    input.length();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
244	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	71	1	add
245	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	71	1	add
246	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	71	1	add
247	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	71	1	add
248	[BUG]  [BUGGY]  ||  input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  ||  input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	||  input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	  ||    input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
249	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write('n');  continue;  }  [CE]  continue  outside  of  loop  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  out.write('n');  continue;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input.length()  ==  0)  {  out.write('n');  continue;  }	  out.write('n');    continue;    	non-compiled	[CE]  continue  outside  of  loop	84	None	replace
250	[BUG]  [BUGGY]  if(input.length()  >  0)  {  out.write('n');  continue;  }  [CE]  continue  outside  of  loop  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  >  0)  {  out.write('n');  continue;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input.length()  >  0)  {  out.write('n');  continue;  }	  out.write('n');    continue;    	non-compiled	[CE]  continue  outside  of  loop	84	None	replace
251	[BUG]  [BUGGY]  out.write(input.charAt(0),  input.length());  [CE]  no  suitable  method  found  for  write(char,int)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.charAt(0),  input.length());  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write(input.charAt(0),  input.length());	  out.write(input.charAt(0));    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	127	None	replace
252	[BUG]  [BUGGY]  out.write(input.substring(0,  input.length()  -  1));  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.substring(0,  input.length()  -  1));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write(input.substring(0,  input.length()  -  1));	  out.write(input.charAt(0));    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
253	[BUG]  [BUGGY]  out.write(input.substring(0,  input.length()));  [CE]  cannot  find  symbol  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.substring(0,  input.length()));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write(input.substring(0,  input.length()));	  out.write(input.charAt(0));    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
254	[BUG]  [BUGGY]  char[]  input  =  output.toCharsArray();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  output.toCharsArray();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  output.toCharsArray();	  char[]    input    =    input.toCharsArray();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	75	None	replace
255	[BUG]  [BUGGY]  Char[]  input  =  input.toCharsArray();  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  input.toCharsArray();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  input.toCharsArray();	  char[]    input    =    input.toCharsArray();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
256	[BUG]  [BUGGY]  CharSequence  input  =  input.toCharsArray();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.toCharsArray();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.toCharsArray();	  char[]    input    =    input.toCharsArray();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	75	None	replace
257	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  2;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	int  pos  =  2;	  int    pos    =    1;    int    pos    =    2;    	compilable	  [FE]  ComparisonFailure  	148	1	replace
258	[BUG]  [BUGGY]  int  pos  =  2;  [FE]  ComparisonFailure  [FE]        IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  2;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  2;	  int    pos    =    1;    int    pos    =    2;    	compilable	  [FE]  ComparisonFailure  	148	1	replace
259	[BUG]  [BUGGY]  if(input!=  null)  {  out.write( ",   ");  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  out.write( ",   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input!=  null)  {  out.write( ",   ");  }	  if(input    ==    null)    {    out.write(   ",   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	138	None	replace
260	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	87	1	add
261	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	87	1	add
262	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	87	1	add
263	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	87	1	add
264	[BUG]  [BUGGY]  int  pos  +=  input.length();  [CE]  ';'  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  +=  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  +=  input.length();	  pos    +=    input.length();    	non-compiled	[CE]  ';'  expected	81	None	replace
265	[BUG]  [BUGGY]  out  +=  input.length();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out  +=  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out  +=  input.length();	  pos    +=    input.length();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	81	None	replace
266	[BUG]  [BUGGY]  out.write(input.length());  [CE]  cannot  find  symbol  pos  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.length());  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write(input.length());	  pos    +=    input.length();    	non-compiled	[CE]  cannot  find  symbol  pos	81	None	replace
267	[BUG]  [BUGGY]  Char[]  input  =  this.input.getAstRoot(Character.codePointAt(pos));  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  this.input.getAstRoot(Character.codePointAt(pos));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  this.input.getAstRoot(Character.codePointAt(pos));	  Char[]    input    =    input.getAstRoot(Character.codePointAt(pos));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
268	[BUG]  [BUGGY]  Char[]  input  =  Character.getAstRoot(Character.codePointAt(input));  [CE]  cannot  find  symbol  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  Character.getAstRoot(Character.codePointAt(input));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  Character.getAstRoot(Character.codePointAt(input));	  Char[]    input    =    input.getAstRoot(Character.codePointAt(pos));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
269	[BUG]  [BUGGY]  int  pos  =  0;  Character  pos  =  0;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  Character  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  0;  Character  pos  =  0;	  char    pos    =    0;    Character    pos    =    0;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	54	None	replace
270	[BUG]  [BUGGY]  out.write( "no  input. ");  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( "no  input. ");  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write( "no  input. ");	  out.write(   "no    input   ");    	non-compiled	[CE]  cannot  find  symbol  pos	112	None	replace
271	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".toString());  [CE]  cannot  find  symbol  pos  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( ".s.IFJDCS ".toString());  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write( ".s.IFJDCS ".toString());	  out.write(   "no    input   ");    	non-compiled	[CE]  cannot  find  symbol  pos	112	None	replace
272	[BUG]  [BUGGY]  out.write( "[null] ");  [CE]  cannot  find  symbol  pos  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( "[null] ");  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write( "[null] ");	  out.write(   "n   ");    	non-compiled	[CE]  cannot  find  symbol  pos	66	None	replace
273	[BUG]  [BUGGY]  out.write( "   ");  [CE]  cannot  find  symbol  pos  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( "   ");  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write( "   ");	  out.write(   "n   ");    	non-compiled	[CE]  cannot  find  symbol  pos	66	None	replace
274	[BUG]  [BUGGY]  int  pos  =  input.length()  +  1;  int  pos  =  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  1;  int  pos  =  input.length()  +  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =    input.length()    +    1;    int  pos  =  input.length()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	45	None	add
275	[BUG]  [BUGGY]  int  pos  =  input.length()  +  1;  Int  pos  =  input.length()  +  1;  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  1;  Int  pos  =  input.length()  +  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =    input.length()    +    1;    Int  pos  =  input.length()  +  1;	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
276	[BUG]  [BUGGY]  int  pos  =  input.length()  +  1;  pos  =  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  1;  pos  =  input.length()  +  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =    input.length()    +    1;    pos  =  input.length()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	45	None	add
277	[BUG]  [BUGGY]  int  pos  =  input.length()  +  1;  int  pos  =  output.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  1;  int  pos  =  output.length()  +  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =    input.length()    +    1;    int  pos  =  output.length()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	45	None	add
278	[BUG]  [BUGGY]  out  =  0;  [CE]  incompatible  types  [FE]          IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out  =  0;	  pos    =    0;    	non-compiled	[CE]  incompatible  types	2	None	replace
279	[BUG]  [BUGGY]  pt  =  0;  [CE]  cannot  find  symbol  pt  [FE]            IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  pt  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	pt  =  0;	  pos    =    0;    	non-compiled	[CE]  cannot  find  symbol  pt	2	None	replace
280	[BUG]  [BUGGY]  out.write('n');  break;  [CE]  break  outside  switch  or  loop  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write('n');  break;  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write('n');  break;	  out.write('n');    return;    	non-compiled	[CE]  break  outside  switch  or  loop	9	None	replace
281	[BUG]  [BUGGY]  out.write(c);  return;  [CE]  cannot  find  symbol  c  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(c);  return;  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write(c);  return;	  out.write('n');    return;    	non-compiled	[CE]  cannot  find  symbol  c	9	None	replace
282	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	1	add
283	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	1	add
284	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	1	add
285	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	1	add
286	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	1	add
287	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	1	add
288	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	33	None	add
289	[BUG]  [BUGGY]  char[]  input  =  out.getAstRoot(Character.codePointAt(pos,  out));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  out.getAstRoot(Character.codePointAt(pos,  out));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  out.getAstRoot(Character.codePointAt(pos,  out));	  char[]    input    =    input.getAstRoot(Character.codePointAt(pos,    out));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	51	None	replace
290	[BUG]  [BUGGY]  char[]  input  =  output.getAstRoot(Character.codePointAt(pos,  out));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  output.getAstRoot(Character.codePointAt(pos,  out));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  output.getAstRoot(Character.codePointAt(pos,  out));	  char[]    input    =    input.getAstRoot(Character.codePointAt(pos,    out));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	51	None	replace
291	[BUG]  [BUGGY]  If(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  If(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	If(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  	133	None	replace
292	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('.',  out);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.lastIndexOf('.',  out);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.lastIndexOf('.',  out);	  int    pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
293	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('.',  pos);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.lastIndexOf('.',  pos);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.lastIndexOf('.',  pos);	  int    pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
294	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('.',  0);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.lastIndexOf('.',  0);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.lastIndexOf('.',  0);	  int    pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
295	[BUG]  [BUGGY]  If(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  If(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	If(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	  if(out    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  	114	None	replace
296	[BUG]  [BUGGY]  String  pos  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  no  suitable  method  found  for  codePointAt(CharSequence,String)  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  pos  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	String  pos  =  Character.toChars(Character.codePointAt(input,  pos));	  char    pos    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(CharSequence,String)	143	None	replace
297	[BUG]  [BUGGY]  char  pos  =  Character.toChars(Character.codePointAt(input,  out));  [CE]  no  suitable  method  found  for  codePointAt(CharSequence,Writer)  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  Character.toChars(Character.codePointAt(input,  out));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char  pos  =  Character.toChars(Character.codePointAt(input,  out));	  char    pos    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(CharSequence,Writer)	143	None	replace
298	[BUG]  [BUGGY]  Char  pos  =  Character.toChars(Character.codePointAt(input,  out));  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char  pos  =  Character.toChars(Character.codePointAt(input,  out));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char  pos  =  Character.toChars(Character.codePointAt(input,  out));	  char    pos    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
299	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	1	add
300	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	1	add
301	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	1	add
302	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	1	add
303	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  nu  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  nu  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  nu	  	non-compiled	[CE]  	7	None	add
304	[BUG]  [BUGGY]  ||  out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  ||  out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	||  out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  ||    input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
305	[BUG]  [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(input!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	12	None	replace
306	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(out  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(out  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	1	add
307	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(out  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(out  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(out  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	1	add
308	[BUG]  [BUGGY]  ||  out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  ||  out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	||  out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	  ||    input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
309	[BUG]  [BUGGY]  Char[]  input  =  inputStream.getAstRoot(Character.codePointAt(input));  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  inputStream.getAstRoot(Character.codePointAt(input));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  inputStream.getAstRoot(Character.codePointAt(input));	  Char[]    input    =    input.getAstRoot(Character.codePointAt(input));    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
310	[BUG]  [BUGGY]  Char[]  input  =  output.getAstRoot(Character.codePointAt(input));  [CE]  cannot  find  symbol  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  output.getAstRoot(Character.codePointAt(input));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  output.getAstRoot(Character.codePointAt(input));	  Char[]    input    =    input.getAstRoot(Character.codePointAt(input));    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
311	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [CE]  cannot  find  symbol  pos  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	  if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	133	None	replace
312	[BUG]  [BUGGY]  char[]  input  =  input.toCharSequence();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.toCharSequence();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  input.toCharSequence();	  char[]    input    =    input.toString();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	111	None	replace
313	[BUG]  [BUGGY]  char  pos  =  input.charAt(0);  char  pos  =  input.charAt((0));  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(0);  char  pos  =  input.charAt((0));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char    pos    =    input.charAt(0);    char  pos  =  input.charAt((0));	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	58	None	add
314	[BUG]  [BUGGY]  char[]  input  =  out.getAstRoot(Character.codePointAt(input));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  out.getAstRoot(Character.codePointAt(input));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  out.getAstRoot(Character.codePointAt(input));	  char[]    input    =    input.getAstRoot(Character.codePointAt(pos));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	17	None	replace
315	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(input.length()  -  1);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	char  pos  =  input.charAt(input.length()  -  1);	  char    pos    =    input.charAt(0);    	compilable	  [FE]  ComparisonFailure  	59	1	replace
316	[BUG]  [BUGGY]  char  pos  =  input.charAt(input.length()  -  1);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(input.length()  -  1);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char  pos  =  input.charAt(input.length()  -  1);	  char    pos    =    input.charAt(0);    	compilable	  [FE]  ComparisonFailure  	59	1	replace
317	[BUG]  [BUGGY]  char  pos  =  input.charAt(out.length()  -  1);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(out.length()  -  1);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char  pos  =  input.charAt(out.length()  -  1);	  char    pos    =    input.charAt(0);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
318	[BUG]  [BUGGY]  Char[]  input  =  input.getAstRoot(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  input.getAstRoot(Character.codePointAt(input,  pos));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  input.getAstRoot(Character.codePointAt(input,  pos));	  Char[]    input    =    input.getAstRoot(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
319	[BUG]  [BUGGY]  Char[]  input  =  out.getAstRoot(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  out.getAstRoot(Character.codePointAt(input,  pos));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  out.getAstRoot(Character.codePointAt(input,  pos));	  Char[]    input    =    input.getAstRoot(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
320	[BUG]  [BUGGY]  int  pos  =  0;  int  pos  =  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  int  pos  =  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  0;  int  pos  =  1;	  int    pos    =    1;    int    pos    =    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	replace
321	[BUG]  [BUGGY]  int  pos  =  1  <  <  input.length()  +  out.length();  [CE]  >  expected  [FE]        IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  1  <  <  input.length()  +  out.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  1  <  <  input.length()  +  out.length();	  int    pos    =    1    <    <    input.length();    	non-compiled	[CE]  >  expected	119	None	replace
322	[BUG]  [BUGGY]  int  pos  =  1  <  <  input.length()  +  out.charAt(0);  [CE]  >  expected  [FE]          IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  1  <  <  input.length()  +  out.charAt(0);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  1  <  <  input.length()  +  out.charAt(0);	  int    pos    =    1    <    <    input.length();    	non-compiled	[CE]  >  expected	119	None	replace
323	[BUG]  [BUGGY]  &&  input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  &&  input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	&&  input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  ||    input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
324	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(0)));  [CE]  cannot  find  symbol  pos  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(input.charAt(0)));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write(Integer.toString(input.charAt(0)));	  out.write(input.charAt(0));    	non-compiled	[CE]  cannot  find  symbol  pos	127	None	replace
325	[BUG]  [BUGGY]  out.write(input.charAt(1));  [CE]  cannot  find  symbol  pos  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.charAt(1));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write(input.charAt(1));	  out.write(input.charAt(0));    	non-compiled	[CE]  cannot  find  symbol  pos	127	None	replace
326	[BUG]  [BUGGY]  out.write(Integer.toString(input));  [CE]  no  suitable  method  found  for  toString(CharSequence)  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(input));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write(Integer.toString(input));	  out.write(input.charAt(0));    	non-compiled	[CE]  no  suitable  method  found  for  toString(CharSequence)	127	None	replace
327	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]              IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  1;  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	int  pos  =  1;  pos  =  0;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	23	1	replace
328	[BUG]  [BUGGY]  int  pos  =  1;  pos  =  0;  [FE]  StringIndexOutOfBoundsException  [FE]              IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  1;  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  1;  pos  =  0;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  StringIndexOutOfBoundsException  	23	1	replace
329	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  1;  pos  =  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	char  pos  =  1;  pos  =  1;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  IllegalStateException  	23	1	replace
330	[BUG]  [BUGGY]  char  pos  =  1;  pos  =  1;  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  1;  pos  =  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char  pos  =  1;  pos  =  1;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  IllegalStateException  	23	1	replace
331	[BUG]  [BUGGY]  int  pos  =  0L;  [CE]  possible  loss  of  precision  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0L;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  0L;	  char    pos    =    0L;    	non-compiled	[CE]  possible  loss  of  precision	115	None	replace
332	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	73	1	add
333	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	73	1	add
334	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	3	None	add
335	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write('n');  return;  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out  ==  null)  {  out.write('n');  return;  }	  if(out!=    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  cannot  find  symbol  pos	126	None	replace
336	[BUG]  [BUGGY]  out.write(input);  [CE]  no  suitable  method  found  for  write(CharSequence)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write(input);	  out.write(c);    	non-compiled	[CE]  no  suitable  method  found  for  write(CharSequence)	82	None	replace
337	[BUG]  [BUGGY]  out.write(Integer.toString(pos));  [CE]  cannot  find  symbol  pos  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(pos));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write(Integer.toString(pos));	  out.write(c);    	non-compiled	[CE]  cannot  find  symbol  pos	82	None	replace
338	[BUG]  [BUGGY]  Char[]  input  =  inputStream.getChars();  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  inputStream.getChars();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  inputStream.getChars();	  Char[]    input    =    input.getChars();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
339	[BUG]  [BUGGY]  char[]  input  =  output.getValues();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  output.getValues();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  output.getValues();	  char[]    input    =    input.getValues();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	142	None	replace
340	[BUG]  [BUGGY]  char[]  input  =  input.getKey();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.getKey();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  input.getKey();	  char[]    input    =    input.getValues();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	142	None	replace
341	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write('n');  }  else  {  out.write(input.toString());  }  [CE]  cannot  find  symbol  pos  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null)  {  out.write('n');  }  else  {  out.write(input.toString());  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input  ==  null)  {  out.write('n');  }  else  {  out.write(input.toString());  }	          if(input    ==    null)    {    out.write('n');    }    If(input    ==    null)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol  pos	37	None	replace
342	[BUG]  [BUGGY]  int  pos  =  out.length()  +  input.length();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  out.length()  +  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  out.length()  +  input.length();	  int    pos    =    input.length()    +    out.length();    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
343	[BUG]  [BUGGY]  int  pos  =  input.length()  +  data.length();  [CE]  cannot  find  symbol  data  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  data.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.length()  +  data.length();	  int    pos    =    input.length()    +    out.length();    	non-compiled	[CE]  cannot  find  symbol  data	124	None	replace
344	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ".n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	146	1	add
345	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ".n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	146	1	add
346	[BUG]  [BUGGY]  int  pos  =  0;  Int  pos  =  1;  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  Int  pos  =  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  0;  Int  pos  =  1;	  int    pos    =    1;    Int    pos    =    1;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
347	[BUG]  [BUGGY]  int  pos  =  2;  Int  pos  =  2;  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  2;  Int  pos  =  2;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  2;  Int  pos  =  2;	  int    pos    =    1;    Int    pos    =    1;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
348	[BUG]  [BUGGY]  OutputStream  output  =  input.getOutputStream();  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  output  =  input.getOutputStream();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	OutputStream  output  =  input.getOutputStream();	  OutputStream    input    =    output.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
349	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write('n');  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out  ==  null)  {  out.write('n');  }	  if(out!=    null)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol  pos	130	None	replace
350	[BUG]  [BUGGY]  out.write('n');  pos  =  0;  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write('n');  pos  =  0;  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write('n');  pos  =  0;	  out.write('n');    return;    	non-compiled	[CE]  cannot  find  symbol  pos	9	None	replace
351	[BUG]  [BUGGY]  int  pos  =(input!=  null)?  0  :  input.length();  Int  pos  =(input  ==  null)?  0  :  input.length();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input!=  null)?  0  :  input.length();  Int  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =(input!=  null)?  0  :  input.length();  Int  pos  =(input  ==  null)?  0  :  input.length();	  int    pos    =(input    ==    null)?    0    :    input.length();    Int    pos    =(input    ==    null)?    0    :    input.length();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
352	[BUG]  [BUGGY]  int  pos  =  input.indexOf('n');  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.indexOf('n');  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.indexOf('n');	  int    pos    =    input.lastIndexOf('n');    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
353	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('n')+  1;  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.lastIndexOf('n')+  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.lastIndexOf('n')+  1;	  int    pos    =    input.lastIndexOf('n');    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
354	[BUG]  [BUGGY]  out.write( ".segment ");  [CE]  cannot  find  symbol  pos  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( ".segment ");  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write( ".segment ");	  out.write(   "negative   ");    	non-compiled	[CE]  cannot  find  symbol  pos	113	None	replace
355	[BUG]  [BUGGY]  out.write( "negative ",  input);  [CE]  no  suitable  method  found  for  write(String,CharSequence)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( "negative ",  input);  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write( "negative ",  input);	  out.write(   "negative   ");    	non-compiled	[CE]  no  suitable  method  found  for  write(String,CharSequence)	113	None	replace
356	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	91	None	add
357	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.  [CE]  unclosed  string  literal  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.	  	non-compiled	[CE]  unclosed  string  literal	91	None	add
358	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  nu  [CE]  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  nu  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  nu	  	non-compiled	[CE]  	91	None	add
359	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
360	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
361	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out!=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
362	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out!=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
363	[BUG]  [BUGGY]  out.write( "no  input  available ");  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( "no  input  available ");  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write( "no  input  available ");	  out.write(   "no    input   ");    	non-compiled	[CE]  cannot  find  symbol  pos	112	None	replace
364	[BUG]  [BUGGY]  if(out!=  null)  {  if(input!=  null)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out!=  null)  {  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out!=  null)  {  if(input!=  null)  {  out.write('n');  }	          if(input!=    null)    {    out.write('n');    }    if(input!=    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
365	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length();  Int  pos  =(input!=  null)?  0  :  input.length();  [CE]  cannot  find  symbol  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length();  Int  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =(input  ==  null)?  0  :  input.length();  Int  pos  =(input!=  null)?  0  :  input.length();	  int    pos    =(input!=    null)?    0    :    input.length();    Int    pos    =(input!=    null)?    0    :    input.length();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
366	[BUG]  [BUGGY]  int  pos  =  1;  int  pos  =  0;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  1;  int  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  1;  int  pos  =  0;	  int    pos    =    1;    int    pos    =    2;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	148	None	replace
367	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	89	None	add
368	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  Il  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	89	None	add
369	[BUG]  [BUGGY]  int  pos  =  output.size();  [CE]  cannot  find  symbol  output  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  output.size();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  output.size();	  int    pos    =    input.size();    	non-compiled	[CE]  cannot  find  symbol  output	128	None	replace
370	[BUG]  [BUGGY]  int  pos  =  this.input.size();  [CE]  cannot  find  symbol  input  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  this.input.size();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  this.input.size();	  int    pos    =    input.size();    	non-compiled	[CE]  cannot  find  symbol  input	128	None	replace
371	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	149	1	add
372	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	149	1	add
373	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  unclosed  string  literal  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".   ");  }	  	non-compiled	[CE]  unclosed  string  literal	149	None	add
374	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	149	1	add
375	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	149	1	add
376	[BUG]  [BUGGY]  String  input  =  output.getAstRoot(Character.codePointAt(input));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  input  =  output.getAstRoot(Character.codePointAt(input));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	String  input  =  output.getAstRoot(Character.codePointAt(input));	  String    input    =    input.getAstRoot(Character.codePointAt(input));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	19	None	replace
377	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	71	1	add
378	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	71	1	add
379	[BUG]  [BUGGY]  out.write('n',  input.length);  [CE]  cannot  find  symbol  length  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write('n',  input.length);  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write('n',  input.length);	  out.write('n');    	non-compiled	[CE]  cannot  find  symbol  length	78	None	replace
380	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	145	None	replace
381	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	87	1	add
382	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	87	1	add
383	[BUG]  [BUGGY]  out.append(input.length());  [CE]  no  suitable  method  found  for  append(int)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.append(input.length());  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.append(input.length());	  pos    +=    input.length();    	non-compiled	[CE]  no  suitable  method  found  for  append(int)	81	None	replace
384	[BUG]  [BUGGY]  int  pos  =  input.indexOf('.');  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.indexOf('.');  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.indexOf('.');	  int    pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
385	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('.')+  1;  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.lastIndexOf('.')+  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.lastIndexOf('.')+  1;	  int    pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
386	[BUG]  [BUGGY]  if(out  ==  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out  ==  null)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    If(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
387	[BUG]  [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }	  int    pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	67	None	replace
388	[BUG]  [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write(out);  return;  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write(out);  return;  }  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write(out);  return;  }	  int    pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	67	None	replace
389	[BUG]  [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write('n');  return;  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write('n');  return;  }  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write('n');  return;  }	  int    pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	67	None	replace
390	[BUG]  [BUGGY]  char[]  output  =  input.getChars();  [CE]  cannot  find  symbol  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  output  =  input.getChars();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  output  =  input.getChars();	  char[]    input    =    output.getChars();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
391	[BUG]  [BUGGY]  char[]  input  =  input.getOutputBuffer();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.getOutputBuffer();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  input.getOutputBuffer();	  char[]    input    =    input.getOutputChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	129	None	replace
392	[BUG]  [BUGGY]  Char[]  input  =  inputStream.getAstRoot(Character.codePointAt(pos,  input));  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  inputStream.getAstRoot(Character.codePointAt(pos,  input));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  inputStream.getAstRoot(Character.codePointAt(pos,  input));	  Char[]    input    =    input.getAstRoot(Character.codePointAt(pos,    input));    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
393	[BUG]  [BUGGY]  char  pos  =  input.charAt(out);  [CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(out);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char  pos  =  input.charAt(out);	  char    pos    =    input.charAt(pos);    	non-compiled	[CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;	60	None	replace
394	[BUG]  [BUGGY]  String  pos  =  0;  String  pos  =  0;  [CE]  incompatible  types  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  pos  =  0;  String  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	String  pos  =  0;  String  pos  =  0;	  char    pos    =    0;    Char    pos    =    0;    	non-compiled	[CE]  incompatible  types	55	None	replace
395	[BUG]  [BUGGY]  Character  pos  =  0;  Char  pos  =  0;  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Character  pos  =  0;  Char  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Character  pos  =  0;  Char  pos  =  0;	  char    pos    =    0;    Char    pos    =    0;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
396	[BUG]  [BUGGY]  int  pos  =  0;  Integer  pos  =  0;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  Integer  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  0;  Integer  pos  =  0;	  int    pos    =    1;    Integer    pos    =    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	22	None	replace
397	[BUG]  [BUGGY]  int  pos  =  0;  Integer  pos  =  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  Integer  pos  =  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  0;  Integer  pos  =  1;	  int    pos    =    1;    Integer    pos    =    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	22	None	replace
398	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	132	None	replace
399	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out,  input.readLine());  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out,  input.readLine());  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	OutputStream  input  =  new  BufferedOutputStream(out,  input.readLine());	  OutputStream    input    =    new    BufferedOutputStream(out.readLine());    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
400	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out,  output.readLine());  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out,  output.readLine());  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	OutputStream  input  =  new  BufferedOutputStream(out,  output.readLine());	  OutputStream    input    =    new    BufferedOutputStream(out.readLine());    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
401	[BUG]  [BUGGY]  char[]  input  =  input.getInputBuffer();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.getInputBuffer();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  input.getInputBuffer();	  char[]    input    =    input.getInputChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	141	None	replace
402	[BUG]  [BUGGY]  char[]  input  =  input.getInputStream();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.getInputStream();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  input.getInputStream();	  char[]    input    =    input.getInputChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	141	None	replace
403	[BUG]  [BUGGY]  char[]  input  =  input.getInputData();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.getInputData();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  input.getInputData();	  char[]    input    =    input.getInputChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	141	None	replace
404	[BUG]  [BUGGY]  CharSequence  input  =  input.getAstRoot(Character.codePointAt(pos,  out));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getAstRoot(Character.codePointAt(pos,  out));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.getAstRoot(Character.codePointAt(pos,  out));	  char[]    input    =    input.getAstRoot(Character.codePointAt(pos,    out));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	51	None	replace
405	[BUG]  [BUGGY]  int  pos  =  input.length()  +  1;  char  pos  =  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  1;  char  pos  =  input.length()  +  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =    input.length()    +    1;    char  pos  =  input.length()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	45	None	add
406	[BUG]  [BUGGY]  if(out.length()  ==  0)  {  out.write('n');  return;  }  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out.length()  ==  0)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out.length()  ==  0)  {  out.write('n');  return;  }	  if(input.length()    ==    0)    {    out.write('n');    return;    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
407	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	140	None	replace
408	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write( ",   ");  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null)  {  out.write( ",   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out  ==  null)  {  out.write( ",   ");  }	  if(input    ==    null)    {    out.write(   ",   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	138	None	replace
409	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	39	1	add
410	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	39	1	add
411	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	39	1	add
412	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	39	1	add
413	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  nu  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  nu  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  nu	  	non-compiled	[CE]  	5	None	add
414	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.  [CE]  unclosed  string  literal  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	5	None	add
415	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	5	None	add
416	[BUG]  [BUGGY]  char[]  input  =  input.toChars(input);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.toChars(input);  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  input.toChars(input);	  char[]    input    =    input.toChars(out);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	77	None	replace
417	[BUG]  [BUGGY]  char[]  input  =  out.toChars(input);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  out.toChars(input);  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char[]  input  =  out.toChars(input);	  char[]    input    =    input.toChars(out);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	77	None	replace
418	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write( "null ");  }  [CE]  cannot  find  symbol  pos  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null)  {  out.write( "null ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out  ==  null)  {  out.write( "null ");  }	  if(input    ==    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	65	None	replace
419	[BUG]  [BUGGY]  int  pos  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  incompatible  types  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  Character.toChars(Character.codePointAt(input,  pos));	  char    pos    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  incompatible  types	143	None	replace
420	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  Il  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	93	None	add
421	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  >=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	29	None	add
422	[BUG]  [BUGGY]  int  pos  =  input.length()  -  1;  char  pos  =  input.length()  -  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    IllegalStateException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  1;  char  pos  =  input.length()  -  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =    input.length()    -    1;    char  pos  =  input.length()  -  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	47	None	add
423	[BUG]  [BUGGY]  CharSequence  input  =  output.getChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  output.getChars();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  output.getChars();	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	61	None	replace
424	[BUG]  [BUGGY]  CharSequence  input  =  input.getChars(),  out);  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getChars(),  out);  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.getChars(),  out);	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  ';'  expected	61	None	replace
425	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	39	1	add
426	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	39	1	add
427	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	39	1	add
428	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	39	1	add
429	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  -1  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	int  pos  =(input  ==  null)?  -1  :  input.length();	  int    pos    =(input    ==    null)?    1    :    input.length();    	compilable	  [FE]  ComparisonFailure  	26	1	replace
430	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  -1  :  input.length();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  -1  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =(input  ==  null)?  -1  :  input.length();	  int    pos    =(input    ==    null)?    1    :    input.length();    	compilable	  [FE]  ComparisonFailure  	26	1	replace
431	[BUG]  [BUGGY]  Char[]  input  =  input.getChildren();  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  input.getChildren();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char[]  input  =  input.getChildren();	  Char[]    input    =    input.getChars();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
432	[BUG]  [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }	  if(input!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	12	None	replace
433	[BUG]  [BUGGY]  int  pos  =  input.length()  +  1;  int  pos  =  input.length()  +  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  1;  int  pos  =  input.length()  +  2;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =    input.length()    +    1;    int  pos  =  input.length()  +  2;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	45	None	add
434	[BUG]  [BUGGY]  Char  pos  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char  pos  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Char  pos  =  Character.toChars(Character.codePointAt(input,  pos));	  char    pos    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
435	[BUG]  [BUGGY]  Character  pos  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  incompatible  types  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Character  pos  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Character  pos  =  Character.toChars(Character.codePointAt(input,  pos));	  char    pos    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  incompatible  types	143	None	replace
436	[BUG]  [BUGGY]  Character  pos  =(input!=  null)?  0  :  input.length();  [CE]  incompatible  types  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Character  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Character  pos  =(input!=  null)?  0  :  input.length();	  char    pos    =(input!=    null)?    0    :    input.length();    	non-compiled	[CE]  incompatible  types	14	None	replace
437	[BUG]  [BUGGY]  char  pos  =  input.charAt(0,  input.length()  -  1);  [CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(0,  input.length()  -  1);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char  pos  =  input.charAt(0,  input.length()  -  1);	  char    pos    =    input.charAt(0);    	non-compiled	[CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;	59	None	replace
438	[BUG]  [BUGGY]  Int  pos  =  1;  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Int  pos  =  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Int  pos  =  1;	  int    pos    =    1;    Int    pos    =    1;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
439	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  <identifier>  expected	85	None	add
440	[BUG]  [BUGGY]  char  pos  =  1;  int  pos  =  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  1;  int  pos  =  2;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char  pos  =  1;  int  pos  =  2;	  int    pos    =    1;    int    pos    =    2;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	148	None	replace
441	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	int  pos  =  input.length()  +  input.length();	  int    pos    =    input.length()    +    out.length();    	compilable	  [FE]  ComparisonFailure  	124	1	replace
442	[BUG]  [BUGGY]  int  pos  =  input.length()  +  input.length();  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.length()  +  input.length();	  int    pos    =    input.length()    +    out.length();    	compilable	  [FE]  ComparisonFailure  	124	1	replace
443	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  int  pos  =(input  ==  null)?  2  :  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  int  pos  =(input  ==  null)?  2  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =(input    ==    null)?    1    :    input.length();    int  pos  =(input  ==  null)?  2  :  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	25	None	add
444	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(',');  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null)  {  out.write(',');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input  ==  null)  {  out.write(',');  }	  if(input    ==    null)    {    out.write(   ",   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	138	None	replace
445	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('n',  Integer.MAX_VALUE);  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.lastIndexOf('n',  Integer.MAX_VALUE);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  input.lastIndexOf('n',  Integer.MAX_VALUE);	  int    pos    =    input.lastIndexOf('n');    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
446	[BUG]  [BUGGY]  double  pos  =  input.length();  [CE]  no  suitable  method  found  for  translate(CharSequence,double,Writer)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  double  pos  =  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	double  pos  =  input.length();	  int    pos    =    input.length();    float    pos    =    input.length();    	non-compiled	[CE]  no  suitable  method  found  for  translate(CharSequence,double,Writer)	135	None	replace
447	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [CE]  cannot  find  symbol  pos  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    not    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	6	None	replace
448	[BUG]  [BUGGY]  int  pos  =(input  >=  null)?  0  :  input.length();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  >=  null)?  0  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =(input  >=  null)?  0  :  input.length();	  int    pos    =(input!=    null)?    0    :    input.length();    int    pos    =(input    >=    null)?    0    :    input.length();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	98	None	replace
449	[BUG]  [BUGGY]  if(out!=  null)  {  input.write('n');  }  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out!=  null)  {  input.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out!=  null)  {  input.write('n');  }	  if(out!=    null)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
450	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " "));  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	132	None	replace
451	[BUG]  [BUGGY]  Character  pos  =  0;  String  pos  =  0;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Character  pos  =  0;  String  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Character  pos  =  0;  String  pos  =  0;	  char    pos    =    0;    String    pos    =    0;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	57	None	replace
452	[BUG]  [BUGGY]  if(input!=  null)  {  input.write('n');  return;  }  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  input.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input!=  null)  {  input.write('n');  return;  }	  if(input!=    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
453	[BUG]  [BUGGY]  float  pos  =(input!=  null)?  1  :  input.length();  [CE]  no  suitable  method  found  for  translate(CharSequence,float,Writer)  [FE]    IllegalStateException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  float  pos  =(input!=  null)?  1  :  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	float  pos  =(input!=  null)?  1  :  input.length();	  int    pos    =(input!=    null)?    1    :    input.length();    	non-compiled	[CE]  no  suitable  method  found  for  translate(CharSequence,float,Writer)	16	None	replace
454	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  <identifier>  expected	87	None	add
455	[BUG]  [BUGGY]  if(input.length()  <  =  0)  {  out.write('n');  return;  }  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  <  =  0)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input.length()  <  =  0)  {  out.write('n');  return;  }	  if(input.length()    ==    0)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
456	[BUG]  [BUGGY]  CharSequence  input  =  input.getAstRoot(Character.codePointAt(pos,  pos));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getAstRoot(Character.codePointAt(pos,  pos));  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.getAstRoot(Character.codePointAt(pos,  pos));	  char[]    input    =    input.getAstRoot(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	50	None	replace
457	[BUG]  [BUGGY]  Character  pos  =  input.length();  [CE]  incompatible  types  [FE]        IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Character  pos  =  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Character  pos  =  input.length();	  char    pos    =    input.length();    	non-compiled	[CE]  incompatible  types	1	None	replace
458	[BUG]  [BUGGY]  int  pos  =  input.length()  -  1;  int  pos  =  input.length()  -  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    IllegalStateException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  1;  int  pos  =  input.length()  -  2;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int    pos    =    input.length()    -    1;    int  pos  =  input.length()  -  2;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	47	None	add
459	[BUG]  [BUGGY]  &&  input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  &&  input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	&&  input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	  ||    input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
460	[BUG]  [BUGGY]  out.write( "no-string ");  [CE]  cannot  find  symbol  pos  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( "no-string ");  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write( "no-string ");	          if(input    ==    null)    {    out.write(       "n       ");    }    if(input    ==    null)    {    out.write(   ".n       ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	147	None	replace
461	[BUG]  [BUGGY]  CharSequence  input  =  input.getAstRoot(Character.codePointAt(input),  out);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getAstRoot(Character.codePointAt(input),  out);  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.getAstRoot(Character.codePointAt(input),  out);	  CharSequence    input    =    input.getAstRoot(Character.codePointAt(input));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	122	None	replace
462	[BUG]  [BUGGY]  CharSequence  input  =  input.toString();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.toString();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.toString();	  char[]    input    =    input.toString();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	111	None	replace
463	[BUG]  [BUGGY]  if(out!=  null)  {  input.write('n');  return;  }  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out!=  null)  {  input.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out!=  null)  {  input.write('n');  return;  }	  if(out!=    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
464	[BUG]  [BUGGY]  char  pos  =  input.charAt(input.position);  [CE]  cannot  find  symbol  position  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(input.position);  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char  pos  =  input.charAt(input.position);	  char    pos    =    input.charAt(pos);    	non-compiled	[CE]  cannot  find  symbol  position	60	None	replace
465	[BUG]  [BUGGY]  if(input  ==  null)  {  input.write( "null ");  }  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null)  {  input.write( "null ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input  ==  null)  {  input.write( "null ");  }	  if(input    ==    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
466	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	89	1	add
467	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	89	1	add
468	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [CE]  cannot  find  symbol  pos  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	92	None	replace
469	[BUG]  [BUGGY]  OutputStream  input  =  this.outputStream.getOutputStream();  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  this.outputStream.getOutputStream();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	OutputStream  input  =  this.outputStream.getOutputStream();	  OutputStream    input    =    output.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
470	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  >=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	27	None	add
471	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input  ==  null  ||  input.length()  <  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	140	None	replace
472	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	  	compilable	  [FE]  IllegalArgumentException  	93	1	add
473	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	  	compilable	  [FE]  IllegalArgumentException  	93	1	add
474	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	char  pos  =  1;	  int    pos    =    1;    int    pos    =    1;    	compilable	  [FE]  IllegalStateException  	20	1	replace
475	[BUG]  [BUGGY]  char  pos  =  1;  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  1;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	char  pos  =  1;	  int    pos    =    1;    int    pos    =    1;    	compilable	  [FE]  IllegalStateException  	20	1	replace
476	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
477	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
478	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  continue;  }  [CE]  continue  outside  of  loop  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  continue;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  continue;  }	  	non-compiled	[CE]  continue  outside  of  loop	41	None	add
479	[BUG]  [BUGGY]  out.write(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  pos  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Character.codePointAt(input,  pos));  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	out.write(Character.codePointAt(input,  pos));	  out.write(c);    	non-compiled	[CE]  cannot  find  symbol  pos	82	None	replace
480	[BUG]  [BUGGY]  CharSequence  input  =  input.toChars(pos);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.toChars(pos);  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.toChars(pos);	  char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	76	None	replace
481	[BUG]  [BUGGY]  String  pos  =  0;  int  pos  =  0;  [CE]  incompatible  types  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  pos  =  0;  int  pos  =  0;  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	String  pos  =  0;  int  pos  =  0;	  char    pos    =    0;    int    pos    =    0;    	non-compiled	[CE]  incompatible  types	56	None	replace
482	[BUG]  [BUGGY]  int  pos  =  2  <  <  input.length();  [CE]  >  expected  [FE]        IllegalStateException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  2  <  <  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	int  pos  =  2  <  <  input.length();	  int    pos    =    1    <    <    input.length();    	non-compiled	[CE]  >  expected	119	None	replace
483	[BUG]  [BUGGY]  Integer  pos  +=  input.length();  [CE]  ';'  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  +=  input.length();  [BUGGY]      int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	Integer  pos  +=  input.length();	  pos    +=    input.length();    	non-compiled	[CE]  ';'  expected	81	None	replace
484	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }  [CE]  cannot  find  symbol  pos  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  cannot  find  symbol  pos	42	None	replace
485	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	non-compiled	[CE]  <identifier>  expected	149	None	add
486	[BUG]  [BUGGY]  CharSequence  input  =  input.getInput();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getInput();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.getInput();	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	61	None	replace
487	[BUG]  [BUGGY]  CharSequence  input  =  input.getAssignedChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getAssignedChars();  [BUGGY]      int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	82	82	1	replace	CharSequence  input  =  input.getAssignedChars();	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	61	None	replace
