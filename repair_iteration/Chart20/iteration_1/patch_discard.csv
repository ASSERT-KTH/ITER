compilation error,96,add,[CE] alpha has private access in Marker, ,this.alpha = alpha - 1;
compilation error,96,add,[CE] alpha has private access in Marker, ,this.alpha = 0.5;
compilation error,95,replace,[CE] no suitable constructor found for Marker(Stroke,Paint,Paint,Stroke,float),   ,super(stroke, paint, outlinePaint, outlineStroke, alpha);
compilation error,107,add,[CE] cannot find symbol POSITIVE_VALUE, ,double value = Double.POSITIVE_VALUE;
increase failing tests,107,add, [FE] StackOverflowError, ,double value = getValue();
compilation error,107,add,[CE] cannot find symbol, ,double value = ValueUtils.doubleValue(getChronology().values());
compilation error,95,add,[CE] call to super must be first statement in constructor, ,super(paint, stroke, outlinePaint, outlineStroke, alpha); this.value = value;
compilation error,96,add,[CE] bad operand types for binary operator '*', ,this.value = value / 2.0 * outlinePaint;
increase failing tests,107,replace, [FE] StackOverflowError, return  value;  ,return value * getValue();
compilation error,96,add,[CE] alpha has private access in Marker, ,this.alpha = alpha / 2.0;
compilation error,96,add,[CE] alpha has private access in Marker, ,this.alpha = 1.0 -(this.value > value);
patch is same with buggy,96,replace,, this.value  =  value  -  1;  ,this.value = value - 1;
compilation error,95,replace,[CE] no suitable constructor found for Marker(Paint,Stroke,Stroke,float),   ,super(paint, stroke, outlineStroke, alpha);
compilation error,95,add,[CE] no suitable constructor found for ValueMarker(Paint,Stroke,Stroke,float,<null>), ,this(paint, stroke, outlineStroke, alpha, null);
compilation error,96,add,[CE] cannot find symbol, ,this.value = outlineStroke.get(outlinePaint);
compilation error,96,add,[CE] cannot find symbol, ,this.value = outlineStroke.get(outlinePaint)/ 2.0;
compilation error,96,add,[CE] cannot find symbol, ,this.value = outlineStroke.get(stroke);
compilation error,107,add,[CE] illegal start of expression, ,if(value!= 0.0) { value = getValue(); if(value!= 0.0) { return value; }
compilation error,107,add,[CE] illegal start of expression, ,if(value!= 0.0) { value = getValue(); if(value == 0.0) { return value; }
compilation error,96,add,[CE] cannot find symbol, ,if(outlineStroke!= null) { this.value = outlineStroke.get(stroke); } else { this.value = value; }
compilation error,96,add,[CE] cannot find symbol, ,if(outlinePaint!= null) { this.value = outlinePaint.getChars(0, outlineStroke, stroke, alpha); } else { this.value = value; }
compilation error,96,add,[CE] cannot find symbol, ,if(outlinePaint!= null) { this.value = outlinePaint.getChars(0, outlineStroke, stroke); } else { this.value = value; }
compilation error,95,add,[CE] no suitable constructor found for Marker(Stroke,Stroke,Paint,float), ,super(stroke, stroke, outlinePaint, alpha); this.value = value;
compilation error,95,add,[CE] no suitable constructor found for Marker(Stroke,Stroke,Paint,float), ,super(stroke, stroke, outlinePaint, alpha); this.value = paint;
increase failing tests,107,add, [FE] AssertionFailedError, ,if(value < 0.0) { value = Double.NaN; } else { value = Double.NaN; }
compilation error,107,add,[CE] cannot find symbol ValueUtils, ,if(value < 0.0) { value = Double.NaN; } else { ValueUtils.setValue(value); }
compilation error,107,add,[CE] cannot find symbol, ,if(value < 0.0) { value = Double.NaN; } else { ValueUtils.setValue(value, getField()); }
compilation error,96,add,[CE] inconvertible types, ,this.value =(float)(( ValueMarker)value).doubleValue();
compilation error,96,add,[CE] incompatible types, ,if(this.value!= 0.0) { this.value = new Double(value); } else { this.value = new Double(value, stroke, outlinePaint, outlineStroke, alpha); }
compilation error,96,add,[CE] no suitable constructor found for ValueMarker(double,Stroke,Paint,Stroke,float), ,if(this.value!= 0.0) { this.value = new ValueMarker(1.0, stroke, outlinePaint, outlineStroke, alpha); } else { this.value = new Double(value); }
compilation error,96,add,[CE] incompatible types, ,if(this.value!= 0.0) { this.value = new Double(value); } else { this.value = new Double(stroke, outlinePaint, outlineStroke, alpha); }
patch is same with buggy,96,replace,, this.value  =  value  -  1;  , 
