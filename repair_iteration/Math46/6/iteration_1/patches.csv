bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite())  {  if(!divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite())  {  if(!divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isInfinite())  {  if(!divisor.isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(!divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
2	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(!divisor.isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(!divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
3	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(!divisor.isNaN())  {  return  NaN;  }	      if(divisor!=    null)    {    if(!divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
4	[BUG]  [BUGGY]  Real.checkNotNull(imaginary);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  Real.checkNotNull(imaginary);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real.checkNotNull(imaginary);	      Real.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	15	None	replace
5	[BUG]  [BUGGY]  Real.checkNotNull(real);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  Real.checkNotNull(real);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real.checkNotNull(real);	      Real.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	15	None	replace
6	[BUG]  [BUGGY]  Real.checkArgument(divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  Real.checkArgument(divisor.isNaN());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real.checkArgument(divisor.isNaN());	      Real.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	15	None	replace
7	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  ||  divisor.isInfinite());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isInfinite()  ||  divisor.isInfinite());	      MathUtils.checkArgument(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	10	None	replace
8	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  &&  divisor.isInfinite());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isInfinite()  &&  divisor.isInfinite());	      MathUtils.checkArgument(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	10	None	replace
9	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN())  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN())  {	  if(divisor    ==    null    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
10	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN())  {	  if(divisor    ==    null    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
11	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
12	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
13	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
14	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
15	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null  ||  divisor.isNaN)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
16	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
17	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    imaginary    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
18	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  imaginary!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  imaginary!=  null)  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  imaginary!=  null)  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    imaginary    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
19	[BUG]  [BUGGY]  if(divisor!=  null  ||  imaginary  ==  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null  ||  imaginary  ==  null)  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  imaginary  ==  null)  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    imaginary    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
20	[BUG]  [BUGGY]  if  (isInfinite  &&  divisor.isNaN)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if  (isInfinite  &&  divisor.isNaN)  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isInfinite  &&  divisor.isNaN)  {	  if    (isInfinite    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
21	[BUG]  [BUGGY]  if  (isNaN  ||  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if  (isNaN  ||  divisor.isInfinite())  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  ||  divisor.isInfinite())  {	  if    (isInfinite    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
22	[BUG]  [BUGGY]  if(divisor.isNaN  ||  isInfinite)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor.isNaN  ||  isInfinite)  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN  ||  isInfinite)  {	  if    (isInfinite    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
23	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
24	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
25	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  divisor.isNaN)  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN  ||  divisor.isNaN)  {	  if    (isNaN    ||    divisor.isNaN    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
26	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  divisor.isNaN)  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN  ||  divisor.isNaN)  {	  if    (isNaN    ||    divisor.isNaN    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
27	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isInfinite()  ||  divisor.isInfinite());	      MathUtils.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	7	None	replace
28	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  isNaN);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  isNaN);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isInfinite()  &&  isNaN);	      MathUtils.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	7	None	replace
29	[BUG]  [BUGGY]  if  (isNaN  ||  divisor.isNaN  ||  real)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if  (isNaN  ||  divisor.isNaN  ||  real)  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  ||  divisor.isNaN  ||  real)  {	  if    (isNaN    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
30	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  imaginary)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  imaginary)  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN  ||  imaginary)  {	  if    (isNaN    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
31	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }	      if(divisor!=    null)    {    if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
32	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(isInfinite  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null)  {  if(isInfinite  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(isInfinite  ||  divisor.isNaN)  {  return  NaN;  }	      if(divisor!=    null)    {    if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
33	[BUG]  [BUGGY]  if(divisor.isNaN  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor.isNaN  ||  divisor.isNaN)  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN  ||  divisor.isNaN)  {	  if    (isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
34	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN)  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  divisor.isNaN)  {	  if    (isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
35	[BUG]  [BUGGY]  MathUtils.checkNotNull(real);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  MathUtils.checkNotNull(real);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkNotNull(real);	      MathUtils.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	6	None	replace
36	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isNaN());	      MathUtils.checkArgument(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	9	None	replace
37	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isNaN());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isNaN());	      MathUtils.checkArgument(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	9	None	replace
38	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor.isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }	      if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
39	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN)  {  return  NaN;  }	      if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
40	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isNaN()  ||  divisor.isNaN());	      MathUtils.checkState(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	8	None	replace
41	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isNaN(),  divisor.isNaN());	      MathUtils.checkState(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	8	None	replace
42	[BUG]  [BUGGY]  Real.checkArgument(divisor!=  null);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  Real.checkArgument(divisor!=  null);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real.checkArgument(divisor!=  null);	      Real.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	15	None	replace
43	[BUG]  [BUGGY]  if  (isNaN  ||  divisor.isInfinite)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if  (isNaN  ||  divisor.isInfinite)  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  ||  divisor.isInfinite)  {	  if    (isInfinite    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
44	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  imaginary  ==  null)  {  divisor  =  new  Complex(real);  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor.isNaN()  ||  imaginary  ==  null)  {  divisor  =  new  Complex(real);  }  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  imaginary  ==  null)  {  divisor  =  new  Complex(real);  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
45	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  imaginary  ==  null)  {  divisor  =  Complex.NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor.isNaN()  ||  imaginary  ==  null)  {  divisor  =  Complex.NaN;  }  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  imaginary  ==  null)  {  divisor  =  Complex.NaN;  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
46	[BUG]  [BUGGY]  if(divisor!=  null  ||  isNaN  &&  divisor.isNaN)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null  ||  isNaN  &&  divisor.isNaN)  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  isNaN  &&  divisor.isNaN)  {	  if    (isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
47	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(isNaN  ||  divisor.isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
48	[BUG]  [BUGGY]  Iterator  <  Complex>  it  =  divisors.iterator();  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  Iterator  <  Complex>  it  =  divisors.iterator();  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Iterator  <  Complex>  it  =  divisors.iterator();	      if(divisor!=    null)    {    if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
49	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isLocal())  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isLocal())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isLocal())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
50	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  &&!isInfinite());  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  &&!isInfinite());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isInfinite()  &&!isInfinite());	      MathUtils.checkArgument(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	10	None	replace
51	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isInfinite()  ||!divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null)  {  if(!divisor.isInfinite()  ||!divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(!divisor.isInfinite()  ||!divisor.isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(!divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
52	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null  &&  divisor.isNaN)  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  &&  divisor.isNaN)  {	  if(divisor!=    null    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
53	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor.isInfinite());  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  MathUtils.checkDigits(divisor.isInfinite());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkDigits(divisor.isInfinite());	      MathUtils.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	7	None	replace
54	[BUG]  [BUGGY]  MathUtils.checkState(divisor!=  null);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  MathUtils.checkState(divisor!=  null);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor!=  null);	      MathUtils.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	6	None	replace
55	[BUG]  [BUGGY]  if  (isNaN  ||  imaginary  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if  (isNaN  ||  imaginary  ||  divisor.isNaN)  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  ||  imaginary  ||  divisor.isNaN)  {	  if    (isNaN    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
56	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  imaginary)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  imaginary)  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN  ||  imaginary)  {	  if    (isNaN    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
57	[BUG]  [BUGGY]  if(real  ==  null)  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(real  ==  null)  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(real  ==  null)  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    imaginary    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
58	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  MathUtils.checkDigits(divisor.isNaN());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkDigits(divisor.isNaN());	      MathUtils.checkState(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	8	None	replace
59	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getDivisors().iterator();  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getDivisors().iterator();  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Iterator  <  Complex>  divisor  =  divisor.getDivisors().iterator();	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
60	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  Divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  Divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  Divisor.isNaN)  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
61	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN());	      MathUtils.checkArgument(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	9	None	replace
62	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null)  {  if(!divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(!divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(!divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
63	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isNaN  ||  imaginary)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(isInfinite  ||  divisor.isNaN  ||  imaginary)  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(isInfinite  ||  divisor.isNaN  ||  imaginary)  {	  if    (isInfinite    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
64	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(isInfinite  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(isInfinite  ||  divisor.isInfinite())  {  return  NaN;  }	      if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
65	[BUG]  [BUGGY]  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
66	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
67	[BUG]  [BUGGY]  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
68	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  divisor.isNaN())  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN  ||  divisor.isNaN())  {	  if(divisor    ==    null    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
69	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  real  ==  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  real  ==  null)  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  real  ==  null)  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    imaginary    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
70	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
71	[BUG]  [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);    [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN)  {  [BUGGY]    return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  Divisor.isNaN)  {	  if(divisor!=    null    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
