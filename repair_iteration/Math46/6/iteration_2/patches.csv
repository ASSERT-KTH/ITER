bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isNaN  ||  real)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isInfinite  ||  divisor.isNaN  ||  real)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(isInfinite  ||  divisor.isNaN  ||  real)  {	  if(isInfinite    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	63	None	replace
2	[BUG]  [BUGGY]  if(divisor  ==  null  ||  isInfinite  &&  divisor.isNaN)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  isInfinite  &&  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  isInfinite  &&  divisor.isNaN)  {	  if(divisor!=    null    ||    isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
3	[BUG]  [BUGGY]  if(divisor  ==  null  ||  isNaN  &&  divisor.isNaN)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  isNaN  &&  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  isNaN  &&  divisor.isNaN)  {	  if(divisor!=    null    ||    isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
4	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getINFDivisors().iterator();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getINFDivisors().iterator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Iterator  <  Complex>  divisor  =  divisor.getINFDivisors().iterator();	  Iterator    <    Complex>    divisor    =    divisor.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	59	None	replace
5	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getDenominators().iterator();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getDenominators().iterator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Iterator  <  Complex>  divisor  =  divisor.getDenominators().iterator();	  Iterator    <    Complex>    divisor    =    divisor.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	59	None	replace
6	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getINFs().iterator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getINFs().iterator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Iterator  <  Complex>  divisor  =  divisor.getINFs().iterator();	  Iterator    <    Complex>    divisor    =    divisor.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	59	None	replace
7	[BUG]  [BUGGY]  MathUtils.checkNotNull(imaginary);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkNotNull(imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkNotNull(imaginary);	  MathUtils.checkNotNull(real);    	non-compiled	[CE]  ';'  expected	35	None	replace
8	[BUG]  [BUGGY]  MathUtils.checkState(real!=  null);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(real!=  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(real!=  null);	  MathUtils.checkNotNull(real);    	non-compiled	[CE]  ';'  expected	35	None	replace
9	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  ||!isInfinite());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  ||!isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isInfinite()  ||!isInfinite());	  MathUtils.checkArgument(divisor.isInfinite()    &&!isInfinite());    	non-compiled	[CE]  ';'  expected	50	None	replace
10	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  &&!isInfinite());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  &&!isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isNaN()  &&!isInfinite());	  MathUtils.checkArgument(divisor.isInfinite()    &&!isInfinite());    	non-compiled	[CE]  ';'  expected	50	None	replace
11	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isInfinite());	  MathUtils.checkArgument(divisor.isInfinite()    &&!isInfinite());    	non-compiled	[CE]  ';'  expected	50	None	replace
12	[BUG]  [BUGGY]  if(divisor  ==  null  ||  imaginary  ==  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  imaginary  ==  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  imaginary  ==  null)  {  return  NaN;  }	  if(divisor!=    null    ||    imaginary    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
13	[BUG]  [BUGGY]  if(divisor  ==  null  ||  imaginary!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  imaginary!=  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  imaginary!=  null)  {  return  NaN;  }	  if(divisor!=    null    ||    imaginary    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
14	[BUG]  [BUGGY]  if(real  ==  null  ||  imaginary  ==  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(real  ==  null  ||  imaginary  ==  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(real  ==  null  ||  imaginary  ==  null)  {  return  NaN;  }	  if(divisor!=    null    ||    imaginary    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
15	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(isInfinite  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(isInfinite  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(isInfinite  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null)    {    if(isInfinite    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
16	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN)  {  if(isInfinite  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN)  {  if(isInfinite  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN)  {  if(isInfinite  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null)    {    if(isInfinite    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
17	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(isInfinite  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(isInfinite  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN())  {  if(isInfinite  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null)    {    if(isInfinite    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
18	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isNaN)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
19	[BUG]  [BUGGY]  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    imaginary    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
20	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN  ||  divisor.isNaN())  {	  if(divisor!=    null    ||    divisor.isNaN    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
21	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isInfinite(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.isInfinite(),  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isInfinite(),  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	61	None	replace
22	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	61	None	replace
23	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNull(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.isNull(),  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isNull(),  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	61	None	replace
24	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	39	None	replace
25	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	39	None	replace
26	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  &&  divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	39	None	replace
27	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isInfinite()  ||  divisor.isNaN)  {	  if(divisor.isNaN    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
28	[BUG]  [BUGGY]  if(divisor.isNaN  ||  divisor.isNaN  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN  ||  divisor.isNaN  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN  ||  divisor.isNaN  ||  divisor.isNaN)  {	  if(divisor.isNaN    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
29	[BUG]  [BUGGY]  divisor  =  Complex.NaN;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  divisor  =  Complex.NaN;  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	divisor  =  Complex.NaN;	  if(divisor.isNaN()    ||    imaginary    ==    null)    {    divisor    =    Complex.NaN;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
30	[BUG]  [BUGGY]  Divisor  <  NaN>  divisor  =  Complex.NaN;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Divisor  <  NaN>  divisor  =  Complex.NaN;  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Divisor  <  NaN>  divisor  =  Complex.NaN;	  if(divisor.isNaN()    ||    imaginary    ==    null)    {    divisor    =    Complex.NaN;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
31	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  imaginary!=  null)  {  divisor  =  Complex.NaN;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  imaginary!=  null)  {  divisor  =  Complex.NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  imaginary!=  null)  {  divisor  =  Complex.NaN;  }	  if(divisor.isNaN()    ||    imaginary    ==    null)    {    divisor    =    Complex.NaN;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
32	[BUG]  [BUGGY]  Real.checkState(divisor.isInfinite());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real.checkState(divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real.checkState(divisor.isInfinite());	  Real.checkNotNull(imaginary);    	non-compiled	[CE]  ';'  expected	4	None	replace
33	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  real  ==  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  real  ==  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  real  ==  null)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    real    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
34	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isInfinite())  {	  if(divisor    ==    null    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
35	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isInfinite())  {	  if(divisor    ==    null    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
36	[BUG]  [BUGGY]  Iterator  <  Complex>  it  =  this.divisors.iterator();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Iterator  <  Complex>  it  =  this.divisors.iterator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Iterator  <  Complex>  it  =  this.divisors.iterator();	  Iterator    <    Complex>    it    =    divisors.iterator();    	non-compiled	[CE]  ';'  expected	48	None	replace
37	[BUG]  [BUGGY]  Iterator  <  Complex>  it  =  divisors.values().iterator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Iterator  <  Complex>  it  =  divisors.values().iterator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Iterator  <  Complex>  it  =  divisors.values().iterator();	  Iterator    <    Complex>    it    =    divisors.iterator();    	non-compiled	[CE]  ';'  expected	48	None	replace
38	[BUG]  [BUGGY]  Ilerator  <  Complex>  it  =  divisors.iterator();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Ilerator  <  Complex>  it  =  divisors.iterator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Ilerator  <  Complex>  it  =  divisors.iterator();	  Iterator    <    Complex>    it    =    divisors.iterator();    	non-compiled	[CE]  ';'  expected	48	None	replace
39	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isInfinite());	  MathUtils.checkArgument(divisor.isInfinite()    &&    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	8	None	replace
40	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  &&  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isInfinite()  &&  divisor.isNaN());	  MathUtils.checkArgument(divisor.isInfinite()    &&    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	8	None	replace
41	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  Divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  Divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  Divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    Divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
42	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN)  {  if(divisor.isNaN  ||  Divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN)  {  if(divisor.isNaN  ||  Divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN)  {  if(divisor.isNaN  ||  Divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    Divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
43	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
44	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
45	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN())  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  &&  divisor.isNaN())  {	  if(divisor!=    null    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	10	None	replace
46	[BUG]  [BUGGY]  if(divisor  ==  null  &&  divisor.isNaN())  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  &&  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  &&  divisor.isNaN())  {	  if(divisor!=    null    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	10	None	replace
47	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  real)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  real)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN  ||  real)  {	  if(divisor!=    null    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
48	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  real)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  real)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN  ||  real)  {	  if(divisor!=    null    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
49	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isInfinite()  &&  divisor.isInfinite());	  MathUtils.checkState(divisor.isInfinite()    ||    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	27	None	replace
50	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isInfinite()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isInfinite()    ||    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	27	None	replace
51	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isNaN()  ||  divisor.isInfinite());	  MathUtils.checkState(divisor.isInfinite()    ||    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	27	None	replace
52	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isInfinite())  {  return  NaN;  }	  if(isInfinite    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	64	None	replace
53	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigits(divisor.isNaN(),  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkDigits(divisor.isNaN(),  divisor.isNaN());	  MathUtils.checkDigits(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	58	None	replace
54	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigits(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkDigits(divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkDigits(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	58	None	replace
55	[BUG]  [BUGGY]  divisor  =  new  Complex(real);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  divisor  =  new  Complex(real);  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	divisor  =  new  Complex(real);	  if(divisor.isNaN()    ||    imaginary    ==    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
56	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  imaginary!=  null)  {  divisor  =  new  Complex(real);  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  imaginary!=  null)  {  divisor  =  new  Complex(real);  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  imaginary!=  null)  {  divisor  =  new  Complex(real);  }	  if(divisor.isNaN()    ||    imaginary    ==    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
57	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  real  ==  null)  {  divisor  =  new  Complex(real);  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  real  ==  null)  {  divisor  =  new  Complex(real);  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  real  ==  null)  {  divisor  =  new  Complex(real);  }	  if(divisor.isNaN()    ||    imaginary    ==    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
58	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isInfinite()  ||  divisor.isNaN());	  MathUtils.checkArgument(divisor.isInfinite()    ||    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	7	None	replace
59	[BUG]  [BUGGY]  MathUtils.checkState(divisor  ==  null);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor  ==  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor  ==  null);	  MathUtils.checkState(divisor!=    null);    	non-compiled	[CE]  ';'  expected	54	None	replace
60	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor!=  null);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigits(divisor!=  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkDigits(divisor!=  null);	  MathUtils.checkState(divisor!=    null);    	non-compiled	[CE]  ';'  expected	54	None	replace
61	[BUG]  [BUGGY]  if(divisor.isNaN())  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN())  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN())  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
62	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
63	[BUG]  [BUGGY]  MathUtils.checkInfinite(divisor.isInfinite());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkInfinite(divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkInfinite(divisor.isInfinite());	  MathUtils.checkDigits(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	53	None	replace
64	[BUG]  [BUGGY]  Real.checkArgument(divisor  ==  null);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real.checkArgument(divisor  ==  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real.checkArgument(divisor  ==  null);	  Real.checkArgument(divisor!=    null);    	non-compiled	[CE]  ';'  expected	42	None	replace
65	[BUG]  [BUGGY]  Real.checkState(divisor!=  null);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real.checkState(divisor!=  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real.checkState(divisor!=  null);	  Real.checkArgument(divisor!=    null);    	non-compiled	[CE]  ';'  expected	42	None	replace
66	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(!divisor.isNaN())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(!divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
67	[BUG]  [BUGGY]  if  (isNaN  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  ||  divisor.isNaN())  {	  if    (isNaN    ||    divisor.isInfinite)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
68	[BUG]  [BUGGY]  if  (isNaN  &&  divisor.isInfinite)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  &&  divisor.isInfinite)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  &&  divisor.isInfinite)  {	  if    (isNaN    ||    divisor.isInfinite)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
69	[BUG]  [BUGGY]  if  (isInfinite  ||  divisor.isInfinite)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isInfinite  ||  divisor.isInfinite)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isInfinite  ||  divisor.isInfinite)  {	  if    (isNaN    ||    divisor.isInfinite)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
70	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
71	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
72	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor!=  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor!=  null)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
73	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(isNaN    ||    imaginary)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
74	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isInfinite()  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isInfinite()  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(isNaN    ||    imaginary)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
75	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Context.checkState(divisor.isInfinite()  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(isNaN    ||    imaginary)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
76	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {	  if(divisor.isNaN()    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
77	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isInfinite()  ||  divisor.isNaN())  {	  if(divisor.isNaN()    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
78	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  divisor.isInfinite())  {	  if(divisor.isNaN()    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
79	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN()  ||  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN()  ||  divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  divisor.isNaN()  ||  divisor.isInfinite())  {	  if(divisor.isNaN()    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
80	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isNaN())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
81	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isNaN())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
82	[BUG]  [BUGGY]  if  (isNaN  &&  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  &&  divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  &&  divisor.isInfinite())  {	  if    (isInfinite    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	20	None	replace
83	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  isInfinite  &&  divisor.isNaN)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  isInfinite  &&  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  isInfinite  &&  divisor.isNaN)  {	  if    (isInfinite    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	20	None	replace
84	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(isNaN  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
85	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(isInfinite  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(isInfinite  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(isInfinite  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
86	[BUG]  [BUGGY]  if(divisor  ==  null  &&  divisor.isNaN)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  &&  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  &&  divisor.isNaN)  {	  if(divisor!=    null    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
87	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
88	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  imaginary!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  imaginary!=  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  imaginary!=  null)  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    imaginary!=    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
89	[BUG]  [BUGGY]  if(divisor.isNaN  ||  imaginary!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN  ||  imaginary!=  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN  ||  imaginary!=  null)  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    imaginary!=    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
90	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }	  if(isNaN    ||    imaginary)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NONE;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
91	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isInfinite()  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isInfinite()  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }	  if(isNaN    ||    imaginary)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NONE;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
92	[BUG]  [BUGGY]  if(isNaN  ||  real)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isNaN  ||  real)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(isNaN  ||  real)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }	  if(isNaN    ||    imaginary)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NONE;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
93	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  isInfinite)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  isInfinite)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN  ||  isInfinite)  {	  if(divisor.isNaN    ||    isInfinite)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
94	[BUG]  [BUGGY]  if(divisor.isNaN  ||  isNaN)  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN  ||  isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN  ||  isNaN)  {	  if(divisor.isNaN    ||    isInfinite)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
95	[BUG]  [BUGGY]  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
96	[BUG]  [BUGGY]  if(divisor  ==  null  ||  imaginary  ||  divisor.isNaN)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  imaginary  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  imaginary  ||  divisor.isNaN)  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  not  a  statement	56	None	replace
97	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
98	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(!divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
99	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  divisor.isNaN());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isInfinite(),  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  not  a  statement	41	None	replace
100	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  not  a  statement	41	None	replace
101	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNull(),  divisor.isNaN());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isNull(),  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isNull(),  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  not  a  statement	41	None	replace
102	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {	  if    (isNaN    ||    divisor.isInfinite())    {    	non-compiled	[CE]  not  a  statement	21	None	replace
103	[BUG]  [BUGGY]  if  (divisor!=  null  ||  divisor.isInfinite())  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (divisor!=  null  ||  divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (divisor!=  null  ||  divisor.isInfinite())  {	  if    (isNaN    ||    divisor.isInfinite())    {    	non-compiled	[CE]  not  a  statement	21	None	replace
104	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
105	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
106	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isNaN())  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isNaN())  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    divisor.isNaN())    {    	non-compiled	[CE]  not  a  statement	68	None	replace
107	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN()  ||  divisor.isNaN())  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN()  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN()  ||  divisor.isNaN())  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    divisor.isNaN())    {    	non-compiled	[CE]  not  a  statement	68	None	replace
108	[BUG]  [BUGGY]  if(divisor!=  null  ||  Divisor.isNaN)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  Divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  Divisor.isNaN)  {	  if(divisor    ==    null    ||    Divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	71	None	replace
109	[BUG]  [BUGGY]  if(divisor  ==  null  ||  Divisor.isInfinite())  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  Divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  Divisor.isInfinite())  {	  if(divisor    ==    null    ||    Divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	71	None	replace
110	[BUG]  [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN(real))  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN(real))  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  Divisor.isNaN(real))  {	  if(divisor    ==    null    ||    Divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	71	None	replace
111	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isInfinite()  &&!divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isInfinite()  &&!divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(!divisor.isInfinite()  &&!divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||!divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
112	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  ||!divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  ||!divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(!divisor.isNaN()  ||!divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||!divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
113	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  &&!divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  &&!divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(!divisor.isInfinite()  &&!divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||!divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
114	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isLocal())  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isLocal())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isLocal())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isLocal())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
115	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isLocal())  {  if(divisor.isNaN  ||  divisor.isLocal())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isLocal())  {  if(divisor.isNaN  ||  divisor.isLocal())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isLocal())  {  if(divisor.isNaN  ||  divisor.isLocal())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isLocal())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
116	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isLocal())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isLocal())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isLocal())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isLocal())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
117	[BUG]  [BUGGY]  Real.checkArgument(divisor.isNaN()  ||  divisor.isNaN());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real.checkArgument(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real.checkArgument(divisor.isNaN()  ||  divisor.isNaN());	  Real.checkArgument(divisor.isNaN());    	non-compiled	[CE]  not  a  statement	6	None	replace
118	[BUG]  [BUGGY]  Real.checkArgument(divisor.isInfinite());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real.checkArgument(divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real.checkArgument(divisor.isInfinite());	  Real.checkArgument(divisor.isNaN());    	non-compiled	[CE]  not  a  statement	6	None	replace
119	[BUG]  [BUGGY]  Real.checkArgument(divisor.isNaN()  &&  divisor.isNaN());  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real.checkArgument(divisor.isNaN()  &&  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real.checkArgument(divisor.isNaN()  &&  divisor.isNaN());	  Real.checkArgument(divisor.isNaN());    	non-compiled	[CE]  not  a  statement	6	None	replace
120	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  +  divisor.isNaN());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  +  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isNaN()  +  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  not  a  statement	36	None	replace
121	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN()  &&  divisor.isNaN());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isNaN()  &&  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isNaN()  &&  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  not  a  statement	40	None	replace
122	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite())  {  if(!divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite())  {  if(!divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  &&  divisor.isInfinite())  {  if(!divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isInfinite())    {    if(!divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	1	None	replace
123	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(!divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(!divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN())  {  if(!divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isInfinite())    {    if(!divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	1	None	replace
124	[BUG]  [BUGGY]  if  (isNaN  ||  real  ||  divisor.isNaN)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  real  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  ||  real  ||  divisor.isNaN)  {	  if    (isNaN    ||    imaginary    ||    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
125	[BUG]  [BUGGY]  if  (isNaN  ||  divisor.isNaN  ||  imaginary  ||  divisor.isNaN)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  divisor.isNaN  ||  imaginary  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  ||  divisor.isNaN  ||  imaginary  ||  divisor.isNaN)  {	  if    (isNaN    ||    imaginary    ||    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
126	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  isNaN);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  isNaN);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isInfinite()  ||  isNaN);	  MathUtils.checkState(divisor.isInfinite()    &&    isNaN);    	non-compiled	[CE]  not  a  statement	28	None	replace
127	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isNaN);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isNaN);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isInfinite()  ||  divisor.isNaN);	  MathUtils.checkState(divisor.isInfinite()    &&    isNaN);    	non-compiled	[CE]  not  a  statement	28	None	replace
128	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor.isInfinite())    {    if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
129	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isInfinite()  ||  divisor.isNaN)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor.isInfinite())    {    if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
130	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor.isInfinite())    {    if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
131	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isInfinite()  &&  isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isInfinite()  &&  isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor.isInfinite())    {    if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
132	[BUG]  [BUGGY]  Real!=  null)  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real!=  null)  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real!=  null)  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }	  if(real    ==    null)    {    if(divisor.isNaN    ||    imaginary    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	57	None	replace
133	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(!divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	62	None	replace
134	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(!divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	62	None	replace
135	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(!divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	62	None	replace
136	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(!divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(!divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN())  {  if(!divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	3	None	replace
137	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  divisor.isInfinite())  {  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN  ||  divisor.isInfinite())  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
138	[BUG]  [BUGGY]  if(real  ==  null)  {  if(divisor.isNaN  ||  imaginary!=  null)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(real  ==  null)  {  if(divisor.isNaN  ||  imaginary!=  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(real  ==  null)  {  if(divisor.isNaN  ||  imaginary!=  null)  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    imaginary!=    null)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
139	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  isInfinite)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  isInfinite)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN  ||  isInfinite)  {	  if(divisor.isNaN    ||    isInfinite)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
140	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  Divisor.isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  Divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(isNaN  ||  Divisor.isNaN)  {  return  NaN;  }	  if(divisor    ==    null)    {    if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	31	None	replace
141	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }	  if(isNaN    ||    imaginary)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NONE;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
142	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }	  if(isNaN    ||    imaginary)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NONE;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
143	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
144	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
145	[BUG]  [BUGGY]  if(isInfinite  &&  divisor.isNaN  ||  imaginary)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isInfinite  &&  divisor.isNaN  ||  imaginary)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(isInfinite  &&  divisor.isNaN  ||  imaginary)  {	  if(isInfinite    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  not  a  statement	63	None	replace
146	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN()  &&  isNaN);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isNaN()  &&  isNaN);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isNaN()  &&  isNaN);	  MathUtils.checkState(divisor.isInfinite()    &&    isNaN);    	non-compiled	[CE]  not  a  statement	28	None	replace
147	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  imaginary  ==  null)  {  divisor  =  Complex.NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  &&  imaginary  ==  null)  {  divisor  =  Complex.NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  &&  imaginary  ==  null)  {  divisor  =  Complex.NaN;  }	  if(divisor.isNaN()    ||    imaginary    ==    null)    {    divisor    =    Complex.NaN;    }    	non-compiled	[CE]  not  a  statement	45	None	replace
148	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(!divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	3	None	replace
149	[BUG]  [BUGGY]  Real!=  null)  {  if(divisor.isNaN  ||  real  ==  null)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real!=  null)  {  if(divisor.isNaN  ||  real  ==  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real!=  null)  {  if(divisor.isNaN  ||  real  ==  null)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    real    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	69	None	replace
150	[BUG]  [BUGGY]  Real  ==  null)  {  if(divisor.isNaN  ||  real  ==  null)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real  ==  null)  {  if(divisor.isNaN  ||  real  ==  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real  ==  null)  {  if(divisor.isNaN  ||  real  ==  null)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    real    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	69	None	replace
151	[BUG]  [BUGGY]  Real.checkDenominator(divisor!=  null);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real.checkDenominator(divisor!=  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real.checkDenominator(divisor!=  null);	  Real.checkArgument(divisor!=    null);    	non-compiled	[CE]  not  a  statement	42	None	replace
152	[BUG]  [BUGGY]  AssertionError.make(divisor,  real,  imaginary)>  ZERO)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  AssertionError.make(divisor,  real,  imaginary)>  ZERO)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	AssertionError.make(divisor,  real,  imaginary)>  ZERO)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor.isInfinite())    {    if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
153	[BUG]  [BUGGY]  AssertionError.make(divisor,  real,  imaginary)>  0)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  AssertionError.make(divisor,  real,  imaginary)>  0)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	AssertionError.make(divisor,  real,  imaginary)>  0)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor.isInfinite())    {    if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
154	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isInfinite());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isNaN(),  divisor.isInfinite());	  MathUtils.checkArgument(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  not  a  statement	61	None	replace
155	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.isNaN(),  divisor.isNaN());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDenominator(divisor.isNaN(),  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkDenominator(divisor.isNaN(),  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  not  a  statement	61	None	replace
156	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(isInfinite  ||  divisor.isZero)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(isInfinite  ||  divisor.isZero)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(isInfinite  ||  divisor.isZero)  {  return  NaN;  }	  if(divisor!=    null)    {    if(isInfinite    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
157	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  ||!divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  ||!divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(!divisor.isInfinite()  ||!divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||!divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
158	[BUG]  [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN(imaginary))  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN(imaginary))  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  Divisor.isNaN(imaginary))  {	  if(divisor    ==    null    ||    Divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	71	None	replace
159	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  N;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  N;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  N;  }	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
160	[BUG]  [BUGGY]  Real.checkNotNull(denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real.checkNotNull(denominator);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real.checkNotNull(denominator);	  Real.checkNotNull(imaginary);    	non-compiled	[CE]  not  a  statement	4	None	replace
161	[BUG]  [BUGGY]  if(divisor!=  null  &&  isNaN  &&  divisor.isNaN)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  &&  isNaN  &&  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  &&  isNaN  &&  divisor.isNaN)  {	  if(divisor!=    null    ||    isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
162	[BUG]  [BUGGY]  if(divisor  ==  null  &&  isNaN  &&  divisor.isNaN)  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  &&  isNaN  &&  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  &&  isNaN  &&  divisor.isNaN)  {	  if(divisor!=    null    ||    isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
163	[BUG]  [BUGGY]  Real  ==  null)  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real  ==  null)  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real  ==  null)  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }	  if(real    ==    null)    {    if(divisor.isNaN    ||    imaginary    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	57	None	replace
164	[BUG]  [BUGGY]  Real  ==  null  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real  ==  null  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real  ==  null  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }	  if(real    ==    null)    {    if(divisor.isNaN    ||    imaginary    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	57	None	replace
165	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  if(!divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  if(!divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isInfinite())  {  if(!divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isInfinite())    {    if(!divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	1	None	replace
166	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor!=  null);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDenominator(divisor!=  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkDenominator(divisor!=  null);	  MathUtils.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	54	None	replace
167	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  divisor.isZero())  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  divisor.isZero())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN  ||  divisor.isZero())  {	  if(divisor!=    null    ||    divisor.isNaN    ||    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	25	None	replace
168	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(isInfinite  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(isInfinite  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(isInfinite  ||  divisor.isInfinite())  {  return  NaN;  }	  if(isInfinite    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	64	None	replace
169	[BUG]  [BUGGY]  if(isInfinite  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isInfinite  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(isInfinite  &&  divisor.isInfinite())  {  return  NaN;  }	  if(isInfinite    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	64	None	replace
170	[BUG]  [BUGGY]  if  (divisor!=  null  ||  divisor.isInfinite)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (divisor!=  null  ||  divisor.isInfinite)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (divisor!=  null  ||  divisor.isInfinite)  {	  if    (isNaN    ||    divisor.isInfinite)    {    	non-compiled	[CE]  not  a  statement	43	None	replace
171	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(!divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	62	None	replace
172	[BUG]  [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN())  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  Divisor.isNaN())  {	  if(divisor!=    null    ||    divisor.isNaN())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
173	[BUG]  [BUGGY]  if  (isNaN  ||  divisor  ==  null  ||  imaginary  ||  divisor.isNaN)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  divisor  ==  null  ||  imaginary  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  ||  divisor  ==  null  ||  imaginary  ||  divisor.isNaN)  {	  if    (isNaN    ||    imaginary    ||    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
174	[BUG]  [BUGGY]  if  (isNaN  ||  divisor!=  null  ||  imaginary  ||  divisor.isNaN)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  divisor!=  null  ||  imaginary  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  ||  divisor!=  null  ||  imaginary  ||  divisor.isNaN)  {	  if    (isNaN    ||    imaginary    ||    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
175	[BUG]  [BUGGY]  if  (isNaN  ||  imaginary  ||  divisor.isNaN  ||  real)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  imaginary  ||  divisor.isNaN  ||  real)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  ||  imaginary  ||  divisor.isNaN  ||  real)  {	  if    (isNaN    ||    imaginary    ||    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
176	[BUG]  [BUGGY]  if  (isNaN  ||  imaginary  ||  divisor.isNaN  ||  divisor.isNaN)  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  imaginary  ||  divisor.isNaN  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  ||  imaginary  ||  divisor.isNaN  ||  divisor.isNaN)  {	  if    (isNaN    ||    imaginary    ||    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
177	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
178	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  divisor.isLocal())  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  divisor.isLocal())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(isNaN  ||  divisor.isLocal())  {  return  NaN;  }	  if(divisor!=    null)    {    if(isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	47	None	replace
179	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  imaginary  ==  null)  {  divisor  =  new  Complex(real);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  &&  imaginary  ==  null)  {  divisor  =  new  Complex(real);  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  &&  imaginary  ==  null)  {  divisor  =  new  Complex(real);  }	  if(divisor.isNaN()    ||    imaginary    ==    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
180	[BUG]  [BUGGY]  if(divisor  ==  null  ||  imaginary  ||  divisor.isNaN())  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  imaginary  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  imaginary  ||  divisor.isNaN())  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  not  a  statement	56	None	replace
181	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(isNaN    ||    imaginary)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
182	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(isNaN  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(isNaN    ||    imaginary)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
183	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor.isInfinite(),  imaginary);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigits(divisor.isInfinite(),  imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkDigits(divisor.isInfinite(),  imaginary);	  MathUtils.checkDigits(divisor.isInfinite());    	non-compiled	[CE]  not  a  statement	53	None	replace
184	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor.isDenominator());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigits(divisor.isDenominator());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkDigits(divisor.isDenominator());	  MathUtils.checkDigits(divisor.isInfinite());    	non-compiled	[CE]  not  a  statement	53	None	replace
185	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isNaN)  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isNaN)  {	  if(divisor.isNaN()    ||    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	34	None	replace
186	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isInfinite());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isNaN(),  divisor.isInfinite());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  not  a  statement	41	None	replace
187	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isDenominator()  &&  divisor.isInfinite());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.isDenominator()  &&  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isDenominator()  &&  divisor.isInfinite());	  MathUtils.checkArgument(divisor.isInfinite()    &&    divisor.isInfinite());    	non-compiled	[CE]  not  a  statement	8	None	replace
188	[BUG]  [BUGGY]  if(divisor!=  null  ||  imaginary  ||  divisor.isNaN)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  imaginary  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  imaginary  ||  divisor.isNaN)  {	  if(divisor!=    null    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  not  a  statement	30	None	replace
189	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isInfinite())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isNaN)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
190	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
191	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
192	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  imaginary  ==  null)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  imaginary  ==  null)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN  ||  imaginary  ==  null)  {	  if(divisor!=    null    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  not  a  statement	30	None	replace
193	[BUG]  [BUGGY]  if(divisor  ==  null  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(isNaN    ||    imaginary)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
194	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  imaginary)  {  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  imaginary)  {  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(isNaN  ||  imaginary)  {  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(isNaN    ||    imaginary)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
195	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isInfinite)  {	  if    (isNaN    ||    divisor.isInfinite)    {    	non-compiled	[CE]  not  a  statement	43	None	replace
196	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN  ||  divisor.isNaN())  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isNaN  ||  divisor.isNaN  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(isNaN  ||  divisor.isNaN  ||  divisor.isNaN())  {	  if    (isNaN    ||    divisor.isInfinite)    {    	non-compiled	[CE]  not  a  statement	43	None	replace
197	[BUG]  [BUGGY]  Real.checkInfinite(imaginary);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real.checkInfinite(imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real.checkInfinite(imaginary);	  Real.checkNotNull(real);    	non-compiled	[CE]  not  a  statement	5	None	replace
198	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  &&  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isNaN())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
199	[BUG]  [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN(divisor))  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN(divisor))  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  Divisor.isNaN(divisor))  {	  if(divisor    ==    null    ||    Divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	71	None	replace
200	[BUG]  [BUGGY]  if  (isNaN  ||  imaginary  ||  divisor.isNaN  ||  divisor.isNaN())  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  imaginary  ||  divisor.isNaN  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  ||  imaginary  ||  divisor.isNaN  ||  divisor.isNaN())  {	  if    (isNaN    ||    imaginary    ||    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
201	[BUG]  [BUGGY]  Real.checkArgument(divisor!=  null  &&  divisor.isNaN());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real.checkArgument(divisor!=  null  &&  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real.checkArgument(divisor!=  null  &&  divisor.isNaN());	  Real.checkArgument(divisor!=    null);    	non-compiled	[CE]  not  a  statement	42	None	replace
202	[BUG]  [BUGGY]  Real.checkArgument(divisor!=  null  &&  divisor.isInfinite());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Real.checkArgument(divisor!=  null  &&  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Real.checkArgument(divisor!=  null  &&  divisor.isInfinite());	  Real.checkArgument(divisor!=    null);    	non-compiled	[CE]  not  a  statement	42	None	replace
203	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN()  ||  divisor.isNaN())  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN()  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor.isNaN()  ||  divisor.isNaN()  ||  divisor.isNaN())  {	  if(divisor.isNaN()    ||    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	34	None	replace
204	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN()  ||  divisor.isNaN)  {  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN()  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  &&  divisor.isNaN()  ||  divisor.isNaN)  {	  if(divisor.isNaN()    ||    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	34	None	replace
205	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isInfinite()  ||  divisor.isInfinite());  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigit(divisor.isInfinite()  ||  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkDigit(divisor.isInfinite()  ||  divisor.isInfinite());	  MathUtils.checkState(divisor.isInfinite()    ||    divisor.isInfinite());    	non-compiled	[CE]  not  a  statement	27	None	replace
206	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isInfinite  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(isInfinite  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null)    {    if(isInfinite    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
207	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  Divisor.isNaN)  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  Divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN  ||  Divisor.isNaN)  {	  if(divisor!=    null    ||    divisor.isNaN    ||    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	25	None	replace
208	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  &&  divisor.isNaN  ||  divisor.isNaN)  {	  if(divisor!=    null    ||    divisor.isNaN    ||    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	25	None	replace
209	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor!=  null);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigit(divisor!=  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkDigit(divisor!=  null);	  MathUtils.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	54	None	replace
210	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN()  +  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN()  +  1);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN()  +  1);	  MathUtils.checkArgument(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  not  a  statement	61	None	replace
211	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor.getDenominator());  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigits(divisor.getDenominator());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkDigits(divisor.getDenominator());	  MathUtils.checkDigits(divisor.isInfinite());    	non-compiled	[CE]  not  a  statement	53	None	replace
212	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.isNaN()  ||  divisor.isNaN());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDenominator(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkDenominator(divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  not  a  statement	36	None	replace
213	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  divisor.isInfinite());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkState(divisor.isInfinite(),  divisor.isInfinite());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  not  a  statement	41	None	replace
214	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isNaN(),  divisor.isNaN());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigit(divisor.isNaN(),  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkDigit(divisor.isNaN(),  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  not  a  statement	41	None	replace
215	[BUG]  [BUGGY]  if(divisor  ==  null  ||!divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||!divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||!divisor.isInfinite())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(!divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
216	[BUG]  [BUGGY]  if(divisor!=  null  &&  imaginary  ==  null)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  &&  imaginary  ==  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  &&  imaginary  ==  null)  {  return  NaN;  }	  if(divisor!=    null    ||    imaginary    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
217	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isNaN()  ||  divisor.isNaN());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigit(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	MathUtils.checkDigit(divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  not  a  statement	40	None	replace
218	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  imaginary!=  null)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  imaginary!=  null)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN  ||  imaginary!=  null)  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  not  a  statement	56	None	replace
219	[BUG]  [BUGGY]  if(divisor  ==  null  ||  imaginary)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  imaginary)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  imaginary)  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  not  a  statement	56	None	replace
220	[BUG]  [BUGGY]  if(divisor  ==  null  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }	  if(isNaN    ||    imaginary)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NONE;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
221	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  imaginary)  {  divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  imaginary)  {  divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(isNaN  ||  imaginary)  {  divisor.isNaN()  ||  divisor.isNaN())  {  return  NONE;  }	  if(isNaN    ||    imaginary)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NONE;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
222	[BUG]  [BUGGY]  if(real  ==  null)  {  if(divisor!=  null)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(real  ==  null)  {  if(divisor!=  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(real  ==  null)  {  if(divisor!=  null)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    real    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	69	None	replace
223	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isLocal()  ||  divisor.isLocal())  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.isLocal()  ||  divisor.isLocal())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null)  {  if(divisor.isLocal()  ||  divisor.isLocal())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isLocal())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
224	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isUndefined)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isUndefined)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isUndefined)  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	39	None	replace
225	[BUG]  [BUGGY]  Divisor  <  N,  V>  divisor  =  new  Complex(real);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Divisor  <  N,  V>  divisor  =  new  Complex(real);  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Divisor  <  N,  V>  divisor  =  new  Complex(real);	  if(divisor.isNaN()    ||    imaginary    ==    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
226	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN  ||  divisor.isNaN())  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  &&  divisor.isNaN  ||  divisor.isNaN())  {	  if(divisor!=    null    &&    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
227	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  divisor.isNaNLocal())  {  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  divisor.isNaNLocal())  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN  ||  divisor.isNaNLocal())  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
228	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor.isInfinite())    {    if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
229	[BUG]  [BUGGY]  if  (isNaN  ||  imaginary  ||  real)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  imaginary  ||  real)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  ||  imaginary  ||  real)  {	  if    (isNaN    ||    divisor.isNaN    ||    real)    {    	non-compiled	[CE]  not  a  statement	29	None	replace
230	[BUG]  [BUGGY]  if(isNaN  ||  isInfinite  &&  divisor.isNaN)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isNaN  ||  isInfinite  &&  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(isNaN  ||  isInfinite  &&  divisor.isNaN)  {	  if    (isInfinite    &&    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	20	None	replace
231	[BUG]  [BUGGY]  if(isInfinite  ||  imaginary  ||  divisor.isNaN)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isInfinite  ||  imaginary  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(isInfinite  ||  imaginary  ||  divisor.isNaN)  {	  if(isInfinite    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  not  a  statement	63	None	replace
232	[BUG]  [BUGGY]  Divisor  <?>  divisor  =  Complex.NaN;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Divisor  <?>  divisor  =  Complex.NaN;  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	Divisor  <?>  divisor  =  Complex.NaN;	  if(divisor.isNaN()    ||    imaginary    ==    null)    {    divisor    =    Complex.NaN;    }    	non-compiled	[CE]  not  a  statement	45	None	replace
233	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  &&  isNaN)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  &&  isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN  &&  isNaN)  {	  if(divisor!=    null    ||    isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
