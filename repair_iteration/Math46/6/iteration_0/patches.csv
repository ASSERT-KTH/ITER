bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (isInfinite  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]  if  (isInfinite  ||  divisor.isNaN)  {  [BUGGY]  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isInfinite  ||  divisor.isNaN)  {	if  (isNaN  ||  divisor.isNaN)  {  	non-compiled	[CE]  ';'  expected	11	None	replace
2	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN)  {  [BUGGY]  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor!=  null  ||  divisor.isNaN)  {	if  (isNaN  ||  divisor.isNaN)  {  	non-compiled	[CE]  ';'  expected	11	None	replace
3	[BUG]  [BUGGY]  if  (isNaN  &&  divisor.isNaN)  {  [CE]  ';'  expected  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]  if  (isNaN  &&  divisor.isNaN)  {  [BUGGY]  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  &&  divisor.isNaN)  {	if  (isNaN  ||  divisor.isNaN)  {  	non-compiled	[CE]  ';'  expected	11	None	replace
4	[BUG]  [BUGGY]  if  (isNaN  ||  divisor.isNaN  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]          AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]  if  (isNaN  ||  divisor.isNaN  ||  divisor.isNaN)  {  [BUGGY]  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  ||  divisor.isNaN  ||  divisor.isNaN)  {	if  (isNaN  ||  divisor.isNaN)  {  	non-compiled	[CE]  ';'  expected	11	None	replace
5	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]            AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]    [BUGGY]  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	  	if  (isNaN  ||  divisor.isNaN)  {  	non-compiled	[CE]  ';'  expected	11	None	replace
6	[BUG]  [BUGGY]    MathUtils.checkNotNull(divisor);  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]    MathUtils.checkNotNull(divisor);  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	    MathUtils.checkNotNull(divisor);		non-compiled	[CE]  ';'  expected	12	None	add
7	[BUG]  [BUGGY]    MathUtils.checkState(divisor.isInfinite());  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]    MathUtils.checkState(divisor.isInfinite());  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	    MathUtils.checkState(divisor.isInfinite());		non-compiled	[CE]  ';'  expected	12	None	add
8	[BUG]  [BUGGY]    MathUtils.checkState(divisor.isNaN());  [CE]  ';'  expected  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]    MathUtils.checkState(divisor.isNaN());  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	    MathUtils.checkState(divisor.isNaN());		non-compiled	[CE]  ';'  expected	12	None	add
9	[BUG]  [BUGGY]    MathUtils.checkArgument(divisor.isNaN());  [CE]  ';'  expected  [FE]          AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]    MathUtils.checkArgument(divisor.isNaN());  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	    MathUtils.checkArgument(divisor.isNaN());		non-compiled	[CE]  ';'  expected	12	None	add
10	[BUG]  [BUGGY]    MathUtils.checkArgument(divisor.isInfinite());  [CE]  ';'  expected  [FE]            AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]    MathUtils.checkArgument(divisor.isInfinite());  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	    MathUtils.checkArgument(divisor.isInfinite());		non-compiled	[CE]  ';'  expected	12	None	add
11	[BUG]  [BUGGY]  if  (isNaN  ||  divisor.isNaN  ||  imaginary)  {  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]  if  (isNaN  ||  divisor.isNaN  ||  imaginary)  {  [BUGGY]  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if  (isNaN  ||  divisor.isNaN  ||  imaginary)  {	if  (isNaN  ||  divisor.isNaN)  {  	non-compiled	[CE]  ';'  expected	11	None	replace
12	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN)  {  [BUGGY]  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	if(divisor  ==  null  ||  divisor.isNaN)  {	if  (isNaN  ||  divisor.isNaN)  {  	non-compiled	[CE]  ';'  expected	11	None	replace
13	[BUG]  [BUGGY]    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }		non-compiled	[CE]  ';'  expected	12	None	add
14	[BUG]  [BUGGY]    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }		non-compiled	[CE]  ';'  expected	12	None	add
15	[BUG]  [BUGGY]    Real.checkNotNull(divisor);  [CE]  ';'  expected  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]    Real.checkNotNull(divisor);  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	    Real.checkNotNull(divisor);		non-compiled	[CE]  ';'  expected	12	None	add
16	[BUG]  [BUGGY]    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }		non-compiled	[CE]  ';'  expected	12	None	add
17	[BUG]  [BUGGY]    if(divisor!=  null)  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]    if(divisor!=  null)  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	    if(divisor!=  null)  {  if(divisor.isNaN  ||  imaginary  ==  null)  {  return  NaN;  }		non-compiled	[CE]  ';'  expected	12	None	add
18	[BUG]  [BUGGY]    if(divisor!=  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]    if(divisor!=  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	    if(divisor!=  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }		non-compiled	[CE]  ';'  expected	12	None	add
19	[BUG]  [BUGGY]    if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]    if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	    if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }		non-compiled	[CE]  ';'  expected	12	None	add
20	[BUG]  [BUGGY]    if(divisor!=  null)  {  if(!divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  [BUGGY]    if(divisor!=  null)  {  if(!divisor.isInfinite())  {  return  NaN;  }  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	    if(divisor!=  null)  {  if(!divisor.isInfinite())  {  return  NaN;  }		non-compiled	[CE]  ';'  expected	12	None	add
