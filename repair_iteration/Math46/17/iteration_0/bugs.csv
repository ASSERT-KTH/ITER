bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
33	[BUG] [BUGGY] final double d = divisor.getImaginary(); [FE] AssertionError [CONTEXT] if (divisor.isZero) {  return isZero ? NaN : INF; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); [BUGGY] final double d = divisor.getImaginary(); [BUGGY]  if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (divisor.isZero) {  return isZero ? NaN : INF; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); [BUGGY] [BUGGY] final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	add	
