bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  c  =  divisor.getNaN()  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  c  =  divisor.getNaN()  +  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getNaN()  +  1;	  final    double    c    =    divisor.getNaN();    	non-compiled	[CE]  not  a  statement	21	None	replace
2	[BUG]  [BUGGY]  c  =  divisor.getNaN()  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  c  =  divisor.getNaN()  +  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	c  =  divisor.getNaN()  +  1;	  c    =    divisor.getNaN();    	non-compiled	[CE]  not  a  statement	25	None	replace
3	[BUG]  [BUGGY]  c  =  divisor.getCurrentNaN();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  c  =  divisor.getCurrentNaN();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	c  =  divisor.getCurrentNaN();	  c    =    divisor.getNaN();    	non-compiled	[CE]  not  a  statement	25	None	replace
4	[BUG]  [BUGGY]  final  double  d  =  divisor.getDimension();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDimension();  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDimension();	  final    double    d    =    divisor.getDiminator();    	non-compiled	[CE]  not  a  statement	28	None	replace
5	[BUG]  [BUGGY]  final  double  d  =  divisor.getDivisor()  *  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDivisor()  *  1;  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDivisor()  *  1;	  final    double    d    =    divisor.getDivisor()    -    1;    	non-compiled	[CE]  not  a  statement	13	None	replace
6	[BUG]  [BUGGY]  final  double  real  =  divisor.getReal();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  real  =  divisor.getReal();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  real  =  divisor.getReal();	  double    real    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	17	None	replace
7	[BUG]  [BUGGY]  double  real  =  divisor.getReal()  -  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  double  real  =  divisor.getReal()  -  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  real  =  divisor.getReal()  -  1;	  double    real    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	17	None	replace
8	[BUG]  [BUGGY]  final  double  d  =  divisor.getInf();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getInf();  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getInf();	  final    double    d    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	6	None	replace
9	[BUG]  [BUGGY]  final  double  d  =  divisor.getInF();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getInF();  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getInF();	  final    double    d    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	6	None	replace
10	[BUG]  [BUGGY]  final  double  d  =  divisor.getImaginary()  /  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getImaginary()  /  1;  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getImaginary()  /  1;	  final    double    d    =    divisor.getImaginary()    *    1;    	non-compiled	[CE]  not  a  statement	7	None	replace
11	[BUG]  [BUGGY]  final  double  d  =  divisor.getImaginary()  *  2;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getImaginary()  *  2;  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getImaginary()  *  2;	  final    double    d    =    divisor.getImaginary()    *    1;    	non-compiled	[CE]  not  a  statement	7	None	replace
12	[BUG]  [BUGGY]  final  double  d  =  divisor.getImaginary()  *  4;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getImaginary()  *  4;  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getImaginary()  *  4;	  final    double    d    =    divisor.getImaginary()    *    1;    	non-compiled	[CE]  not  a  statement	7	None	replace
13	[BUG]  [BUGGY]  c  =  divisor.getInf();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  c  =  divisor.getInf();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	c  =  divisor.getInf();	  c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	24	None	replace
14	[BUG]  [BUGGY]  c  =  divisor.getInF();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  c  =  divisor.getInF();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	c  =  divisor.getInF();	  c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	24	None	replace
15	[BUG]  [BUGGY]  c  =  divisor.getRaw()  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  c  =  divisor.getRaw()  +  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	c  =  divisor.getRaw()  +  1;	  c    =    divisor.getRaw();    	non-compiled	[CE]  not  a  statement	16	None	replace
16	[BUG]  [BUGGY]  c  =  divisor.getCurrentRaw();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  c  =  divisor.getCurrentRaw();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	c  =  divisor.getCurrentRaw();	  c    =    divisor.getRaw();    	non-compiled	[CE]  not  a  statement	16	None	replace
17	[BUG]  [BUGGY]  double  c  =  divisor.getInf();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  double  c  =  divisor.getInf();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  c  =  divisor.getInf();	  double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	4	None	replace
18	[BUG]  [BUGGY]  double  c  =  divisor.getInF();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  double  c  =  divisor.getInF();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  c  =  divisor.getInF();	  double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	4	None	replace
19	[BUG]  [BUGGY]  double  real  =  divisor.getInf();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  double  real  =  divisor.getInf();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  real  =  divisor.getInf();	  double    real    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	20	None	replace
20	[BUG]  [BUGGY]  final  double  real  =  divisor.getINF();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  real  =  divisor.getINF();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  real  =  divisor.getINF();	  double    real    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	20	None	replace
21	[BUG]  [BUGGY]  double  real  =  divisor.getInF();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  double  real  =  divisor.getInF();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  real  =  divisor.getInF();	  double    real    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	20	None	replace
22	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getINFConstructor();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getINFConstructor();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Constructor  <  Complex>  divisor  =  divisor.getINFConstructor();	  Constructor    <    Complex>    divisor    =    divisor.getConstructor();    	non-compiled	[CE]  not  a  statement	14	None	replace
23	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getDenominator();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getDenominator();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Constructor  <  Complex>  divisor  =  divisor.getDenominator();	  Constructor    <    Complex>    divisor    =    divisor.getConstructor();    	non-compiled	[CE]  not  a  statement	14	None	replace
24	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getComplexer();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getComplexer();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Constructor  <  Complex>  divisor  =  divisor.getComplexer();	  Constructor    <    Complex>    divisor    =    divisor.getConstructor();    	non-compiled	[CE]  not  a  statement	14	None	replace
25	[BUG]  [BUGGY]  final  double  d  =  divisor.getDenimal()  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDenimal()  +  1;  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDenimal()  +  1;	  final    double    d    =    divisor.getDenimal();    	non-compiled	[CE]  not  a  statement	29	None	replace
26	[BUG]  [BUGGY]  final  double  d  =  divisor.getDenimal()  -  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDenimal()  -  1;  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDenimal()  -  1;	  final    double    d    =    divisor.getDenimal();    	non-compiled	[CE]  not  a  statement	29	None	replace
27	[BUG]  [BUGGY]  final  double  d  =  divisor.getDenimal()  *  2;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDenimal()  *  2;  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDenimal()  *  2;	  final    double    d    =    divisor.getDenimal();    	non-compiled	[CE]  not  a  statement	29	None	replace
28	[BUG]  [BUGGY]  final  double  d  =  divisor.getDestinator()  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDestinator()  +  1;  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDestinator()  +  1;	  final    double    d    =    divisor.getDestinator();    	non-compiled	[CE]  not  a  statement	1	None	replace
29	[BUG]  [BUGGY]  final  double  d  =  divisor.getDesiredDestinator();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDesiredDestinator();  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDesiredDestinator();	  final    double    d    =    divisor.getDestinator();    	non-compiled	[CE]  not  a  statement	1	None	replace
30	[BUG]  [BUGGY]  final  double  c  =  divisor.getRaw()  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  c  =  divisor.getRaw()  +  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getRaw()  +  1;	  final    double    c    =    divisor.getRaw();    	non-compiled	[CE]  not  a  statement	10	None	replace
31	[BUG]  [BUGGY]  final  double  real  =  divisor.getImaginary()  -  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  real  =  divisor.getImaginary()  -  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  real  =  divisor.getImaginary()  -  1;	  double    real    =    divisor.getImaginary()    -    1;    	non-compiled	[CE]  not  a  statement	19	None	replace
32	[BUG]  [BUGGY]  double  real  =  divisor.getINF()  -  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  double  real  =  divisor.getINF()  -  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  real  =  divisor.getINF()  -  1;	  double    real    =    divisor.getImaginary()    -    1;    	non-compiled	[CE]  not  a  statement	19	None	replace
33	[BUG]  [BUGGY]  final  double  d  =  divisor.getInfinity();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getInfinity();  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getInfinity();	  final    double    d    =    divisor.getINFDenominator();    	non-compiled	[CE]  not  a  statement	22	None	replace
34	[BUG]  [BUGGY]  final  double  d  =  divisor.getDivisor(c,  c);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDivisor(c,  c);  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDivisor(c,  c);	  final    double    d    =    divisor.getDivisor(c);    	non-compiled	[CE]  not  a  statement	23	None	replace
35	[BUG]  [BUGGY]  final  double  c  =  divisor.getDivisor(c);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  c  =  divisor.getDivisor(c);  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getDivisor(c);	  final    double    d    =    divisor.getDivisor(c);    	non-compiled	[CE]  not  a  statement	23	None	replace
36	[BUG]  [BUGGY]  final  double  d  =  divisor.getDenomination()  +  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDenomination()  +  1;  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDenomination()  +  1;	  final    double    d    =    divisor.getDenomination();    	non-compiled	[CE]  not  a  statement	5	None	replace
37	[BUG]  [BUGGY]  final  double  d  =  divisor.getDenomination()  -  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDenomination()  -  1;  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDenomination()  -  1;	  final    double    d    =    divisor.getDenomination();    	non-compiled	[CE]  not  a  statement	5	None	replace
38	[BUG]  [BUGGY]  Double  c  =  divisor.getINF();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  Double  c  =  divisor.getINF();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Double  c  =  divisor.getINF();	  Double    c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	30	None	replace
39	[BUG]  [BUGGY]  Double  c  =  divisor.getNaN();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  Double  c  =  divisor.getNaN();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Double  c  =  divisor.getNaN();	  Double    c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	30	None	replace
40	[BUG]  [BUGGY]  final  double  c  =  divisor.getCurrentReal();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  c  =  divisor.getCurrentReal();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getCurrentReal();	  c    =    divisor.getCurrentReal();    	non-compiled	[CE]  not  a  statement	11	None	replace
41	[BUG]  [BUGGY]  c  =  divisor.getCurrentReal()  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  c  =  divisor.getCurrentReal()  +  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	c  =  divisor.getCurrentReal()  +  1;	  c    =    divisor.getCurrentReal();    	non-compiled	[CE]  not  a  statement	11	None	replace
42	[BUG]  [BUGGY]  c  =  divisor.getCurrentReal()  -  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  c  =  divisor.getCurrentReal()  -  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	c  =  divisor.getCurrentReal()  -  1;	  c    =    divisor.getCurrentReal();    	non-compiled	[CE]  not  a  statement	11	None	replace
43	[BUG]  [BUGGY]  final  double  d  =  divisor.getDenominator()  *  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDenominator()  *  1;  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDenominator()  *  1;	  final    double    d    =    divisor.getDenominator()    +    1;    	non-compiled	[CE]  not  a  statement	2	None	replace
44	[BUG]  [BUGGY]  final  double  real  =  divisor.getRaw();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  real  =  divisor.getRaw();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  real  =  divisor.getRaw();	  final    double    real    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	18	None	replace
45	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.clone();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.clone();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	NeighborDivisor  divisor  =(NaN)divisor.clone();	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	27	None	replace
46	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDenominator();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDenominator();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getDenominator();	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	27	None	replace
47	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getINF();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getINF();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getINF();	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	27	None	replace
48	[BUG]  [BUGGY]  final  double  c  =  divisor.getInf();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  c  =  divisor.getInf();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getInf();	  final    double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	8	None	replace
49	[BUG]  [BUGGY]  final  double  c  =  divisor.getInFactor();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  c  =  divisor.getInFactor();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getInFactor();	  final    double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	8	None	replace
50	[BUG]  [BUGGY]  final  double  c  =  divisor.getInF();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  c  =  divisor.getInF();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getInF();	  final    double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	8	None	replace
51	[BUG]  [BUGGY]  Context.checkState(divisor  ==  null);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  Context.checkState(divisor  ==  null);  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Context.checkState(divisor  ==  null);	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	15	None	replace
52	[BUG]  [BUGGY]  Context.checkState(c!=  null);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  Context.checkState(c!=  null);  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Context.checkState(c!=  null);	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	15	None	replace
53	[BUG]  [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isInfinite());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isInfinite());  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Context.checkState(divisor!=  null  &&  divisor.isInfinite());	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	15	None	replace
54	[BUG]  [BUGGY]  final  double  c  =  divisor.getDenominator();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  c  =  divisor.getDenominator();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getDenominator();	  final    double    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	9	None	replace
55	[BUG]  [BUGGY]  c  =  divisor.getColumn();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  c  =  divisor.getColumn();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	c  =  divisor.getColumn();	  c    =    divisor.getRaw();    	non-compiled	[CE]  not  a  statement	16	None	replace
56	[BUG]  [BUGGY]  final  double  d  =  divisor.getDeserializer();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDeserializer();  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDeserializer();	  final    double    d    =    divisor.getDestinator();    	non-compiled	[CE]  not  a  statement	1	None	replace
57	[BUG]  [BUGGY]  double  real  =  divisor.getreal();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  double  real  =  divisor.getreal();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  real  =  divisor.getreal();	  double    real    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	20	None	replace
58	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.cloneTree();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.cloneTree();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	NeighborDivisor  divisor  =(NaN)divisor.cloneTree();	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	27	None	replace
59	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor(0);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor(0);  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getDivisor(0);	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	27	None	replace
60	[BUG]  [BUGGY]  final  double  d  =  divisor.getDestination();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDestination();  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDestination();	  final    double    d    =    divisor.getDenimal();    	non-compiled	[CE]  not  a  statement	29	None	replace
61	[BUG]  [BUGGY]  final  double  d  =  divisor.getDenimal()  +  2;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDenimal()  +  2;  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDenimal()  +  2;	  final    double    d    =    divisor.getDenimal();    	non-compiled	[CE]  not  a  statement	29	None	replace
62	[BUG]  [BUGGY]  double  real  =  divisor.getImaginary()  *  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  double  real  =  divisor.getImaginary()  *  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  real  =  divisor.getImaginary()  *  1;	  double    real    =    divisor.getImaginary()    -    1;    	non-compiled	[CE]  not  a  statement	19	None	replace
63	[BUG]  [BUGGY]  double  real  =  divisor.getImaginary()  /  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  double  real  =  divisor.getImaginary()  /  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  real  =  divisor.getImaginary()  /  1;	  double    real    =    divisor.getImaginary()    -    1;    	non-compiled	[CE]  not  a  statement	19	None	replace
64	[BUG]  [BUGGY]  double  c  =  divisor.getINF()  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  double  c  =  divisor.getINF()  +  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  c  =  divisor.getINF()  +  1;	  double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	4	None	replace
65	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getConstructor(c);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getConstructor(c);  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Constructor  <  Complex>  divisor  =  divisor.getConstructor(c);	  Constructor    <    Complex>    divisor    =    divisor.getConstructor();    	non-compiled	[CE]  not  a  statement	14	None	replace
66	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getDivisor();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getDivisor();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Constructor  <  Complex>  divisor  =  divisor.getDivisor();	  Constructor    <    Complex>    divisor    =    divisor.getConstructor();    	non-compiled	[CE]  not  a  statement	14	None	replace
67	[BUG]  [BUGGY]  final  double  d  =  divisor.getDivisorIndex();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDivisorIndex();  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDivisorIndex();	  final    double    d    =    divisor.getDiminator();    	non-compiled	[CE]  not  a  statement	28	None	replace
68	[BUG]  [BUGGY]  final  double  d  =  divisor.getDivisor2();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDivisor2();  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDivisor2();	  final    double    d    =    divisor.getDiminator();    	non-compiled	[CE]  not  a  statement	28	None	replace
69	[BUG]  [BUGGY]  Context.checkState(divisor!=  null,  c);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  Context.checkState(divisor!=  null,  c);  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Context.checkState(divisor!=  null,  c);	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	15	None	replace
70	[BUG]  [BUGGY]  final  double  d  =  divisor.getInFDenominator();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getInFDenominator();  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getInFDenominator();	  final    double    d    =    divisor.getINFDenominator();    	non-compiled	[CE]  not  a  statement	22	None	replace
71	[BUG]  [BUGGY]  final  double  d  =  divisor.getINFDenominator()  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getINFDenominator()  +  1;  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getINFDenominator()  +  1;	  final    double    d    =    divisor.getINFDenominator();    	non-compiled	[CE]  not  a  statement	22	None	replace
72	[BUG]  [BUGGY]  final  double  c  =  divisor.getDivisor(divisor);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  c  =  divisor.getDivisor(divisor);  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getDivisor(divisor);	  final    double    d    =    divisor.getDivisor(c);    	non-compiled	[CE]  not  a  statement	23	None	replace
73	[BUG]  [BUGGY]  final  double  d  =  divisor.getDivisor(c,  isNaN);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDivisor(c,  isNaN);  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDivisor(c,  isNaN);	  final    double    d    =    divisor.getDivisor(c);    	non-compiled	[CE]  not  a  statement	23	None	replace
74	[BUG]  [BUGGY]  final  double  d  =  divisor.getDivisor(c  +  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  d  =  divisor.getDivisor(c  +  1);  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDivisor(c  +  1);	  final    double    d    =    divisor.getDivisor(c);    	non-compiled	[CE]  not  a  statement	23	None	replace
75	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor(1);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor(1);  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getDivisor(1);	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	27	None	replace
76	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getDecomplexer();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getDecomplexer();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Constructor  <  Complex>  divisor  =  divisor.getDecomplexer();	  Constructor    <    Complex>    divisor    =    divisor.getConstructor();    	non-compiled	[CE]  not  a  statement	14	None	replace
77	[BUG]  [BUGGY]  static  final  double  d  =  divisor.getDenominator();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  static  final  double  d  =  divisor.getDenominator();  [BUGGY]        if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	static  final  double  d  =  divisor.getDenominator();	  final    double    d    =    divisor.getDenominator()    +    1;    	non-compiled	[CE]  not  a  statement	2	None	replace
78	[BUG]  [BUGGY]  final  double  c  =  divisor.getColumn();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  c  =  divisor.getColumn();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getColumn();	  final    double    c    =    divisor.getRaw();    	non-compiled	[CE]  not  a  statement	10	None	replace
79	[BUG]  [BUGGY]  double  real  =  divisor.getInFraction();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  double  real  =  divisor.getInFraction();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  real  =  divisor.getInFraction();	  double    real    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	20	None	replace
80	[BUG]  [BUGGY]  c  =  divisor.getRawParent();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  c  =  divisor.getRawParent();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	c  =  divisor.getRawParent();	  c    =    divisor.getRaw();    	non-compiled	[CE]  not  a  statement	16	None	replace
81	[BUG]  [BUGGY]  Double  c  =  divisor.getComplex();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  Double  c  =  divisor.getComplex();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Double  c  =  divisor.getComplex();	  Double    c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	26	None	replace
82	[BUG]  [BUGGY]  final  double  c  =  divisor.getInFraction();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  c  =  divisor.getInFraction();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getInFraction();	  final    double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	8	None	replace
83	[BUG]  [BUGGY]  final  double  c  =  divisor.getComplex()  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();      [BUGGY]  final  double  c  =  divisor.getComplex()  +  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getComplex()  +  1;	  final    double    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	9	None	replace
