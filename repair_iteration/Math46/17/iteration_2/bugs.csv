bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  d  =  divisor.getDestinator();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  d  =  divisor.getDestinator();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDestinator();	  final    double    d    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	8	None	replace
2	[BUG]  [BUGGY]  final  double  d  =  divisor.getDenominator()  +  1;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  d  =  divisor.getDenominator()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDenominator()  +  1;	  final    double    d    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	8	None	replace
3	[BUG]  [BUGGY]  double  c  =  divisor.getImaginary();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  double  c  =  divisor.getImaginary();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  c  =  divisor.getImaginary();	      double    c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	4	None	replace
4	[BUG]  [BUGGY]  double  c  =  divisor.getINF();  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  double  c  =  divisor.getINF();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  c  =  divisor.getINF();	      double    c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	4	None	replace
5	[BUG]  [BUGGY]  final  double  d  =  divisor.getDenomination();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  d  =  divisor.getDenomination();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDenomination();	  final    double    d    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	6	None	replace
6	[BUG]  [BUGGY]  final  double  d  =  divisor.getINF();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  d  =  divisor.getINF();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getINF();	  final    double    d    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	6	None	replace
7	[BUG]  [BUGGY]  final  double  d  =  divisor.getImaginary()  *  1;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  d  =  divisor.getImaginary()  *  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getImaginary()  *  1;	  final    double    d    =    divisor.getImaginary()    +    1;    	non-compiled	[CE]  not  a  statement	10	None	replace
8	[BUG]  [BUGGY]  final  double  c  =  divisor.getINF();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  c  =  divisor.getINF();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getINF();	      final    double    c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	1	None	replace
9	[BUG]  [BUGGY]  final  double  c  =  divisor.getComplex();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  c  =  divisor.getComplex();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getComplex();	      final    double    c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	1	None	replace
10	[BUG]  [BUGGY]  final  double  c  =  divisor.getRaw();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  c  =  divisor.getRaw();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getRaw();	      final    double    c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	2	None	replace
11	[BUG]  [BUGGY]  c  =  divisor.getCurrentReal();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  c  =  divisor.getCurrentReal();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	c  =  divisor.getCurrentReal();	      c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	3	None	replace
12	[BUG]  [BUGGY]  final  double  d  =  divisor.getDivisor()  +  1;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  d  =  divisor.getDivisor()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDivisor()  +  1;	  final    double    d    =    divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	7	None	replace
13	[BUG]  [BUGGY]  final  double  d  =  divisor.getDivisor()  -  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  d  =  divisor.getDivisor()  -  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDivisor()  -  1;	  final    double    d    =    divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	7	None	replace
14	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getConstructor();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getConstructor();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Constructor  <  Complex>  divisor  =  divisor.getConstructor();	      if(divisor!=    null)    {    final    double    c    =    divisor.getImaginary();    if(c    ==    0.0)    {    return    createComplex(c    /    c);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
15	[BUG]  [BUGGY]  Context.checkState(divisor!=  null);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  Context.checkState(divisor!=  null);  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Context.checkState(divisor!=  null);	      if(divisor!=    null)    {    final    double    c    =    divisor.getImaginary();    if(c    ==    0.0)    {    return    createComplex(c    /    c);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
16	[BUG]  [BUGGY]  c  =  divisor.getRaw();  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  c  =  divisor.getRaw();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	c  =  divisor.getRaw();	      c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	5	None	replace
17	[BUG]  [BUGGY]  double  real  =  divisor.getReal();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  double  real  =  divisor.getReal();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  real  =  divisor.getReal();	      double    real    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	9	None	replace
18	[BUG]  [BUGGY]  final  double  real  =  divisor.getImaginary();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  real  =  divisor.getImaginary();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  real  =  divisor.getImaginary();	      double    real    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	9	None	replace
19	[BUG]  [BUGGY]  double  real  =  divisor.getImaginary()  -  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  double  real  =  divisor.getImaginary()  -  1;  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  real  =  divisor.getImaginary()  -  1;	      double    real    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	9	None	replace
20	[BUG]  [BUGGY]  double  real  =  divisor.getINF();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  double  real  =  divisor.getINF();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	double  real  =  divisor.getINF();	      double    real    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	9	None	replace
21	[BUG]  [BUGGY]  final  double  c  =  divisor.getNaN();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  c  =  divisor.getNaN();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  c  =  divisor.getNaN();	      final    double    c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	2	None	replace
22	[BUG]  [BUGGY]  final  double  d  =  divisor.getINFDenominator();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  d  =  divisor.getINFDenominator();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getINFDenominator();	  final    double    d    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	8	None	replace
23	[BUG]  [BUGGY]  final  double  d  =  divisor.getDivisor(c);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  d  =  divisor.getDivisor(c);  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDivisor(c);	  final    double    d    =    divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	7	None	replace
24	[BUG]  [BUGGY]  c  =  divisor.getINF();  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  c  =  divisor.getINF();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	c  =  divisor.getINF();	      c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	5	None	replace
25	[BUG]  [BUGGY]  c  =  divisor.getNaN();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  c  =  divisor.getNaN();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	c  =  divisor.getNaN();	      c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	3	None	replace
26	[BUG]  [BUGGY]  Double  c  =  divisor.getReal();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  Double  c  =  divisor.getReal();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Double  c  =  divisor.getReal();	      double    c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	4	None	replace
27	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getDivisor();	      if(divisor!=    null)    {    final    double    c    =    divisor.getImaginary();    if(c    ==    0.0)    {    return    createComplex(c    /    c);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
28	[BUG]  [BUGGY]  final  double  d  =  divisor.getDiminator();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  d  =  divisor.getDiminator();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDiminator();	  final    double    d    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	8	None	replace
29	[BUG]  [BUGGY]  final  double  d  =  divisor.getDenimal();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  final  double  d  =  divisor.getDenimal();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	final  double  d  =  divisor.getDenimal();	  final    double    d    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	8	None	replace
30	[BUG]  [BUGGY]  Double  c  =  divisor.getImaginary();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();    [BUGGY]  Double  c  =  divisor.getImaginary();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	Double  c  =  divisor.getImaginary();	      double    c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	4	None	replace
