bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
2	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isZero()  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero()  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
3	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
4	[BUG]  [BUGGY]  ||  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  ||  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	||  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }	  ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
5	[BUG]  [BUGGY]  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }	  ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
6	[BUG]  [BUGGY]  ||  divisor.isNaN())  {  return  NaN  -  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  ||  divisor.isNaN())  {  return  NaN  -  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	||  divisor.isNaN())  {  return  NaN  -  NaN  :  INF;  }	  ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
7	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isNaN()    &&    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	24	None	replace
8	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isNaN()    &&    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
9	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor.isNaN())  {  return  NaN;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
10	[BUG]  [BUGGY]  if(divisor.isNaN())  {  if(divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN())  {  if(divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN())  {  if(divisor.isNaN())  {  return  NaN;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
11	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  if(divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  if(divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  if(divisor.isNaN())  {  return  NaN;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
12	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isZero())  {  if(divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isZero())  {  if(divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  ||  divisor.isZero())  {  if(divisor.isNaN())  {  return  NaN;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
13	[BUG]  [BUGGY]  if(divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN?  NaN  :  INF;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
14	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero()  ||  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN?  NaN  :  INF;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
15	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isZero())  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isZero())  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&  divisor.isZero())  {	  if(divisor.isZero()    &&    divisor.isZero())    {    	non-compiled	[CE]  ';'  expected	45	None	replace
16	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isZero())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  &&  divisor.isZero())  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  &&  divisor.isZero())  {	  if(divisor.isZero()    &&    divisor.isZero())    {    	non-compiled	[CE]  ';'  expected	45	None	replace
17	[BUG]  [BUGGY]  if(divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
18	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  ';'  expected	41	None	replace
19	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  ';'  expected	41	None	replace
20	[BUG]  [BUGGY]  if(d  ==  null)  {  if(d.isInfinite()  ||!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(d  ==  null)  {  if(d.isInfinite()  ||!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d  ==  null)  {  if(d.isInfinite()  ||!isInfinite())  {  return  ZERO;  }	  if(divisor    ==    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
21	[BUG]  [BUGGY]  ';'  expected  =  isNaN?  NaN  :  INF;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  ';'  expected  =  isNaN?  NaN  :  INF;  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	';'  expected  =  isNaN?  NaN  :  INF;	  if(divisor!=    null)    {    if(divisor.isNaN()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
22	[BUG]  [BUGGY]  ';'  expected  =  true;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  ';'  expected  =  true;  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	';'  expected  =  true;	  if(divisor!=    null)    {    if(divisor.isNaN()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
23	[BUG]  [BUGGY]  Context.checkState(d  ==  null);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(d  ==  null);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(d  ==  null);	  if(divisor!=    null)    {    if(divisor.isNaN()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
24	[BUG]  [BUGGY]  final  double  d  =  divisor.getInf();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  final  double  d  =  divisor.getInf();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	final  double  d  =  divisor.getInf();	  final    double    d    =    divisor.getINF();    	non-compiled	[CE]  ';'  expected	6	None	replace
25	[BUG]  [BUGGY]  final  double  d  =  divisor.getDivisor();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  final  double  d  =  divisor.getDivisor();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	final  double  d  =  divisor.getDivisor();	  final    double    d    =    divisor.getINF();    	non-compiled	[CE]  ';'  expected	6	None	replace
26	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isNaN());	  Context.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	61	None	replace
27	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isNaN());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isNaN()  &&  divisor.isNaN());	  Context.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	61	None	replace
28	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isNaN());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isZero()  ||  divisor.isNaN());	  Context.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	61	None	replace
29	[BUG]  [BUGGY]  if  (divisor.isZero()  &&  divisor.isNaN())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if  (divisor.isZero()  &&  divisor.isNaN())  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor.isZero()  &&  divisor.isNaN())  {	  if    (divisor.isZero()    &&    divisor.isInfinite())    {    	non-compiled	[CE]  ';'  expected	10	None	replace
30	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
31	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isZero()  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero()  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
32	[BUG]  [BUGGY]  if(d  ==  null)  {  if(divisor.isInfinite()  ||!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(d  ==  null)  {  if(divisor.isInfinite()  ||!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d  ==  null)  {  if(divisor.isInfinite()  ||!isInfinite())  {  return  ZERO;  }	  if(d    ==    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
33	[BUG]  [BUGGY]  if(d  ==  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(d  ==  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d  ==  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }	  if(d    ==    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
34	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
35	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
36	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isZero()  ||  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
37	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isZero()  ||  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isZero()  ||  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isZero()  ||  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
38	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
39	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
40	[BUG]  [BUGGY]  if(divisor.isZero())  {  if(isNaN  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isZero())  {  if(isNaN  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero())  {  if(isNaN  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }	  if(isNaN    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
41	[BUG]  [BUGGY]  if(divisor.isZero())  {  if(isNaN  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isZero())  {  if(isNaN  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero())  {  if(isNaN  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	  if(isNaN    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
42	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  Divisor.isNaN)  {  return  NaN  -  1;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  Divisor.isNaN)  {  return  NaN  -  1;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  Divisor.isNaN)  {  return  NaN  -  1;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    -    1;    }    	non-compiled	[CE]  ';'  expected	79	None	replace
43	[BUG]  [BUGGY]  if(d!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(d!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(d    ==    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
44	[BUG]  [BUGGY]  if(d  ==  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(d  ==  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d  ==  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }	  if(d    ==    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
45	[BUG]  [BUGGY]  if(d  ==  null)  {  if(divisor.isInfinite()  ||!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(d  ==  null)  {  if(divisor.isInfinite()  ||!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d  ==  null)  {  if(divisor.isInfinite()  ||!isInfinite())  {  return  NaN;  }	  if(d    ==    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
46	[BUG]  [BUGGY]  if(divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isZero)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isZero)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isZero)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isZero)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
47	[BUG]  [BUGGY]  if(divisor.isReal()  &&  divisor.isZero())  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isReal()  &&  divisor.isZero())  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isReal()  &&  divisor.isZero())  {	  if(divisor.isReal()    ||    divisor.isZero())    {    	non-compiled	[CE]  ';'  expected	18	None	replace
48	[BUG]  [BUGGY]  if(divisor.isReal()  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isReal()  ||  divisor.isNaN())  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isReal()  ||  divisor.isNaN())  {	  if(divisor.isReal()    ||    divisor.isZero())    {    	non-compiled	[CE]  ';'  expected	18	None	replace
49	[BUG]  [BUGGY]  if(divisor.isReal()  ||  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isReal()  ||  divisor.isInfinite())  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isReal()  ||  divisor.isInfinite())  {	  if(divisor.isReal()    ||    divisor.isZero())    {    	non-compiled	[CE]  ';'  expected	18	None	replace
50	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent  ==  null  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	  parent!=    null    &&    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
51	[BUG]  [BUGGY]  if  (divisor.isZero  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if  (divisor.isZero  ||  divisor.isNaN)  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor.isZero  ||  divisor.isNaN)  {	  if    (divisor.isZero    ||    divisor.isZero)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
52	[BUG]  [BUGGY]  if  (divisor.isInfinite()  ||  divisor.isZero)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if  (divisor.isInfinite()  ||  divisor.isZero)  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor.isInfinite()  ||  divisor.isZero)  {	  if    (divisor.isZero    ||    divisor.isZero)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
53	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor!=  null)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor!=  null)  {  return  NaN;  }	  if(divisor.isZero())    {    if(divisor!=    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
54	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor!=  null)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor!=  null)  {  return  NaN;  }	  if(divisor.isZero())    {    if(divisor!=    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
55	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor!=  null)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor!=  null)  {  return  NaN;  }	  if(divisor.isZero())    {    if(divisor!=    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
56	[BUG]  [BUGGY]  if(divisor.isNaN())  {  if(divisor!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN())  {  if(divisor!=  null)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN())  {  if(divisor!=  null)  {  return  NaN;  }	  if(divisor.isZero())    {    if(divisor!=    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
57	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  if(divisor!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  if(divisor!=  null)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  if(divisor!=  null)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
58	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  isInfinite())  {  if(divisor!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  isInfinite())  {  if(divisor!=  null)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&  isInfinite())  {  if(divisor!=  null)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
59	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
60	[BUG]  [BUGGY]  if(divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }	  if(divisor.isZero())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
61	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }	  if(divisor.isZero())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
62	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  isInfinite())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  isInfinite())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&  isInfinite())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }	  if(divisor.isZero())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
63	[BUG]  [BUGGY]  Parent!=  null  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Parent!=  null  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Parent!=  null  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  parent!=    null    &&    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
64	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)denominator.clone();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)denominator.clone();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MutableDenominator  divisor  =(MutableDenominator)denominator.clone();	  MutableDenominator    divisor    =(MutableDenominator)divisor.clone();    	non-compiled	[CE]  ';'  expected	59	None	replace
65	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisor.clone();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisor.clone();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MutableDenominator  divisor  =(MutableDenominator)this.divisor.clone();	  MutableDenominator    divisor    =(MutableDenominator)divisor.clone();    	non-compiled	[CE]  ';'  expected	59	None	replace
66	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkState(divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	40	None	replace
67	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(divisor.isInfinite());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkState(divisor.isInfinite());	  MathUtils.checkState(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	40	None	replace
68	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkState(divisor.isNaN(),  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	40	None	replace
69	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isInfinite()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
70	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor.isInfinite()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
71	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  ||  divisor.isInfinite())  {	  if(divisor.isNaN()    ||    divisor.isZero())    {    	non-compiled	[CE]  ';'  expected	15	None	replace
72	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  ||  divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent  ==  null  ||  divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  parent    ==    null    &&    divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
73	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent!=  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent!=  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  parent    ==    null    &&    divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
74	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent  ==  null  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  parent    ==    null    &&    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
75	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINFDenominator();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINFDenominator();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getINFDenominator();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	60	None	replace
76	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestinator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestinator();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDestinator();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	60	None	replace
77	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor    ==    null)    {    if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
78	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite())  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite())  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null  ||  divisor.isInfinite())  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor    ==    null)    {    if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
79	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isNaN()  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	25	None	replace
80	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isZero()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	25	None	replace
81	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null  ||  divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null    &&    divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
82	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null  &&  divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(divisor!=    null    &&    divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
83	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null  &&  divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }	  if(divisor!=    null    &&    divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	74	None	replace
84	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null  &&  divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null    &&    divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	74	None	replace
85	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.isInfinite()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	26	None	replace
86	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.isInfinite()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	26	None	replace
87	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null  ||  divisor.isNaN())  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	46	None	replace
88	[BUG]  [BUGGY]  if(divisor.isNaN())  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN())  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN())  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
89	[BUG]  [BUGGY]  if  (divisor.isZero()  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if  (divisor.isZero()  ||  divisor.isNaN)  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor.isZero()  ||  divisor.isNaN)  {	  if    (divisor.isZero()    ||    divisor.isZero)    {    	non-compiled	[CE]  ';'  expected	63	None	replace
90	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  ||  divisor.isNaN())  {	  if(divisor.isInfinite()    ||    divisor.isZero())    {    	non-compiled	[CE]  ';'  expected	17	None	replace
91	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getINFDenominator();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getINFDenominator();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getINFDenominator();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	44	None	replace
92	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getImaginary();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getImaginary();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getImaginary();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	44	None	replace
93	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkDenominator(divisor,  imaginary);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  ';'  expected	38	None	replace
94	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDigits(divisor);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkDigits(divisor);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  ';'  expected	38	None	replace
95	[BUG]  [BUGGY]  Context.checkState(d.isInfinite()  ||  d.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(d.isInfinite()  ||  d.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(d.isInfinite()  ||  d.isInfinite())  {  return  NaN;  }	  if(d    ==    null)    {    if(d.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
96	[BUG]  [BUGGY]  if(d.isInfinite()  ||!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(d.isInfinite()  ||!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d.isInfinite()  ||!isInfinite())  {  return  NaN;  }	  if(d    ==    null)    {    if(d.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
97	[BUG]  [BUGGY]  if(d.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(d.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(d    ==    null)    {    if(d.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
98	[BUG]  [BUGGY]  Context.checkState(d.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(d.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(d.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(d    ==    null)    {    if(d.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
99	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
100	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ZERO;  }	  if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
101	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  ||!isInfinite())  {  return  ZERO;  }	  if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
102	[BUG]  [BUGGY]  if  (divisor!=  null  ||  divisor.isZero())  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if  (divisor!=  null  ||  divisor.isZero())  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor!=  null  ||  divisor.isZero())  {	  if    (divisor    ==    null    ||    divisor.isZero())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
103	[BUG]  [BUGGY]  if  (divisor  ==  null  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if  (divisor  ==  null  ||  divisor.isNaN())  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor  ==  null  ||  divisor.isNaN())  {	  if    (divisor    ==    null    ||    divisor.isZero())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
104	[BUG]  [BUGGY]  MathUtils.checkState(divisor  ==  null);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(divisor  ==  null);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkState(divisor  ==  null);	  MathUtils.checkState(divisor!=    null);    	non-compiled	[CE]  ';'  expected	39	None	replace
105	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor!=  null);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDenominator(divisor!=  null);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkDenominator(divisor!=  null);	  MathUtils.checkState(divisor!=    null);    	non-compiled	[CE]  ';'  expected	39	None	replace
106	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  ||!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
107	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isZero())  {  return  NaN;  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  	76	None	replace
108	[BUG]  [BUGGY]  if(divisor.isNaN  ||  divisor.isZero())  {  return  NaN;  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  	76	None	replace
109	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isNaN();  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent!=  null  &&  divisor.isNaN();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent!=  null  &&  divisor.isNaN();	  parent    ==    null    &&    divisor.isNaN();    	non-compiled	[CE]  	67	None	replace
110	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isZero())  {  if(divisor!=  null)  {  return  NaN;  }  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isZero())  {  if(divisor!=  null)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  ||  divisor.isZero())  {  if(divisor!=  null)  {  return  NaN;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor!=    null)    {    return    NaN;    }    	non-compiled	[CE]  	1	None	replace
111	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    &&    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  	27	None	replace
112	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isNaN());  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN());    	non-compiled	[CE]  	49	None	replace
113	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isNaN());  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isNaN());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN());    	non-compiled	[CE]  	49	None	replace
114	[BUG]  [BUGGY]  if  (divisor.isInfinite()  ||  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if  (divisor.isInfinite()  ||  divisor.isInfinite())  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor.isInfinite()  ||  divisor.isInfinite())  {	  if    (divisor.isInfinite()    &&    divisor.isInfinite())    {    	non-compiled	[CE]  ';'  expected	11	None	replace
115	[BUG]  [BUGGY]  if(d.isInfinite()  ||!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(d.isInfinite()  ||!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d.isInfinite()  ||!isInfinite())  {  return  ZERO;  }	  if(d    ==    null)    {    if(d.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
116	[BUG]  [BUGGY]  Context.checkState(d.isInfinite()  ||  d.isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(d.isInfinite()  ||  d.isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(d.isInfinite()  ||  d.isInfinite())  {  return  ZERO;  }	  if(d    ==    null)    {    if(d.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
117	[BUG]  [BUGGY]  Context.checkState(d.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(d.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(d.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(d    ==    null)    {    if(d.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
118	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  ONE;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  return  ONE;  }	  if(divisor    ==    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
119	[BUG]  [BUGGY]  final  double  d  =  divisor.getINFDenominator();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  final  double  d  =  divisor.getINFDenominator();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	final  double  d  =  divisor.getINFDenominator();	  final    double    d    =    divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	5	None	replace
120	[BUG]  [BUGGY]  if(d  ==  null)  {  if(d.isInfinite()  ||!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(d  ==  null)  {  if(d.isInfinite()  ||!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d  ==  null)  {  if(d.isInfinite()  ||!isInfinite())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
121	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isInfinite());	  if(divisor.isNaN)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
122	[BUG]  [BUGGY]  Context.checkState(divisor!=  null);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor!=  null);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor!=  null);	  if(divisor.isNaN)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
123	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isNaN());	  if(divisor.isNaN)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
124	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(divisor.isInfinite()    &&    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
125	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor.isInfinite())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
126	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor.isInfinite())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
127	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN?  NaN  :  INF;  }	  if(divisor.isInfinite())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
128	[BUG]  [BUGGY]  Context.checkInfinite(divisor);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkInfinite(divisor);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkInfinite(divisor);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	43	None	replace
129	[BUG]  [BUGGY]  Context.checkState(divisor  ==  null);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor  ==  null);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor  ==  null);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	43	None	replace
130	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }	  if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
131	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  ONE;  }	  if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
132	[BUG]  [BUGGY]  if(divisor.isReal()  &&  divisor.isInfinite())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isReal()  &&  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isReal()  &&  divisor.isInfinite())  {  return  ONE;  }	  if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
133	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  ONE;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  ONE;  }	  if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
134	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getINF();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getINF();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getINF();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDivisor();    	non-compiled	[CE]  ';'  expected	42	None	replace
135	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {	  if    (divisor.isNaN())    {    	non-compiled	[CE]  	36	None	replace
136	[BUG]  [BUGGY]  ||  divisor.isZero())  {  return  isNaN?  NaN  :  INF;  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  ||  divisor.isZero())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	||  divisor.isZero())  {  return  isNaN?  NaN  :  INF;  }	  ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  	8	None	replace
137	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor    ==    null)    {    if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
138	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
139	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN())  {  return  NaN;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
140	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
141	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
142	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
143	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
144	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isInfinite());	  Context.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	61	None	replace
145	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(isNaN  ||  divisor.isNaN())  {  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor    ==    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
146	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN(),  divisor.isNaN());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isNaN(),  divisor.isNaN());	  if(divisor.isNaN()    &&    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	24	None	replace
147	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isZero())  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isZero())  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isZero())  {	  if(divisor.isNaN()    ||    divisor.isZero())    {    	non-compiled	[CE]  ';'  expected	15	None	replace
148	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.cloneTree();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.cloneTree();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.cloneTree();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDivisor();    	non-compiled	[CE]  ';'  expected	42	None	replace
149	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor(0);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor(0);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor(0);	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDivisor();    	non-compiled	[CE]  ';'  expected	42	None	replace
150	[BUG]  [BUGGY]  Neighbor  <  ARRAY>  divisor  =  getDenominator(real);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Neighbor  <  ARRAY>  divisor  =  getDenominator(real);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Neighbor  <  ARRAY>  divisor  =  getDenominator(real);	  if(d    ==    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
151	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
152	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.denominator.clone();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.denominator.clone();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MutableDenominator  divisor  =(MutableDenominator)this.denominator.clone();	  MutableDenominator    divisor    =(MutableDenominator)divisor.clone();    	non-compiled	[CE]  ';'  expected	59	None	replace
153	[BUG]  [BUGGY]  Context.checkNotNull(divisor,  imaginary);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkNotNull(divisor,  imaginary);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkNotNull(divisor,  imaginary);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	43	None	replace
154	[BUG]  [BUGGY]  Context.checkArgument(divisor!=  null);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkArgument(divisor!=  null);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkArgument(divisor!=  null);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	43	None	replace
155	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(isNaN    ||    divisor.isNaN())    {    if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
156	[BUG]  [BUGGY]  if(isInfinite)  {  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(isInfinite)  {  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(isNaN    ||    divisor.isNaN())    {    if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
157	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  real);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDenominator(divisor,  real);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkDenominator(divisor,  real);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  not  a  statement	38	None	replace
158	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  c);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDenominator(divisor,  c);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkDenominator(divisor,  c);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  not  a  statement	38	None	replace
159	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkDenominator(divisor.getDenominator());	  MathUtils.checkState(divisor.isNaN());    	non-compiled	[CE]  not  a  statement	40	None	replace
160	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isNaN();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  ||  divisor.isNaN();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent  ==  null  ||  divisor.isNaN();	  parent    ==    null    &&    divisor.isNaN();    	non-compiled	[CE]  not  a  statement	67	None	replace
161	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null    &&    divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	74	None	replace
162	[BUG]  [BUGGY]  if(divisor  ==  null  &&  divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null  &&  divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null  &&  divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null    &&    divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	74	None	replace
163	[BUG]  [BUGGY]  if(divisor!=  null)  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  return  isNaN?  NaN  :  INF;  }	  if(isNaN    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	72	None	replace
164	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
165	[BUG]  [BUGGY]  Context.checkState(d.isInfinite());  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(d.isInfinite());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(d.isInfinite());	  if(d    ==    null)    {    if(d.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	33	None	replace
166	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor    ==    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	73	None	replace
167	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  return  INF;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  return  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent  ==  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  return  INF;  }	  parent    ==    null    &&    divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
168	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  -  INF;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  -  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  -  INF;  }	  if(divisor.isZero())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
169	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  1;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  1;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  1;  }	  if(divisor.isZero())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
170	[BUG]  [BUGGY]  Neighbor  <  ARRAY>  divisor  =  getDenominator(divisor);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Neighbor  <  ARRAY>  divisor  =  getDenominator(divisor);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Neighbor  <  ARRAY>  divisor  =  getDenominator(divisor);	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
171	[BUG]  [BUGGY]  NeighborDivisor  divisor  =  getDenominator(divisor);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =  getDenominator(divisor);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	NeighborDivisor  divisor  =  getDenominator(divisor);	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
172	[BUG]  [BUGGY]  final  double  d  =  divisor.getDenominator()  +  1;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  final  double  d  =  divisor.getDenominator()  +  1;  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	final  double  d  =  divisor.getDenominator()  +  1;	  final    double    d    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	5	None	replace
173	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
174	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
175	[BUG]  [BUGGY]  if(d.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(d.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d.isInfinite())  {  return  isNaN?  NaN  :  INF;  }	  if(d    ==    null)    {    if(d.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
176	[BUG]  [BUGGY]  final  double  d  =  divisor.getNaN();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  final  double  d  =  divisor.getNaN();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	final  double  d  =  divisor.getNaN();	  final    double    d    =    divisor.getINF();    	non-compiled	[CE]  ';'  expected	6	None	replace
177	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  -  1;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  -  1;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  -  1;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    -    1;    }    	non-compiled	[CE]  ';'  expected	79	None	replace
178	[BUG]  [BUGGY]  MutableDenominator  divisor  =  divisor.getImaginary();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =  divisor.getImaginary();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MutableDenominator  divisor  =  divisor.getImaginary();	  if(divisor.isZero())    {    if(divisor!=    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
179	[BUG]  [BUGGY]  static  final  double  d  =  divisor.getImaginary();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  static  final  double  d  =  divisor.getImaginary();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	static  final  double  d  =  divisor.getImaginary();	  final    double    d    =    divisor.getImaginary()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
180	[BUG]  [BUGGY]  if(divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN())  {  return  NaN;  }	  if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
181	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor.isInfinite()    &&    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
182	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  ZERO;  }	  if(divisor.isInfinite()    &&    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
183	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(isNaN  ||  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor.isInfinite())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
184	[BUG]  [BUGGY]  if(divisor.isZero()  &&  divisor.isZero())  {  if(divisor!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isZero()  &&  divisor.isZero())  {  if(divisor!=  null)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero()  &&  divisor.isZero())  {  if(divisor!=  null)  {  return  NaN;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor!=    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
185	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
186	[BUG]  [BUGGY]  Parent!=  null  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Parent!=  null  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Parent!=  null  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	  parent!=    null    &&    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
187	[BUG]  [BUGGY]  Neighbor  <  K,  V>  divisor  =  getDivisor(divisor);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Neighbor  <  K,  V>  divisor  =  getDivisor(divisor);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Neighbor  <  K,  V>  divisor  =  getDivisor(divisor);	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
188	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  ||!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
189	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
190	[BUG]  [BUGGY]  if(divisor.isNaN  ||  divisor.isNaN)  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN  ||  divisor.isNaN)  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN  ||  divisor.isNaN)  {  return  isNaN?  NaN  :  INF;  }	  if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
191	[BUG]  [BUGGY]  if(divisor.isNaN  ||  divisor.isNaN)  {  return  INF;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN  ||  divisor.isNaN)  {  return  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN  ||  divisor.isNaN)  {  return  INF;  }	  if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
192	[BUG]  [BUGGY]  if  (divisor!=  null  ||  divisor.isZero)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if  (divisor!=  null  ||  divisor.isZero)  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor!=  null  ||  divisor.isZero)  {	  if    (divisor    ==    null    ||    divisor.isZero)    {    	non-compiled	[CE]  ';'  expected	64	None	replace
193	[BUG]  [BUGGY]  Magimizer.checkNotNull(divisor);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Magimizer.checkNotNull(divisor);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Magimizer.checkNotNull(divisor);	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
194	[BUG]  [BUGGY]  Context.checkState(divisor.isZero());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isZero());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isZero());	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
195	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(isNaN  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }	  if(isNaN    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
196	[BUG]  [BUGGY]  if(divisor.isZero())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isZero())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero())  {  return  isNaN?  NaN  :  INF;  }	  if(isNaN    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
197	[BUG]  [BUGGY]  if(divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  -  1;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  -  1;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  -  1;  }	  if(divisor.isZero())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
198	[BUG]  [BUGGY]  if(d.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(d.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(d    ==    null)    {    if(d.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
199	[BUG]  [BUGGY]  if(d.isZero()  &&!isZero())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(d.isZero()  &&!isZero())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d.isZero()  &&!isZero())  {  return  ZERO;  }	  if(d    ==    null)    {    if(d.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
200	[BUG]  [BUGGY]  MathUtils.checkDivisor(divisor!=  null);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDivisor(divisor!=  null);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkDivisor(divisor!=  null);	  MathUtils.checkState(divisor!=    null);    	non-compiled	[CE]  ';'  expected	39	None	replace
201	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
202	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
203	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null  &&  divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
204	[BUG]  [BUGGY]  if(divisor!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  return  NaN;  }	  if(divisor.isZero())    {    if(divisor!=    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
205	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isZero())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent  ==  null  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor.isZero())    {    if(divisor!=    null)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
206	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isZero())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isZero())  {  return  NaN;  }	  if(divisor.isZero())    {    if(divisor!=    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
207	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent  ==  null  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	75	None	replace
208	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent  ==  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	75	None	replace
209	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
210	[BUG]  [BUGGY]  Context.checkInfinite(divisor.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkInfinite(divisor.isNaN(),  divisor.isNaN());  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkInfinite(divisor.isNaN(),  divisor.isNaN());	  if(divisor.isNaN()    &&    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	24	None	replace
211	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
212	[BUG]  [BUGGY]  if(divisor.isZero()  &&  divisor.isInfinite())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isZero()  &&  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero()  &&  divisor.isInfinite())  {  return  ONE;  }	  if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
213	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
214	[BUG]  [BUGGY]  Context.checkContentsNotNull(divisor);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkContentsNotNull(divisor);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkContentsNotNull(divisor);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	43	None	replace
215	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isNaN())  {  return  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent!=  null  &&  divisor.isNaN())  {  return  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent!=  null  &&  divisor.isNaN())  {  return  NaN  :  INF;  }	  if(divisor.isNaN)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
216	[BUG]  [BUGGY]  Annotations.checkNotNull(divisor);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Annotations.checkNotNull(divisor);  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Annotations.checkNotNull(divisor);	  if(divisor.isNaN)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
217	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN?  NaN  :  INF;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
218	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  return  NaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent  ==  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  return  NaN?  NaN  :  INF;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	80	None	replace
219	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent  ==  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
220	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN()  ||  divisor.isZero())  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN()  ||  divisor.isZero())  {  [BUGGY]        return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null  &&  divisor.isNaN()  ||  divisor.isZero())  {	  if(divisor.isNaN()    ||    divisor.isZero())    {    	non-compiled	[CE]  ';'  expected	15	None	replace
221	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isZero)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isZero)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isZero)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isZero)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
222	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isNaN  ||  divisor.isZero())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  &&  divisor.isNaN  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent  ==  null  &&  divisor.isNaN  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isZero)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	69	None	replace
223	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isNaN  ||  divisor.isZero)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  &&  divisor.isNaN  ||  divisor.isZero)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent  ==  null  &&  divisor.isNaN  ||  divisor.isZero)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isZero)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	69	None	replace
224	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
225	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
226	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
227	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isZero())  {  if(divisor!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null  ||  divisor.isZero())  {  if(divisor!=  null)  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null  ||  divisor.isZero())  {  if(divisor!=  null)  {  return  NaN;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    if(divisor!=    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
228	[BUG]  [BUGGY]  if(divisor.isZero()  &&!isZero())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isZero()  &&!isZero())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero()  &&!isZero())  {  return  ZERO;  }	  if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
229	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  isZero?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  isZero?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  return  isZero?  NaN  :  INF;  }	  if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
230	[BUG]  [BUGGY]  if(divisor  ==  null  &&  divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null  &&  divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null  &&  divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null    &&    divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
231	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)return  NaN  -  1;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)return  NaN  -  1;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)return  NaN  -  1;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    -    1;    }    	non-compiled	[CE]  ';'  expected	79	None	replace
232	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent!=  null  &&  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent!=  null  &&  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor.isInfinite())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	55	None	replace
233	[BUG]  [BUGGY]  if(d.isZero()  &&!isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(d.isZero()  &&!isZero())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d.isZero()  &&!isZero())  {  return  NaN;  }	  if(d    ==    null)    {    if(d.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
234	[BUG]  [BUGGY]  if(d.isZero()  &&  isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(d.isZero()  &&  isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d.isZero()  &&  isInfinite())  {  return  NaN;  }	  if(d    ==    null)    {    if(d.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
235	[BUG]  [BUGGY]  Parent  <?>  parent!=  null  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Parent  <?>  parent!=  null  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Parent  <?>  parent!=  null  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	  parent!=    null    &&    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
236	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
237	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINF();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINF();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getINF();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	60	None	replace
238	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDiminator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDiminator();  [BUGGY]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDiminator();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	60	None	replace
