bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  if(divisor!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  if(divisor!=  null)  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero()  ||  divisor.isZero())  {  if(divisor!=  null)  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
2	[BUG]  [BUGGY]  if(divisor.isZero())  {  if(divisor!=  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isZero())  {  if(divisor!=  null)  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero())  {  if(divisor!=  null)  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
3	[BUG]  [BUGGY]  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
4	[BUG]  [BUGGY]  final  double  d  =  divisor.getReal();  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  final  double  d  =  divisor.getReal();  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	final  double  d  =  divisor.getReal();	      final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  ';'  expected	5	None	replace
5	[BUG]  [BUGGY]  final  double  d  =  divisor.getDenominator();  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  final  double  d  =  divisor.getDenominator();  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	final  double  d  =  divisor.getDenominator();	      final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  ';'  expected	5	None	replace
6	[BUG]  [BUGGY]  final  double  d  =  divisor.getINF();  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  final  double  d  =  divisor.getINF();  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	final  double  d  =  divisor.getINF();	      final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  ';'  expected	5	None	replace
7	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	      if(divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
8	[BUG]  [BUGGY]  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	      if(divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
9	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  parent!=  null  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent!=  null  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	      if(divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
10	[BUG]  [BUGGY]  if  (divisor.isZero()  &&  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if  (divisor.isZero()  &&  divisor.isInfinite())  {  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor.isZero()  &&  divisor.isInfinite())  {	  if    (divisor.isZero()    ||    divisor.isInfinite())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
11	[BUG]  [BUGGY]  if  (divisor.isInfinite()  &&  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if  (divisor.isInfinite()  &&  divisor.isInfinite())  {  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor.isInfinite()  &&  divisor.isInfinite())  {	  if    (divisor.isZero()    ||    divisor.isInfinite())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
12	[BUG]  [BUGGY]  if(divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
13	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [CE]  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero()  ||  divisor.isZero())  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  	9	None	replace
14	[BUG]  [BUGGY]  if(divisor.isNaN)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [CE]  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isNaN)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  	9	None	replace
15	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isZero())  {  [CE]  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isNaN()  ||  divisor.isZero())  {  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  ||  divisor.isZero())  {	  if(divisor.isZero()    ||    divisor.isZero())    {    	non-compiled	[CE]  	13	None	replace
16	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isNaN())  {  [CE]  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isZero()  ||  divisor.isNaN())  {  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero()  ||  divisor.isNaN())  {	  if(divisor.isZero()    ||    divisor.isZero())    {    	non-compiled	[CE]  	13	None	replace
17	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isZero())  {  [CE]  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isInfinite()  ||  divisor.isZero())  {  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  ||  divisor.isZero())  {	  if(divisor.isZero()    ||    divisor.isZero())    {    	non-compiled	[CE]  	13	None	replace
18	[BUG]  [BUGGY]  if(divisor.isReal()  ||  divisor.isZero())  {  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isReal()  ||  divisor.isZero())  {  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isReal()  ||  divisor.isZero())  {	  if(divisor.isZero()    ||    divisor.isZero())    {    	non-compiled	[CE]  ';'  expected	13	None	replace
19	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
20	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
21	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
22	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
23	[BUG]  [BUGGY]  if  (divisor.isZero  ||  divisor.isZero)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if  (divisor.isZero  ||  divisor.isZero)  {  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor.isZero  ||  divisor.isZero)  {	  if    (divisor.isNaN    ||    divisor.isZero)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
24	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
25	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
26	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
27	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }	      if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
28	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }	      if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
29	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }	      if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
30	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
31	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
32	[BUG]  [BUGGY]  if(d  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(d  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
33	[BUG]  [BUGGY]  if(d  ==  null)  {  if(d.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(d  ==  null)  {  if(d.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d  ==  null)  {  if(d.isInfinite()  &&!isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
34	[BUG]  [BUGGY]  if(d  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(d  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
35	[BUG]  [BUGGY]  if(d  ==  null)  {  if(d.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(d  ==  null)  {  if(d.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(d  ==  null)  {  if(d.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
36	[BUG]  [BUGGY]  if  (divisor.isNaN())  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if  (divisor.isNaN())  {  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor.isNaN())  {	  if    (divisor.isZero())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
37	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  if(divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  if(divisor.isNaN())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero()  ||  divisor.isZero())  {  if(divisor.isNaN())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
38	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  MathUtils.checkDenominator(divisor);  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkDenominator(divisor);	      MathUtils.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	4	None	replace
39	[BUG]  [BUGGY]  MathUtils.checkState(divisor!=  null);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  MathUtils.checkState(divisor!=  null);  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkState(divisor!=  null);	      MathUtils.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	4	None	replace
40	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  MathUtils.checkState(divisor.isNaN());  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkState(divisor.isNaN());	      MathUtils.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	4	None	replace
41	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.clone();  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.clone();  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.clone();	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
42	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor();  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor();  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor();	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
43	[BUG]  [BUGGY]  Context.checkNotNull(divisor);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  Context.checkNotNull(divisor);  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkNotNull(divisor);	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
44	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDenominator();  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDenominator();  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDenominator();	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
45	[BUG]  [BUGGY]  if(divisor.isZero()  &&  divisor.isZero())  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isZero()  &&  divisor.isZero())  {  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero()  &&  divisor.isZero())  {	  if(divisor.isZero()    ||    divisor.isZero())    {    	non-compiled	[CE]  ';'  expected	13	None	replace
46	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	      if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
47	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  NaN;  }	      if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
48	[BUG]  [BUGGY]  if(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN;  }	      if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
49	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN());  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  MathUtils.checkArgument(divisor.isNaN());  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MathUtils.checkArgument(divisor.isNaN());	      MathUtils.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	4	None	replace
50	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
51	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(isNaN  ||  divisor.isNaN())  {  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
52	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
53	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
54	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
55	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }	      if(divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
56	[BUG]  [BUGGY]  final  double  d  =  divisor.getImaginary()  +  1;  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  final  double  d  =  divisor.getImaginary()  +  1;  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	final  double  d  =  divisor.getImaginary()  +  1;	      final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  ';'  expected	5	None	replace
57	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
58	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
59	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.clone();  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.clone();  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.clone();	      if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
60	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDenominator();  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDenominator();  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDenominator();	      if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
61	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isNaN());	      if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
62	[BUG]  [BUGGY]  if  (divisor  ==  null  ||  divisor.isZero())  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if  (divisor  ==  null  ||  divisor.isZero())  {  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor  ==  null  ||  divisor.isZero())  {	  if    (divisor.isNaN    ||    divisor.isZero)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
63	[BUG]  [BUGGY]  if  (divisor.isZero()  ||  divisor.isZero)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if  (divisor.isZero()  ||  divisor.isZero)  {  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor.isZero()  ||  divisor.isZero)  {	  if    (divisor.isNaN    ||    divisor.isZero)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
64	[BUG]  [BUGGY]  if  (divisor  ==  null  ||  divisor.isZero)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if  (divisor  ==  null  ||  divisor.isZero)  {  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor  ==  null  ||  divisor.isZero)  {	  if    (divisor.isNaN    ||    divisor.isZero)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
65	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  parent!=  null  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent!=  null  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
66	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  parent  ==  null  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent  ==  null  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
67	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isNaN();  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  parent  ==  null  &&  divisor.isNaN();  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent  ==  null  &&  divisor.isNaN();	      if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
68	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
69	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isZero)  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isZero)  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isZero)  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
70	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  parent  ==  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	parent  ==  null  &&  divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
71	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
72	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(isNaN  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	      if(divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
73	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
74	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null  &&  divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
75	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
76	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isZero())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
77	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
78	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
79	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  -  1;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  -  1;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  -  1;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
80	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN?  NaN  :  INF;  }  [BUGGY]    if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN?  NaN  :  INF;  }	      if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
