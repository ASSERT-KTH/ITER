bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if(divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	    if(divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  ';'  expected	8	None	add
2	[BUG]  [BUGGY]    if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	    if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }		non-compiled	[CE]  ';'  expected	8	None	add
3	[BUG]  [BUGGY]    if(divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if(divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	    if(divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }		non-compiled	[CE]  ';'  expected	8	None	add
4	[BUG]  [BUGGY]    MathUtils.checkNotNull(divisor);  [CE]  ';'  expected  [FE]          AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    MathUtils.checkNotNull(divisor);  [BUGGY]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	    MathUtils.checkNotNull(divisor);		non-compiled	[CE]  ';'  expected	8	None	add
5	[BUG]  [BUGGY]    final  double  d  =  divisor.getImaginary();  [CE]  ';'  expected  [FE]            AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    final  double  d  =  divisor.getImaginary();  [BUGGY]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	    final  double  d  =  divisor.getImaginary();		non-compiled	[CE]  ';'  expected	8	None	add
6	[BUG]  [BUGGY]  if  (divisor.isZero())  {  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]  if  (divisor.isZero())  {  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor.isZero())  {	if  (divisor.isZero)  {  	non-compiled	[CE]  ';'  expected	7	None	replace
7	[BUG]  [BUGGY]  if  (divisor.isZero()  ||  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]  if  (divisor.isZero()  ||  divisor.isInfinite())  {  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor.isZero()  ||  divisor.isInfinite())  {	if  (divisor.isZero)  {  	non-compiled	[CE]  ';'  expected	7	None	replace
8	[BUG]  [BUGGY]    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }		non-compiled	[CE]  ';'  expected	8	None	add
9	[BUG]  [BUGGY]    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }  [BUGGY]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN  :  INF;  }		non-compiled	[CE]  ';'  expected	8	None	add
10	[BUG]  [BUGGY]    if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	    if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }		non-compiled	[CE]  ';'  expected	8	None	add
11	[BUG]  [BUGGY]    if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }  [CE]  ';'  expected  [FE]          AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	    if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }		non-compiled	[CE]  ';'  expected	8	None	add
12	[BUG]  [BUGGY]  if  (divisor.isNaN  ||  divisor.isZero)  {  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]  if  (divisor.isNaN  ||  divisor.isZero)  {  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if  (divisor.isNaN  ||  divisor.isZero)  {	if  (divisor.isZero)  {  	non-compiled	[CE]  ';'  expected	7	None	replace
13	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	if(divisor.isZero()  ||  divisor.isZero())  {	if  (divisor.isZero)  {  	non-compiled	[CE]  ';'  expected	7	None	replace
14	[BUG]  [BUGGY]    if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	    if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }		non-compiled	[CE]  ';'  expected	8	None	add
15	[BUG]  [BUGGY]    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	    if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }		non-compiled	[CE]  ';'  expected	8	None	add
