bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Real  real  =  isNaN?  Math.abs(imaginary):  Math.abs(real);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  Math.abs(imaginary):  Math.abs(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Math.abs(imaginary):  Math.abs(real);	  Real    real    =    isNaN?    Math.abs(real):    Math.abs(real);    	non-compiled	[CE]  not  a  statement	78	None	replace
2	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	  Real    real    =    isInfinite()?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	21	None	replace
3	[BUG]  [BUGGY]  Real  real  =  isNaN?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	  Real    real    =    isInfinite()?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	21	None	replace
4	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  &  Double.POSITIVE_INFINITY  /  2.0;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  &  Double.POSITIVE_INFINITY  /  2.0;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  &  Double.POSITIVE_INFINITY  /  2.0;	  return    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INFINITY    /    2.0;    	non-compiled	[CE]  not  a  statement	26	None	replace
5	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  -  Double.POSITIVE_INFINITY  /  2.0;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  -  Double.POSITIVE_INFINITY  /  2.0;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  -  Double.POSITIVE_INFINITY  /  2.0;	  return    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INFINITY    /    2.0;    	non-compiled	[CE]  not  a  statement	26	None	replace
6	[BUG]  [BUGGY]  return  Infinite.POSITIVE_INFINITY  /  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Infinite.POSITIVE_INFINITY  /  1;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.POSITIVE_INFINITY  /  1;	  return    Infinite.POSITIVE_INFINITY    +    1;    	non-compiled	[CE]  not  a  statement	6	None	replace
7	[BUG]  [BUGGY]  return  Infinite.POSITIVE_INFINITY  +  2;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Infinite.POSITIVE_INFINITY  +  2;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.POSITIVE_INFINITY  +  2;	  return    Infinite.POSITIVE_INFINITY    +    1;    	non-compiled	[CE]  not  a  statement	6	None	replace
8	[BUG]  [BUGGY]  Real  real  =  getNaN()  -  1;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getNaN()  -  1;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getNaN()  -  1;	  Real    real    =    getInfinite()    -    1;    	non-compiled	[CE]  not  a  statement	53	None	replace
9	[BUG]  [BUGGY]  Real  real  =  getFastMath()  -  1;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getFastMath()  -  1;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getFastMath()  -  1;	  Real    real    =    getInfinite()    -    1;    	non-compiled	[CE]  not  a  statement	53	None	replace
10	[BUG]  [BUGGY]  Real  real  =  getFunctionInfinite()  -  1;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getFunctionInfinite()  -  1;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getFunctionInfinite()  -  1;	  Real    real    =    getInfinite()    -    1;    	non-compiled	[CE]  not  a  statement	53	None	replace
11	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.valueOf(imaginary):  Infinite.valueOf(imaginary);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.valueOf(imaginary):  Infinite.valueOf(imaginary);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.valueOf(imaginary):  Infinite.valueOf(imaginary);	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.valueOf(real):    Infinite.valueOf(imaginary);    	non-compiled	[CE]  not  a  statement	65	None	replace
12	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.valueOf(imaginary);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.valueOf(imaginary);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.valueOf(imaginary);	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.valueOf(real):    Infinite.valueOf(imaginary);    	non-compiled	[CE]  not  a  statement	65	None	replace
13	[BUG]  [BUGGY]  double  real  =  real?  NaN.doubleValue()  :  Integer.parseInt(imaginary);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  real?  NaN.doubleValue()  :  Integer.parseInt(imaginary);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  real?  NaN.doubleValue()  :  Integer.parseInt(imaginary);	  double    real    =    real?    NaN.doubleValue()    :    Integer.parseInt(real);    	non-compiled	[CE]  not  a  statement	77	None	replace
14	[BUG]  [BUGGY]  Real  real  =  isNaN?  Double.NaN  :  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  Double.NaN  :  Double.POSITIVE_INFINITY;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Double.NaN  :  Double.POSITIVE_INFINITY;	  Real    real    =    isInfinite()?    Double.NaN    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	20	None	replace
15	[BUG]  [BUGGY]  Real  real  =  isZero()?  Double.NaN  :  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isZero()?  Double.NaN  :  Double.POSITIVE_INFINITY;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Double.NaN  :  Double.POSITIVE_INFINITY;	  Real    real    =    isInfinite()?    Double.NaN    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	20	None	replace
16	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Double.NaN  :  Double.INFINITY;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isInfinite()?  Double.NaN  :  Double.INFINITY;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Double.NaN  :  Double.INFINITY;	  Real    real    =    isInfinite()?    Double.NaN    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	20	None	replace
17	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Math.abs(imaginary):  Math.abs(real);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Math.abs(imaginary):  Math.abs(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Math.abs(imaginary):  Math.abs(real);	  Real    real    =    isNaN()?    Math.abs(real):    Math.abs(real);    	non-compiled	[CE]  not  a  statement	42	None	replace
18	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Math.abs(imaginary):  Math.abs(real);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isInfinite()?  Math.abs(imaginary):  Math.abs(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Math.abs(imaginary):  Math.abs(real);	  Real    real    =    isNaN()?    Math.abs(real):    Math.abs(real);    	non-compiled	[CE]  not  a  statement	42	None	replace
19	[BUG]  [BUGGY]  return  Infinite.NaN  -  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Infinite.NaN  -  1;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.NaN  -  1;	  return    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	4	None	replace
20	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Math.sin(imaginary):  Math.abs(imaginary);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Math.sin(imaginary):  Math.abs(imaginary);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Math.sin(imaginary):  Math.abs(imaginary);	  Real    real    =    isNaN()?    Math.abs(imaginary):    Math.abs(imaginary);    	non-compiled	[CE]  not  a  statement	16	None	replace
21	[BUG]  [BUGGY]  Real  real  =  isNaN?  Math.abs(real):  Infinite.NaN;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  Math.abs(real):  Infinite.NaN;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Math.abs(real):  Infinite.NaN;	  Real    real    =    isInfinite?    Math.abs(real):    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	12	None	replace
22	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.INFINITY  :  NaN.getZero();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.INFINITY  :  NaN.getZero();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.INFINITY  :  NaN.getZero();	  Real    real    =    isNaN?    NaN.INFINITY    :    NaN.getInfinite();    	non-compiled	[CE]  not  a  statement	57	None	replace
23	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.INFINITY  :  NaN.infinite();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.INFINITY  :  NaN.infinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.INFINITY  :  NaN.infinite();	  Real    real    =    isNaN?    NaN.INFINITY    :    NaN.getInfinite();    	non-compiled	[CE]  not  a  statement	57	None	replace
24	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  :  isNaN?  Infinite.NaN  :  Infinite.Zero;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  :  isNaN?  Infinite.NaN  :  Infinite.Zero;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  :  isNaN?  Infinite.NaN  :  Infinite.Zero;	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.NaN    :    Infinite.Zero;    	non-compiled	[CE]  not  a  statement	34	None	replace
25	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Infinite.POSITIVE_INFINITY  :  Infinite.ZERO;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Infinite.POSITIVE_INFINITY  :  Infinite.ZERO;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Infinite.POSITIVE_INFINITY  :  Infinite.ZERO;	  Real    real    =    isNaN()?    Double.POSITIVE_INFINITY    :    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	50	None	replace
26	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Infinite.POSITIVE_INFINITY  :  Infinite.ONE;  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Infinite.POSITIVE_INFINITY  :  Infinite.ONE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Infinite.POSITIVE_INFINITY  :  Infinite.ONE;	  Real    real    =    isNaN()?    Double.POSITIVE_INFINITY    :    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	50	None	replace
27	[BUG]  [BUGGY]  double  real  =  Infinite.doubleToInfinite()  :  NaN.doubleToInfinite();  [CE]  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  Infinite.doubleToInfinite()  :  NaN.doubleToInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  Infinite.doubleToInfinite()  :  NaN.doubleToInfinite();	  double    real    =    isNaN?    Infinite.doubleToInfinite()    :    NaN.doubleToInfinite();    	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  double  real  =  isInfinite?  Infinite.doubleToInfinite()  :  NaN.doubleToInfinite();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isInfinite?  Infinite.doubleToInfinite()  :  NaN.doubleToInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isInfinite?  Infinite.doubleToInfinite()  :  NaN.doubleToInfinite();	  double    real    =    isNaN?    Infinite.doubleToInfinite()    :    NaN.doubleToInfinite();    	non-compiled	[CE]  not  a  statement	7	None	replace
29	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  2;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  2;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  /  2;	  return    Double.POSITIVE_INFINITY    /    1;    	non-compiled	[CE]  not  a  statement	38	None	replace
30	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  10;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  10;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  /  10;	  return    Double.POSITIVE_INFINITY    /    1;    	non-compiled	[CE]  not  a  statement	38	None	replace
31	[BUG]  [BUGGY]  return  NaN.ZERO;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  NaN.ZERO;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.ZERO;	  return    Infinite.ZERO;    	non-compiled	[CE]  not  a  statement	83	None	replace
32	[BUG]  [BUGGY]  Real  real  =  getNaN()  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getNaN()  +  1;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getNaN()  +  1;	  Real    real    =    getInfinite()    +    1;    	non-compiled	[CE]  not  a  statement	67	None	replace
33	[BUG]  [BUGGY]  Real  real  =  getInfinite()  /  1;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getInfinite()  /  1;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getInfinite()  /  1;	  Real    real    =    getInfinite()    +    1;    	non-compiled	[CE]  not  a  statement	67	None	replace
34	[BUG]  [BUGGY]  Real  real  =  getFastMath()  +  1;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getFastMath()  +  1;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getFastMath()  +  1;	  Real    real    =    getInfinite()    +    1;    	non-compiled	[CE]  not  a  statement	67	None	replace
35	[BUG]  [BUGGY]  double  real  =  Infinite.doubleToInfinite()  :  Infinite.doubleToInfinite();  [CE]  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  Infinite.doubleToInfinite()  :  Infinite.doubleToInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  Infinite.doubleToInfinite()  :  Infinite.doubleToInfinite();	  double    real    =    isNaN?    Infinite.doubleToInfinite()    :    Infinite.doubleToInfinite();    	non-compiled	[CE]  	84	None	replace
36	[BUG]  [BUGGY]  Double  real  =  isNaN?  Infinite.doubleToInfinite()  :  Infinite.doubleToInfinite();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double  real  =  isNaN?  Infinite.doubleToInfinite()  :  Infinite.doubleToInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double  real  =  isNaN?  Infinite.doubleToInfinite()  :  Infinite.doubleToInfinite();	  double    real    =    isNaN?    Infinite.doubleToInfinite()    :    Infinite.doubleToInfinite();    	non-compiled	[CE]  not  a  statement	84	None	replace
37	[BUG]  [BUGGY]  double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(imaginary));  [CE]  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(imaginary));  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(imaginary));	  double    real    =    isNaN?    NaN.doubleValue()    :    Integer.parseInt(real));    	non-compiled	[CE]  	9	None	replace
38	[BUG]  [BUGGY]  double  real  =  isNaN?  Infinite.doubleValue()  :  Integer.parseInt(real));  [CE]  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  Infinite.doubleValue()  :  Integer.parseInt(real));  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Infinite.doubleValue()  :  Integer.parseInt(real));	  double    real    =    isNaN?    NaN.doubleValue()    :    Integer.parseInt(real));    	non-compiled	[CE]  	9	None	replace
39	[BUG]  [BUGGY]  double  real  =  isNaN?  Infinite.doubleValue()  :  Integer.MIN_VALUE;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  Infinite.doubleValue()  :  Integer.MIN_VALUE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Infinite.doubleValue()  :  Integer.MIN_VALUE;	  double    real    =    isNaN?    Infinite.doubleValue()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	35	None	replace
40	[BUG]  [BUGGY]  double  real  =  Infinite.doubleValue()  :  Integer.MAX_VALUE;  [CE]  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  Infinite.doubleValue()  :  Integer.MAX_VALUE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  Infinite.doubleValue()  :  Integer.MAX_VALUE;	  double    real    =    isNaN?    Infinite.doubleValue()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  	35	None	replace
41	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Infinite.NaN  :  Infinite.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isInfinite()?  Infinite.NaN  :  Infinite.POSITIVE_INFINITY;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Infinite.NaN  :  Infinite.POSITIVE_INFINITY;	  Real    real    =    isInfinite()?    Infinite.POSITIVE_INFINITY    :    Infinite.ZERO;    	non-compiled	[CE]  not  a  statement	48	None	replace
42	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Infinite.ZERO  :  Infinite.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isInfinite()?  Infinite.ZERO  :  Infinite.POSITIVE_INFINITY;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Infinite.ZERO  :  Infinite.POSITIVE_INFINITY;	  Real    real    =    isInfinite()?    Infinite.POSITIVE_INFINITY    :    Infinite.ZERO;    	non-compiled	[CE]  not  a  statement	48	None	replace
43	[BUG]  [BUGGY]  return  NaN.POSITIVE_INFINITY  /  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  NaN.POSITIVE_INFINITY  /  1;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.POSITIVE_INFINITY  /  1;	  return    NaN.POSITIVE_INFINITY    -    1;    	non-compiled	[CE]  not  a  statement	30	None	replace
44	[BUG]  [BUGGY]  return  NaN.POSITIVE_INFINITY  -  2;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  NaN.POSITIVE_INFINITY  -  2;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.POSITIVE_INFINITY  -  2;	  return    NaN.POSITIVE_INFINITY    -    1;    	non-compiled	[CE]  not  a  statement	30	None	replace
45	[BUG]  [BUGGY]  return  NaN.POSITIVE_INFINITY  |  NaN.POSITIVE_INFINITY  /  2.0;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  NaN.POSITIVE_INFINITY  |  NaN.POSITIVE_INFINITY  /  2.0;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.POSITIVE_INFINITY  |  NaN.POSITIVE_INFINITY  /  2.0;	  return    NaN.POSITIVE_INFINITY    /    2.0;    	non-compiled	[CE]  not  a  statement	71	None	replace
46	[BUG]  [BUGGY]  return  NaN.POSITIVE_INFINITY  *  2.0;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  NaN.POSITIVE_INFINITY  *  2.0;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.POSITIVE_INFINITY  *  2.0;	  return    NaN.POSITIVE_INFINITY    /    2.0;    	non-compiled	[CE]  not  a  statement	71	None	replace
47	[BUG]  [BUGGY]  return  NaN.POSITIVE_INFINITY  |  NaN.FIELD_INFINITY  /  2.0;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  NaN.POSITIVE_INFINITY  |  NaN.FIELD_INFINITY  /  2.0;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.POSITIVE_INFINITY  |  NaN.FIELD_INFINITY  /  2.0;	  return    NaN.POSITIVE_INFINITY    /    2.0;    	non-compiled	[CE]  not  a  statement	71	None	replace
48	[BUG]  [BUGGY]  return  NaN.POSITIVE_INFINITY  +  2;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  NaN.POSITIVE_INFINITY  +  2;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.POSITIVE_INFINITY  +  2;	  return    NaN.POSITIVE_INFINITY    +    1;    	non-compiled	[CE]  not  a  statement	31	None	replace
49	[BUG]  [BUGGY]  return  NaN.ONE;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  NaN.ONE;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.ONE;	  return    Infinite.ONE;    	non-compiled	[CE]  not  a  statement	18	None	replace
50	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY  *  2.0;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY  *  2.0;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY  *  2.0;	  return    Double.POSITIVE_INFINITY    *    2.0;    	non-compiled	[CE]  not  a  statement	28	None	replace
51	[BUG]  [BUGGY]  Real  real  =  isNaN?  Math.abs(imaginary):  Math.abs(imaginary);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  Math.abs(imaginary):  Math.abs(imaginary);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Math.abs(imaginary):  Math.abs(imaginary);	  Real    real    =    isInfinite()?    Math.abs(imaginary):    Math.abs(imaginary);    	non-compiled	[CE]  not  a  statement	72	None	replace
52	[BUG]  [BUGGY]  double  real  =  Integer.MIN_VALUE?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  Integer.MIN_VALUE?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  Integer.MIN_VALUE?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;	  double    real    =    isNaN?    Integer.MIN_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	76	None	replace
53	[BUG]  [BUGGY]  double  real  =  isNaN?  Integer.MAX_VALUE  :  Integer.MIN_VALUE;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  Integer.MAX_VALUE  :  Integer.MIN_VALUE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Integer.MAX_VALUE  :  Integer.MIN_VALUE;	  double    real    =    isNaN?    Integer.MIN_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	76	None	replace
54	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Double.INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Double.INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Double.INFINITY  :  Double.POSITIVE_INFINITY;	  Real    real    =    isNaN()?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	46	None	replace
55	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  -  Double.NaN;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  -  Double.NaN;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  -  Double.NaN;	  return    Double.POSITIVE_INFINITY    -    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	45	None	replace
56	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  *  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  *  Double.POSITIVE_INFINITY;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  *  Double.POSITIVE_INFINITY;	  return    Double.POSITIVE_INFINITY    -    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	45	None	replace
57	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Math.abs(imaginary)/  Infinite.NaN;  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Math.abs(imaginary)/  Infinite.NaN;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Math.abs(imaginary)/  Infinite.NaN;	  Real    real    =    isZero()?    Math.abs(imaginary)/    Infinite.NaN;    	non-compiled	[CE]  :  expected	3	None	replace
58	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Math.abs(imaginary)/  Infinite.NaN;  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isInfinite()?  Math.abs(imaginary)/  Infinite.NaN;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Math.abs(imaginary)/  Infinite.NaN;	  Real    real    =    isZero()?    Math.abs(imaginary)/    Infinite.NaN;    	non-compiled	[CE]  :  expected	3	None	replace
59	[BUG]  [BUGGY]  Real  real  =  isZero()?  Math.abs(imaginary)/  Double.NaN;  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isZero()?  Math.abs(imaginary)/  Double.NaN;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Math.abs(imaginary)/  Double.NaN;	  Real    real    =    isZero()?    Math.abs(imaginary)/    Infinite.NaN;    	non-compiled	[CE]  :  expected	3	None	replace
60	[BUG]  [BUGGY]  Real  real  =  isZero()?  Math.abs(real)/  Infinite.NaN;  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isZero()?  Math.abs(real)/  Infinite.NaN;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Math.abs(real)/  Infinite.NaN;	  Real    real    =    isZero()?    Math.abs(imaginary)/    Infinite.NaN;    	non-compiled	[CE]  :  expected	3	None	replace
61	[BUG]  [BUGGY]  return  NaN.INFINITY  |  NaN.INFINITY;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  NaN.INFINITY  |  NaN.INFINITY;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.INFINITY  |  NaN.INFINITY;	  return    NaN.INFINITY;    	non-compiled	[CE]  not  a  statement	29	None	replace
62	[BUG]  [BUGGY]  return  NaN.infinite;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  NaN.infinite;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.infinite;	  return    NaN.INFINITY;    	non-compiled	[CE]  not  a  statement	29	None	replace
63	[BUG]  [BUGGY]  return  isNaN?  Infinite.POSITIVE  :  Infinite.Zero;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.POSITIVE  :  Infinite.Zero;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.POSITIVE  :  Infinite.Zero;	  return    isNaN?    Infinite.POSITIVE    :    Infinite.ZERO;    	non-compiled	[CE]  not  a  statement	62	None	replace
64	[BUG]  [BUGGY]  return  isNaN?  Infinite.POSITIVE  :  Infinite.INFINITY;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.POSITIVE  :  Infinite.INFINITY;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.POSITIVE  :  Infinite.INFINITY;	  return    isNaN?    Infinite.POSITIVE    :    Infinite.ZERO;    	non-compiled	[CE]  not  a  statement	62	None	replace
65	[BUG]  [BUGGY]  Double  real  =  isNaN?  Infinite.doubleToInfinite()  :  NaN.doubleToInfinite();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double  real  =  isNaN?  Infinite.doubleToInfinite()  :  NaN.doubleToInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double  real  =  isNaN?  Infinite.doubleToInfinite()  :  NaN.doubleToInfinite();	  Double    real    =    isNaN?    NaN.doubleToInfinite()    :    Infinite.doubleToInfinite();    	non-compiled	[CE]  not  a  statement	8	None	replace
66	[BUG]  [BUGGY]  Double  real  =  isInfinite?  NaN.doubleToInfinite()  :  Infinite.doubleToInfinite();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double  real  =  isInfinite?  NaN.doubleToInfinite()  :  Infinite.doubleToInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double  real  =  isInfinite?  NaN.doubleToInfinite()  :  Infinite.doubleToInfinite();	  Double    real    =    isNaN?    NaN.doubleToInfinite()    :    Infinite.doubleToInfinite();    	non-compiled	[CE]  not  a  statement	8	None	replace
67	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Math.abs(real):  Infinite.NaN;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Math.abs(real):  Infinite.NaN;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Math.abs(real):  Infinite.NaN;	  Real    real    =    isNaN()?    Math.abs(imaginary):    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	2	None	replace
68	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Math.abs(imaginary):  Infinite.ZERO;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Math.abs(imaginary):  Infinite.ZERO;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Math.abs(imaginary):  Infinite.ZERO;	  Real    real    =    isNaN()?    Math.abs(imaginary):    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	2	None	replace
69	[BUG]  [BUGGY]  return  isNaN?  Infinite.POSITIVE_INFINITY  :  Infinite.ZERO;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.POSITIVE_INFINITY  :  Infinite.ZERO;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.POSITIVE_INFINITY  :  Infinite.ZERO;	  return    isNaN?    Infinite.POSITIVE_INFINITY    :    Infinite.ONE;    	non-compiled	[CE]  not  a  statement	68	None	replace
70	[BUG]  [BUGGY]  return  isNaN?  Infinite.POSITIVE_INFINITY  :  Infinite.Zero;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.POSITIVE_INFINITY  :  Infinite.Zero;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.POSITIVE_INFINITY  :  Infinite.Zero;	  return    isNaN?    Infinite.POSITIVE_INFINITY    :    Infinite.ONE;    	non-compiled	[CE]  not  a  statement	68	None	replace
71	[BUG]  [BUGGY]  return  Infinite.POSITIVE_INFINITY?  Infinite.NaN  :  Infinite.ONE;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Infinite.POSITIVE_INFINITY?  Infinite.NaN  :  Infinite.ONE;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.POSITIVE_INFINITY?  Infinite.NaN  :  Infinite.ONE;	  return    isNaN?    Infinite.POSITIVE_INFINITY    :    Infinite.ONE;    	non-compiled	[CE]  not  a  statement	68	None	replace
72	[BUG]  [BUGGY]  Real  real  =  isInfinite?  Math.abs(real):  Math.abs(imaginary);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isInfinite?  Math.abs(real):  Math.abs(imaginary);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite?  Math.abs(real):  Math.abs(imaginary);	  Real    real    =    isNaN?    Math.abs(real):    Math.abs(imaginary);    	non-compiled	[CE]  not  a  statement	59	None	replace
73	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.NaN;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.NaN;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  /  Double.NaN;	  return    Double.POSITIVE_INFINITY    /    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	43	None	replace
74	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.PER_INFINITY;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.PER_INFINITY;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  /  Double.PER_INFINITY;	  return    Double.POSITIVE_INFINITY    /    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	43	None	replace
75	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.SEMI_INFINITY;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.SEMI_INFINITY;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  /  Double.SEMI_INFINITY;	  return    Double.POSITIVE_INFINITY    /    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	43	None	replace
76	[BUG]  [BUGGY]  double  real  =  Integer.MIN_VALUE?  Integer.MAX_VALUE  :  NaN.doubleValue();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  Integer.MIN_VALUE?  Integer.MAX_VALUE  :  NaN.doubleValue();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  Integer.MIN_VALUE?  Integer.MAX_VALUE  :  NaN.doubleValue();	  double    real    =    isNaN?    Integer.MIN_VALUE    :    NaN.doubleValue();    	non-compiled	[CE]  not  a  statement	25	None	replace
77	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(imaginary):  Infinite.valueOf(real);  [CE]  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(imaginary):  Infinite.valueOf(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(imaginary):  Infinite.valueOf(real);	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.ZERO    :    Infinite.valueOf(real):    Infinite.valueOf(real);    	non-compiled	[CE]  	23	None	replace
78	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ONE  :  Infinite.valueOf(real):  Infinite.valueOf(real);  [CE]  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ONE  :  Infinite.valueOf(real):  Infinite.valueOf(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ONE  :  Infinite.valueOf(real):  Infinite.valueOf(real);	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.ZERO    :    Infinite.valueOf(real):    Infinite.valueOf(real);    	non-compiled	[CE]  	23	None	replace
79	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(imaginary):  Infinite.valueOf(imaginary);  [CE]  [FE]                        AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(imaginary):  Infinite.valueOf(imaginary);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(imaginary):  Infinite.valueOf(imaginary);	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.ZERO    :    Infinite.valueOf(real):    Infinite.valueOf(real);    	non-compiled	[CE]  	23	None	replace
80	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Math.abs(NaN):  Infinite.NaN;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isInfinite()?  Math.abs(NaN):  Infinite.NaN;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Math.abs(NaN):  Infinite.NaN;	  Real    real    =    isZero()?    Math.abs(NaN):    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	55	None	replace
81	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Math.abs(NaN):  Infinite.NaN;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Math.abs(NaN):  Infinite.NaN;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Math.abs(NaN):  Infinite.NaN;	  Real    real    =    isZero()?    Math.abs(NaN):    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	55	None	replace
82	[BUG]  [BUGGY]  Real  real  =  isZero()?  Math.abs(NaN):  Infinite.ONE;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isZero()?  Math.abs(NaN):  Infinite.ONE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Math.abs(NaN):  Infinite.ONE;	  Real    real    =    isZero()?    Math.abs(NaN):    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	55	None	replace
83	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Infinite.POSITIVE_INFINITY  :  Infinite.NaN;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Infinite.POSITIVE_INFINITY  :  Infinite.NaN;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Infinite.POSITIVE_INFINITY  :  Infinite.NaN;	  Real    real    =    isInfinite()?    Infinite.POSITIVE_INFINITY    :    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	47	None	replace
84	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isInfinite?  Infinite.NaN  :  Infinite.ONE;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isInfinite?  Infinite.NaN  :  Infinite.ONE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isInfinite?  Infinite.NaN  :  Infinite.ONE;	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.NaN    :    Infinite.ONE;    	non-compiled	[CE]  not  a  statement	60	None	replace
85	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  :  isNaN?  Infinite.NaN  :  Infinite.ONE;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  :  isNaN?  Infinite.NaN  :  Infinite.ONE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  :  isNaN?  Infinite.NaN  :  Infinite.ONE;	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.NaN    :    Infinite.ONE;    	non-compiled	[CE]  not  a  statement	60	None	replace
86	[BUG]  [BUGGY]  double  real  =  Integer.parseInt(real);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  Integer.parseInt(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  Integer.parseInt(real);	  double    real    =    NaN.doubleValue()    :    Integer.parseInt(real);    	non-compiled	[CE]  not  a  statement	54	None	replace
87	[BUG]  [BUGGY]  double  real  =  NaN.doubleValue()  :  Integer.parseInt(imaginary);  [CE]  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  NaN.doubleValue()  :  Integer.parseInt(imaginary);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  NaN.doubleValue()  :  Integer.parseInt(imaginary);	  double    real    =    NaN.doubleValue()    :    Integer.parseInt(real);    	non-compiled	[CE]  	54	None	replace
88	[BUG]  [BUGGY]  double  real  =  NaN.doubleValue()  /  Integer.parseInt(real);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  NaN.doubleValue()  /  Integer.parseInt(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  NaN.doubleValue()  /  Integer.parseInt(real);	  double    real    =    NaN.doubleValue()    :    Integer.parseInt(real);    	non-compiled	[CE]  not  a  statement	54	None	replace
89	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Double.INFINITY  :  Double.NaN;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Double.INFINITY  :  Double.NaN;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Double.INFINITY  :  Double.NaN;	  Real    real    =    isNaN()?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  not  a  statement	19	None	replace
90	[BUG]  [BUGGY]  Real  real  =  NaN.getInfinite();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  NaN.getInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  NaN.getInfinite();	  Real    real    =    NaN.getInfinite()    :    NaN.getInfinite();    	non-compiled	[CE]  not  a  statement	37	None	replace
91	[BUG]  [BUGGY]  Real  real  =  NaN.getInfinite()  /  NaN.getInfinite();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  NaN.getInfinite()  /  NaN.getInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  NaN.getInfinite()  /  NaN.getInfinite();	  Real    real    =    NaN.getInfinite()    :    NaN.getInfinite();    	non-compiled	[CE]  not  a  statement	37	None	replace
92	[BUG]  [BUGGY]  Real  real  =  NaN.getInfinite()  -  NaN.getInfinite();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  NaN.getInfinite()  -  NaN.getInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  NaN.getInfinite()  -  NaN.getInfinite();	  Real    real    =    NaN.getInfinite()    :    NaN.getInfinite();    	non-compiled	[CE]  not  a  statement	37	None	replace
93	[BUG]  [BUGGY]  Real  real  =  NaN.getInfinite()  :  NaN.getZero();  [CE]  [FE]                        AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  NaN.getInfinite()  :  NaN.getZero();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  NaN.getInfinite()  :  NaN.getZero();	  Real    real    =    NaN.getInfinite()    :    NaN.getInfinite();    	non-compiled	[CE]  	37	None	replace
94	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.INFINITE  :  NaN.getZero();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.INFINITE  :  NaN.getZero();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.INFINITE  :  NaN.getZero();	  Real    real    =    isNaN?    NaN.INFINITE    :    NaN.getInfinite();    	non-compiled	[CE]  not  a  statement	75	None	replace
95	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.INFINITE  :  NaN.infinite();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.INFINITE  :  NaN.infinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.INFINITE  :  NaN.infinite();	  Real    real    =    isNaN?    NaN.INFINITE    :    NaN.getInfinite();    	non-compiled	[CE]  not  a  statement	75	None	replace
96	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.zero();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.zero();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.zero();	  Real    real    =    isNaN?    NaN.getInfinite()    :    NaN.getZero();    	non-compiled	[CE]  not  a  statement	36	None	replace
97	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  *  2;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  *  2;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  *  2;	  return    Double.POSITIVE_INFINITY    *    1;    	non-compiled	[CE]  not  a  statement	39	None	replace
98	[BUG]  [BUGGY]  Real  real  =  getFunctionInfinite().abs();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getFunctionInfinite().abs();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getFunctionInfinite().abs();	  Real    real    =    getFunctionInfinite();    	non-compiled	[CE]  not  a  statement	52	None	replace
99	[BUG]  [BUGGY]  Real  real  =  getFunctionInfinite(false);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getFunctionInfinite(false);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getFunctionInfinite(false);	  Real    real    =    getFunctionInfinite();    	non-compiled	[CE]  not  a  statement	52	None	replace
100	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.MAX_VALUE;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.MAX_VALUE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.MAX_VALUE;	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.MIN_VALUE    :    Infinite.valueOf(real);    	non-compiled	[CE]  not  a  statement	24	None	replace
101	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isInfinite?  Infinite.NaN  :  Infinite.ZERO;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isInfinite?  Infinite.NaN  :  Infinite.ZERO;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isInfinite?  Infinite.NaN  :  Infinite.ZERO;	  Double.POSITIVE_INFINITY    =    isInfinite?    Infinite.NaN    :    Infinite.NaN;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
102	[BUG]  [BUGGY]  double  real  =  isNaN?  Integer.doubleValue()  :  Integer.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  Integer.doubleValue()  :  Integer.MIN_VALUE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Integer.doubleValue()  :  Integer.MIN_VALUE;	  double    real    =    isNaN?    Integer.doubleValue()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
103	[BUG]  [BUGGY]  double  real  =  Integer.doubleValue()  :  Integer.MAX_VALUE;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  Integer.doubleValue()  :  Integer.MAX_VALUE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  Integer.doubleValue()  :  Integer.MAX_VALUE;	  double    real    =    isNaN?    Integer.doubleValue()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  ';'  expected	64	None	replace
104	[BUG]  [BUGGY]  Real  real  =  getINF();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getINF();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getINF();	  Real    real    =    getZero();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
105	[BUG]  [BUGGY]  Real  real  =  getSeriesZero();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getSeriesZero();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getSeriesZero();	  Real    real    =    getZero();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
106	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Math.abs(imaginary):  Infinite.ZERO;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isInfinite()?  Math.abs(imaginary):  Infinite.ZERO;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Math.abs(imaginary):  Infinite.ZERO;	  Real    real    =    isInfinite()?    Math.abs(imaginary):    Infinite.NaN;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
107	[BUG]  [BUGGY]  return  isNaN?  Infinite.INFINITE  :  Infinite.ZERO;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.INFINITE  :  Infinite.ZERO;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.INFINITE  :  Infinite.ZERO;	  return    Infinite.INFINITE;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
108	[BUG]  [BUGGY]  return  isNaN?  Infinite.INFINITE  :  Infinite.INFINITE;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.INFINITE  :  Infinite.INFINITE;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.INFINITE  :  Infinite.INFINITE;	  return    Infinite.INFINITE;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
109	[BUG]  [BUGGY]  return  isNaN?  Infinite.INFINITE  :  Infinite.FALSE;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.INFINITE  :  Infinite.FALSE;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.INFINITE  :  Infinite.FALSE;	  return    Infinite.INFINITE;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
110	[BUG]  [BUGGY]  return  isInfinite?  Infinite.POSITIVE  :  Infinite.ONE;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isInfinite?  Infinite.POSITIVE  :  Infinite.ONE;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isInfinite?  Infinite.POSITIVE  :  Infinite.ONE;	  return    isNaN?    Infinite.POSITIVE    :    Infinite.ONE;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
111	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.FALSE  :  Infinite.valueOf(imaginary);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.FALSE  :  Infinite.valueOf(imaginary);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.FALSE  :  Infinite.valueOf(imaginary);	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.FALSE    :    Infinite.valueOf(real);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
112	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.FALSE  :  Infinite.valueOf(real));  [CE]  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.FALSE  :  Infinite.valueOf(real));  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.FALSE  :  Infinite.valueOf(real));	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.FALSE    :    Infinite.valueOf(real);    	non-compiled	[CE]  	82	None	replace
113	[BUG]  [BUGGY]  Real  real  =  isInfinite?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isInfinite?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	  Real    real    =    isNaN?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
114	[BUG]  [BUGGY]  Real  real  =  isNaN?  Double.INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  Double.INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Double.INFINITY  :  Double.POSITIVE_INFINITY;	  Real    real    =    isNaN?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
115	[BUG]  [BUGGY]  Real  real  =  isNaN?  Math.abs(imaginary):  Infinite.ZERO;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  Math.abs(imaginary):  Infinite.ZERO;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Math.abs(imaginary):  Infinite.ZERO;	  Real    real    =    isNaN?    Math.abs(imaginary):    Infinite.NaN;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
116	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(imaginary);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(imaginary);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(imaginary);	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.ZERO    :    Infinite.valueOf(real);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
117	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ONE  :  Infinite.valueOf(real);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ONE  :  Infinite.valueOf(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ONE  :  Infinite.valueOf(real);	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.ZERO    :    Infinite.valueOf(real);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
118	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.infinite()  :  NaN.infinite();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.infinite()  :  NaN.infinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.infinite()  :  NaN.infinite();	  Real    real    =    isNaN?    NaN.infinite()    :    NaN.getInfinite();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
119	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.infinite()  :  NaN.getZero();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.infinite()  :  NaN.getZero();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.infinite()  :  NaN.getZero();	  Real    real    =    isNaN?    NaN.infinite()    :    NaN.getInfinite();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
120	[BUG]  [BUGGY]  Real  real  =  isInfinite?  Math.abs(imaginary):  Infinite.ONE;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isInfinite?  Math.abs(imaginary):  Infinite.ONE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite?  Math.abs(imaginary):  Infinite.ONE;	  Real    real    =    isInfinite?    Math.abs(imaginary):    Infinite.ZERO;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
121	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY  /  2.0L;  [CE]  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY  /  2.0L;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY  /  2.0L;	  return    Double.POSITIVE_INFINITY    /    2.0L;    	non-compiled	[CE]  	27	None	replace
122	[BUG]  [BUGGY]  Double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(imaginary);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(imaginary);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(imaginary);	  double    real    =    isNaN?    NaN.doubleValue()    :    Integer.parseInt(imaginary);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
123	[BUG]  [BUGGY]  double  real  =  isNaN?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;	  double    real    =    isNaN?    Integer.MAX_VALUE    :    NaN.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
124	[BUG]  [BUGGY]  return  isNaN?  Infinite.INFINITY  :  Infinite.INFINITY;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.INFINITY  :  Infinite.INFINITY;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.INFINITY  :  Infinite.INFINITY;	  return    Infinite.INFINITY;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
125	[BUG]  [BUGGY]  return  isNaN?  Infinite.INFINITY  :  Infinite.ZERO;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.INFINITY  :  Infinite.ZERO;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.INFINITY  :  Infinite.ZERO;	  return    Infinite.INFINITY;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
126	[BUG]  [BUGGY]  return  isNaN?  Infinite.INFINITY  :  Infinite.FALSE;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.INFINITY  :  Infinite.FALSE;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.INFINITY  :  Infinite.FALSE;	  return    Infinite.INFINITY;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
127	[BUG]  [BUGGY]  double  real  =  isNaN?  Integer.MIN_VALUE  :  Integer.MAX_VALUE  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  Integer.MIN_VALUE  :  Integer.MAX_VALUE  +  1;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Integer.MIN_VALUE  :  Integer.MAX_VALUE  +  1;	  double    real    =    isNaN?    Integer.MIN_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
128	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.INFINITE  :  NaN.infinite;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.INFINITE  :  NaN.infinite;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.INFINITE  :  NaN.infinite;	  Real    real    =    isNaN?    NaN.INFINITE    :    NaN.getInfinite();    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
129	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.INFINITE  :  NaN.getLocale();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.INFINITE  :  NaN.getLocale();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.INFINITE  :  NaN.getLocale();	  Real    real    =    isNaN?    NaN.INFINITE    :    NaN.getInfinite();    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
130	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Double.NaN  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Double.NaN  +  1;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Double.NaN  +  1;	  Real    real    =    isNaN()?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
131	[BUG]  [BUGGY]  return  Infinite.NaN  |  Infinite.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Infinite.NaN  |  Infinite.MAX_VALUE;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.NaN  |  Infinite.MAX_VALUE;	  return    Infinite.NaN;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
132	[BUG]  [BUGGY]  return  Infinite.NaN  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Infinite.NaN  +  1;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.NaN  +  1;	  return    Infinite.NaN;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
133	[BUG]  [BUGGY]  return  isNaN?  Infinite.INFINITY  :  Infinite.ONE;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.INFINITY  :  Infinite.ONE;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.INFINITY  :  Infinite.ONE;	  return    isNaN?    Infinite.POSITIVE_INFINITY    :    Infinite.ONE;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
134	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.INFINITY  :  NaN.getLocale();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.INFINITY  :  NaN.getLocale();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.INFINITY  :  NaN.getLocale();	  Real    real    =    isNaN?    NaN.INFINITY    :    NaN.getInfinite();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
135	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.INFINITY  :  NaN.FIELD_NAME.getInfinite();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.INFINITY  :  NaN.FIELD_NAME.getInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.INFINITY  :  NaN.FIELD_NAME.getInfinite();	  Real    real    =    isNaN?    NaN.INFINITY    :    NaN.getInfinite();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
136	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Double.NEGATIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Double.NEGATIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Double.NEGATIVE_INFINITY  :  Double.POSITIVE_INFINITY;	  Real    real    =    isNaN()?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
137	[BUG]  [BUGGY]  Real  real  =  isZero()?  Math.abs(NaN):  Infinite.ZERO;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isZero()?  Math.abs(NaN):  Infinite.ZERO;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Math.abs(NaN):  Infinite.ZERO;	  Real    real    =    isZero()?    Math.abs(NaN):    Infinite.NaN;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
138	[BUG]  [BUGGY]  double  real  =  isNaN?  Infinite.MIN_VALUE  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  Infinite.MIN_VALUE  :  Integer.MAX_VALUE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Infinite.MIN_VALUE  :  Integer.MAX_VALUE;	  double    real    =    isNaN?    Infinite.doubleValue()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
139	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.setZero(null);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.setZero(null);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.setZero(null);	  Real    real    =    isNaN?    NaN.getInfinite()    :    NaN.getZero();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
140	[BUG]  [BUGGY]  double  real  =  Real.doubleValue()  :  Integer.parseInt(real);  [CE]  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  Real.doubleValue()  :  Integer.parseInt(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  Real.doubleValue()  :  Integer.parseInt(real);	  double    real    =    NaN.doubleValue()    :    Integer.parseInt(real);    	non-compiled	[CE]  	54	None	replace
141	[BUG]  [BUGGY]  double  real  =  isNaN?  Integer.parseInt(Integer.MAX_VALUE):  Integer.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  Integer.parseInt(Integer.MAX_VALUE):  Integer.MAX_VALUE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Integer.parseInt(Integer.MAX_VALUE):  Integer.MAX_VALUE;	  double    real    =    isNaN?    Integer.doubleValue()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
142	[BUG]  [BUGGY]  Real  real  =  isZero()?  Math.abs(NaN):  Math.abs(imaginary);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isZero()?  Math.abs(NaN):  Math.abs(imaginary);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Math.abs(NaN):  Math.abs(imaginary);	  Real    real    =    isZero()?    Math.abs(imaginary):    Math.abs(imaginary);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
143	[BUG]  [BUGGY]  Real  real  =  isNaN?  Math.abs(real):  Math.abs(imaginary  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  Math.abs(real):  Math.abs(imaginary  +  1);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Math.abs(real):  Math.abs(imaginary  +  1);	  Real    real    =    isNaN?    Math.abs(real):    Math.abs(imaginary);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
144	[BUG]  [BUGGY]  return  isNaN?  Infinite.INFINITY  :  Infinite.MAX_INFINITY;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.INFINITY  :  Infinite.MAX_INFINITY;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.INFINITY  :  Infinite.MAX_INFINITY;	  return    Infinite.INFINITY;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
145	[BUG]  [BUGGY]  return  Infinite.POSITIVE_INFINITY  *  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Infinite.POSITIVE_INFINITY  *  1;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.POSITIVE_INFINITY  *  1;	  return    Infinite.POSITIVE_INFINITY    -    1;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
146	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  *  4;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  *  4;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  *  4;	  return    Double.POSITIVE_INFINITY    *    1;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
147	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  *  1.0;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  *  1.0;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  *  1.0;	  return    Double.POSITIVE_INFINITY    *    2.0;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
148	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  *  0.0;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  *  0.0;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  *  0.0;	  return    Double.POSITIVE_INFINITY    *    2.0;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
149	[BUG]  [BUGGY]  return  NaN.INFINITY  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  NaN.INFINITY  -  1;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.INFINITY  -  1;	  return    NaN.INFINITY;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
150	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.LONG;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.LONG;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.LONG;	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.NaN    :    Infinite.ONE;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
151	[BUG]  [BUGGY]  Real  real  =  isNaN?  Infinite.POSITIVE_INFINITY  :  Infinite.ZERO;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  Infinite.POSITIVE_INFINITY  :  Infinite.ZERO;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Infinite.POSITIVE_INFINITY  :  Infinite.ZERO;	  Real    real    =    isInfinite()?    Infinite.POSITIVE_INFINITY    :    Infinite.ZERO;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
152	[BUG]  [BUGGY]  Real  real  =  isNaN?  getNaN()  :  null;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  getNaN()  :  null;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  getNaN()  :  null;	  Real    real    =    getNaN();    	non-compiled	[CE]  not  a  statement	51	None	replace
153	[BUG]  [BUGGY]  Real  real  =  isNaN?  Math.abs(imaginary):  Infinite.ONE;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  Math.abs(imaginary):  Infinite.ONE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Math.abs(imaginary):  Infinite.ONE;	  Real    real    =    isNaN?    Math.abs(imaginary):    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	11	None	replace
154	[BUG]  [BUGGY]  Real  real  =  isNaN?  Math.abs(real):  Infinite.ZERO;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  Math.abs(real):  Infinite.ZERO;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Math.abs(real):  Infinite.ZERO;	  Real    real    =    isNaN?    Math.abs(imaginary):    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	11	None	replace
155	[BUG]  [BUGGY]  return  isNaN?  Infinite.ONE  :  Infinite.ZERO;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.ONE  :  Infinite.ZERO;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.ONE  :  Infinite.ZERO;	  return    Infinite.ONE;    	non-compiled	[CE]  not  a  statement	18	None	replace
156	[BUG]  [BUGGY]  return  NaN.POSITIVE_INFINITY  /  2;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  NaN.POSITIVE_INFINITY  /  2;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.POSITIVE_INFINITY  /  2;	  return    NaN.POSITIVE_INFINITY    /    2.0;    	non-compiled	[CE]  not  a  statement	71	None	replace
157	[BUG]  [BUGGY]  return  NaN.POSITIVE_INFINITY  /  2.0L;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  NaN.POSITIVE_INFINITY  /  2.0L;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.POSITIVE_INFINITY  /  2.0L;	  return    NaN.POSITIVE_INFINITY    /    2.0;    	non-compiled	[CE]  ';'  expected	71	None	replace
158	[BUG]  [BUGGY]  return  isNaN?  Infinite.POSITIVE  :  Infinite.LONG;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.POSITIVE  :  Infinite.LONG;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.POSITIVE  :  Infinite.LONG;	  return    isNaN?    Infinite.POSITIVE    :    Infinite.ONE;    	non-compiled	[CE]  not  a  statement	61	None	replace
159	[BUG]  [BUGGY]  Real  real  =  getFactory().absPosition();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getFactory().absPosition();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getFactory().absPosition();	  Real    real    =    getInfinite()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
160	[BUG]  [BUGGY]  Real  real  =  getInfinite().toInfinite();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getInfinite().toInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getInfinite().toInfinite();	  Real    real    =    getInfinite()    +    1;    	non-compiled	[CE]  not  a  statement	67	None	replace
161	[BUG]  [BUGGY]  double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(imaginary)+  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(imaginary)+  1;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(imaginary)+  1;	  double    real    =    isNaN?    NaN.doubleValue()    :    Integer.parseInt(imaginary);    	non-compiled	[CE]  not  a  statement	10	None	replace
162	[BUG]  [BUGGY]  Real  real  =  getFastMath();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getFastMath();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getFastMath();	  Real    real    =    getImaginary();    	non-compiled	[CE]  not  a  statement	79	None	replace
163	[BUG]  [BUGGY]  Real  real  =  isNaN.getInfinite()  :  NaN.getInfinite();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN.getInfinite()  :  NaN.getInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN.getInfinite()  :  NaN.getInfinite();	  Real    real    =    NaN.getInfinite()    :    NaN.getInfinite();    	non-compiled	[CE]  ';'  expected	37	None	replace
164	[BUG]  [BUGGY]  Real  real  =  NaN.getZero()  :  NaN.getInfinite();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  NaN.getZero()  :  NaN.getInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  NaN.getZero()  :  NaN.getInfinite();	  Real    real    =    NaN.getInfinite()    :    NaN.getInfinite();    	non-compiled	[CE]  ';'  expected	37	None	replace
165	[BUG]  [BUGGY]  Real  real  =  getFunctionInfinite().asInfinite();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getFunctionInfinite().asInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getFunctionInfinite().asInfinite();	  Real    real    =    getFunctionInfinite();    	non-compiled	[CE]  not  a  statement	52	None	replace
166	[BUG]  [BUGGY]  Real  real  =  getFunctionInfinite().toInfinite();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getFunctionInfinite().toInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getFunctionInfinite().toInfinite();	  Real    real    =    getFunctionInfinite();    	non-compiled	[CE]  not  a  statement	52	None	replace
167	[BUG]  [BUGGY]  Real  real  =  isNaN?  Infinite.POSITIVE_INFINITY  :  Infinite.ONE;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  Infinite.POSITIVE_INFINITY  :  Infinite.ONE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Infinite.POSITIVE_INFINITY  :  Infinite.ONE;	  Real    real    =    isInfinite()?    Infinite.POSITIVE_INFINITY    :    Infinite.ONE;    	non-compiled	[CE]  not  a  statement	49	None	replace
168	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.FALSE  :  Infinite.parse(real);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.FALSE  :  Infinite.parse(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.FALSE  :  Infinite.parse(real);	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.FALSE    :    Infinite.valueOf(real);    	non-compiled	[CE]  not  a  statement	82	None	replace
169	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.valueOf(real):  Infinite.valueOf(imaginary,  ZERO);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.valueOf(real):  Infinite.valueOf(imaginary,  ZERO);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.valueOf(real):  Infinite.valueOf(imaginary,  ZERO);	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.valueOf(real):    Infinite.valueOf(imaginary);    	non-compiled	[CE]  not  a  statement	65	None	replace
170	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(real):  Infinite.valueOf(imaginary);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(real):  Infinite.valueOf(imaginary);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(real):  Infinite.valueOf(imaginary);	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.ZERO    :    Infinite.valueOf(real):    Infinite.valueOf(real);    	non-compiled	[CE]  ';'  expected	23	None	replace
171	[BUG]  [BUGGY]  double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(real)+  1);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(real)+  1);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(real)+  1);	  double    real    =    isNaN?    NaN.doubleValue()    :    Integer.parseInt(real));    	non-compiled	[CE]  ';'  expected	9	None	replace
172	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.MAX_VALUE(real);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.MAX_VALUE(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.MAX_VALUE(real);	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.MIN_VALUE    :    Infinite.valueOf(real);    	non-compiled	[CE]  not  a  statement	24	None	replace
173	[BUG]  [BUGGY]  return  isNaN?  Infinite.INFINITE  :  Infinite.MAX_INFINITE;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.INFINITE  :  Infinite.MAX_INFINITE;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.INFINITE  :  Infinite.MAX_INFINITE;	  return    Infinite.INFINITE;    	non-compiled	[CE]  not  a  statement	17	None	replace
174	[BUG]  [BUGGY]  return  isNaN?  Infinite.INFINITE  :  Infinite.ONE;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  isNaN?  Infinite.INFINITE  :  Infinite.ONE;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.INFINITE  :  Infinite.ONE;	  return    Infinite.INFINITE;    	non-compiled	[CE]  not  a  statement	17	None	replace
175	[BUG]  [BUGGY]  return  NaN.POSITIVE_INFINITY  *  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  NaN.POSITIVE_INFINITY  *  1;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.POSITIVE_INFINITY  *  1;	  return    NaN.POSITIVE_INFINITY    -    1;    	non-compiled	[CE]  not  a  statement	30	None	replace
176	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.Zero  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.Zero  +  1;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.Zero  +  1;	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.NaN    :    Infinite.Zero;    	non-compiled	[CE]  not  a  statement	34	None	replace
177	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isInfinite?  Infinite.NaN  :  Infinite.Zero;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isInfinite?  Infinite.NaN  :  Infinite.Zero;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isInfinite?  Infinite.NaN  :  Infinite.Zero;	  Double.POSITIVE_INFINITY    =    isInfinite?    Infinite.NaN    :    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	32	None	replace
178	[BUG]  [BUGGY]  Real  real  =  getInfinite().abs();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getInfinite().abs();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getInfinite().abs();	  Real    real    =    getInfinite()    -    1;    	non-compiled	[CE]  not  a  statement	53	None	replace
179	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Math.abs(real):  Math.abs(imaginary  +  1);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Math.abs(real):  Math.abs(imaginary  +  1);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Math.abs(real):  Math.abs(imaginary  +  1);	  Real    real    =    isNaN()?    Math.abs(real):    Math.abs(imaginary);    	non-compiled	[CE]  not  a  statement	13	None	replace
180	[BUG]  [BUGGY]  Real  real  =  isZero()?  Math.abs(imaginary)/  Infinite.NaN  +  1;  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isZero()?  Math.abs(imaginary)/  Infinite.NaN  +  1;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Math.abs(imaginary)/  Infinite.NaN  +  1;	  Real    real    =    isZero()?    Math.abs(imaginary)/    Infinite.NaN;    	non-compiled	[CE]  :  expected	3	None	replace
181	[BUG]  [BUGGY]  Real  real  =  isInfinite?  Math.abs(NaN):  Infinite.ZERO;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isInfinite?  Math.abs(NaN):  Infinite.ZERO;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite?  Math.abs(NaN):  Infinite.ZERO;	  Real    real    =    isInfinite?    Math.abs(imaginary):    Infinite.ZERO;    	non-compiled	[CE]  not  a  statement	70	None	replace
182	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.INFINITY;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.INFINITY;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  /  Double.INFINITY;	  return    Double.POSITIVE_INFINITY    /    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	43	None	replace
183	[BUG]  [BUGGY]  Real  real  =  isNaN?  Double.NEGATIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  Double.NEGATIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Double.NEGATIVE_INFINITY  :  Double.POSITIVE_INFINITY;	  Real    real    =    isNaN?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	56	None	replace
184	[BUG]  [BUGGY]  double  real  =  imaginary?  NaN.doubleValue()  :  Integer.parseInt(real);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  imaginary?  NaN.doubleValue()  :  Integer.parseInt(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  imaginary?  NaN.doubleValue()  :  Integer.parseInt(real);	  double    real    =    real?    NaN.doubleValue()    :    Integer.parseInt(real);    	non-compiled	[CE]  not  a  statement	77	None	replace
185	[BUG]  [BUGGY]  double  real  =  isNaN?  Infinite.doubleToInfinite(real):  Infinite.doubleToInfinite();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  Infinite.doubleToInfinite(real):  Infinite.doubleToInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Infinite.doubleToInfinite(real):  Infinite.doubleToInfinite();	  double    real    =    isNaN?    Infinite.doubleToInfinite()    :    Infinite.doubleToInfinite();    	non-compiled	[CE]  not  a  statement	84	None	replace
186	[BUG]  [BUGGY]  double  real  =  isInfinite?  Infinite.doubleToInfinite()  :  Infinite.doubleToInfinite();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isInfinite?  Infinite.doubleToInfinite()  :  Infinite.doubleToInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isInfinite?  Infinite.doubleToInfinite()  :  Infinite.doubleToInfinite();	  double    real    =    isNaN?    Infinite.doubleToInfinite()    :    Infinite.doubleToInfinite();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
187	[BUG]  [BUGGY]  double  real  =  isNaN?  Infinite.MAX_VALUE  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  Infinite.MAX_VALUE  :  Integer.MAX_VALUE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Infinite.MAX_VALUE  :  Integer.MAX_VALUE;	  double    real    =    isNaN?    Infinite.doubleValue()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
188	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  *  10;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  *  10;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  *  10;	  return    Double.POSITIVE_INFINITY    *    1;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
189	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.getINFZero();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.getINFZero();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.getINFZero();	  Real    real    =    isNaN?    NaN.getInfinite()    :    NaN.getZero();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
190	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.getLocalMask();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.getLocalMask();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.getLocalMask();	  Real    real    =    isNaN?    NaN.getInfinite()    :    NaN.getZero();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
191	[BUG]  [BUGGY]  return  Infinite.POSITIVE_INFINITY  :  Infinite.ONE;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Infinite.POSITIVE_INFINITY  :  Infinite.ONE;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.POSITIVE_INFINITY  :  Infinite.ONE;	  return    isNaN?    Infinite.POSITIVE_INFINITY    :    Infinite.ONE;    	non-compiled	[CE]  ';'  expected	68	None	replace
192	[BUG]  [BUGGY]  double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(real)-  1);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(real)-  1);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(real)-  1);	  double    real    =    isNaN?    NaN.doubleValue()    :    Integer.parseInt(real));    	non-compiled	[CE]  ';'  expected	9	None	replace
193	[BUG]  [BUGGY]  double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(value));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(value));  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(value));	  double    real    =    isNaN?    NaN.doubleValue()    :    Integer.parseInt(real));    	non-compiled	[CE]  ';'  expected	9	None	replace
194	[BUG]  [BUGGY]  Real  real  =  isInfinite?  Math.abs(real):  Infinite.ZERO;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isInfinite?  Math.abs(real):  Infinite.ZERO;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite?  Math.abs(real):  Infinite.ZERO;	  Real    real    =    isInfinite?    Math.abs(real):    Infinite.NaN;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
195	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Double.ONE;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Double.ONE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Double.ONE;	  Real    real    =    isNaN()?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
196	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Math.abs(real):  Math.abs(imaginary,  isInfinite);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Math.abs(real):  Math.abs(imaginary,  isInfinite);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Math.abs(real):  Math.abs(imaginary,  isInfinite);	  Real    real    =    isNaN()?    Math.abs(real):    Math.abs(imaginary);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
197	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Math.abs(real):  Math.abs(imaginary,  isZero);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Math.abs(real):  Math.abs(imaginary,  isZero);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Math.abs(real):  Math.abs(imaginary,  isZero);	  Real    real    =    isNaN()?    Math.abs(real):    Math.abs(imaginary);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
198	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Math.abs(imaginary):  Math.abs(imaginary  +  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN()?  Math.abs(imaginary):  Math.abs(imaginary  +  1);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Math.abs(imaginary):  Math.abs(imaginary  +  1);	  Real    real    =    isNaN()?    Math.abs(imaginary):    Math.abs(imaginary);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
199	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.DEFAULT;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.DEFAULT;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.DEFAULT;	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.MIN_VALUE    :    Infinite.valueOf(real);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
200	[BUG]  [BUGGY]  Real  real  =  isZero()?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isZero()?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	  Real    real    =    isInfinite()?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	21	None	replace
201	[BUG]  [BUGGY]  Real  real  =  isZero()?  Math.abs(imaginary)/  Infinite.NaN  :  imaginary;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isZero()?  Math.abs(imaginary)/  Infinite.NaN  :  imaginary;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Math.abs(imaginary)/  Infinite.NaN  :  imaginary;	  Real    real    =    isZero()?    Math.abs(imaginary)/    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	3	None	replace
202	[BUG]  [BUGGY]  Real  real  =  isNaN?  Math.abs(imaginary)/  Infinite.NaN;  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  Math.abs(imaginary)/  Infinite.NaN;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Math.abs(imaginary)/  Infinite.NaN;	  Real    real    =    isZero()?    Math.abs(imaginary)/    Infinite.NaN;    	non-compiled	[CE]  :  expected	3	None	replace
203	[BUG]  [BUGGY]  Real  real  =  NaN.infinite()  :  NaN.infinite();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  NaN.infinite()  :  NaN.infinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  NaN.infinite()  :  NaN.infinite();	  Real    real    =    isNaN?    NaN.infinite()    :    NaN.getInfinite();    	non-compiled	[CE]  ';'  expected	58	None	replace
204	[BUG]  [BUGGY]  double  real  =  isNaN?  Integer.parseInt(imaginary):  Integer.parseInt(imaginary);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isNaN?  Integer.parseInt(imaginary):  Integer.parseInt(imaginary);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Integer.parseInt(imaginary):  Integer.parseInt(imaginary);	  double    real    =    isNaN?    NaN.doubleValue()    :    Integer.parseInt(imaginary);    	non-compiled	[CE]  not  a  statement	10	None	replace
205	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.valueOf(real):  Infinite.valueOf(real);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.valueOf(real):  Infinite.valueOf(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.valueOf(real):  Infinite.valueOf(real);	  Double.POSITIVE_INFINITY    =    isNaN?    Infinite.ZERO    :    Infinite.valueOf(real):    Infinite.valueOf(real);    	non-compiled	[CE]  ';'  expected	23	None	replace
206	[BUG]  [BUGGY]  return  NaN.POSITIVE_INFINITY  |  NaN.POSITIVE_INFINITY;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  NaN.POSITIVE_INFINITY  |  NaN.POSITIVE_INFINITY;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.POSITIVE_INFINITY  |  NaN.POSITIVE_INFINITY;	  return    NaN.POSITIVE_INFINITY    /    2.0;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
207	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.INFINITY  :  NaN.toInfinite();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.INFINITY  :  NaN.toInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.INFINITY  :  NaN.toInfinite();	  Real    real    =    isNaN?    NaN.INFINITY    :    NaN.getInfinite();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
208	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.INFINITY  :  NaN.getLong();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.INFINITY  :  NaN.getLong();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.INFINITY  :  NaN.getLong();	  Real    real    =    isNaN?    NaN.INFINITY    :    NaN.getInfinite();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
209	[BUG]  [BUGGY]  return  Infinite.INFINITE  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Infinite.INFINITE  -  1;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.INFINITE  -  1;	  return    Infinite.INFINITE;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
210	[BUG]  [BUGGY]  return  Infinite.INFINITE  +  Math.abs(imaginary);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Infinite.INFINITE  +  Math.abs(imaginary);  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.INFINITE  +  Math.abs(imaginary);	  return    Infinite.INFINITE;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
211	[BUG]  [BUGGY]  return  Infinite.INFINITE  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Infinite.INFINITE  +  1;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.INFINITE  +  1;	  return    Infinite.INFINITE;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
212	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.DEFAULT;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.DEFAULT;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  /  Double.DEFAULT;	  return    Double.POSITIVE_INFINITY    /    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
213	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.MIN_VALUE;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  /  Double.MIN_VALUE;	  return    Double.POSITIVE_INFINITY    /    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
214	[BUG]  [BUGGY]  double  real  =  real?  Integer.doubleValue()  :  Integer.parseInt(real);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  real?  Integer.doubleValue()  :  Integer.parseInt(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  real?  Integer.doubleValue()  :  Integer.parseInt(real);	  double    real    =    real?    NaN.doubleValue()    :    Integer.parseInt(real);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
215	[BUG]  [BUGGY]  return  Infinite.INFINITY  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Infinite.INFINITY  -  1;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.INFINITY  -  1;	  return    Infinite.INFINITY;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
216	[BUG]  [BUGGY]  return  Infinite.INFINITY  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Infinite.INFINITY  +  1;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.INFINITY  +  1;	  return    Infinite.INFINITY;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
217	[BUG]  [BUGGY]  Real  real  =  isZero()?  Math.abs(NaN)/  Infinite.NaN;  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isZero()?  Math.abs(NaN)/  Infinite.NaN;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Math.abs(NaN)/  Infinite.NaN;	  Real    real    =    isZero()?    Math.abs(NaN):    Infinite.NaN;    	non-compiled	[CE]  :  expected	55	None	replace
218	[BUG]  [BUGGY]  double  real  =  isInfinite?  Integer.MIN_VALUE  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  double  real  =  isInfinite?  Integer.MIN_VALUE  :  Integer.MAX_VALUE;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isInfinite?  Integer.MIN_VALUE  :  Integer.MAX_VALUE;	  double    real    =    isNaN?    Integer.MIN_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
219	[BUG]  [BUGGY]  Real  real  =  isNaN  ||  isInfinite()?  Math.abs(real):  Math.abs(real);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN  ||  isInfinite()?  Math.abs(real):  Math.abs(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN  ||  isInfinite()?  Math.abs(real):  Math.abs(real);	  Real    real    =    isInfinite()?    Math.abs(real):    Math.abs(real);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
220	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.INFINITE  :  NaN.toInfinite();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  NaN.INFINITE  :  NaN.toInfinite();  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.INFINITE  :  NaN.toInfinite();	  Real    real    =    isNaN?    NaN.INFINITE    :    NaN.getInfinite();    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
221	[BUG]  [BUGGY]  Real  real  =  isNaN  ||  isInfinite()?  Math.abs(imaginary):  Math.abs(imaginary);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN  ||  isInfinite()?  Math.abs(imaginary):  Math.abs(imaginary);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN  ||  isInfinite()?  Math.abs(imaginary):  Math.abs(imaginary);	  Real    real    =    isInfinite()?    Math.abs(imaginary):    Math.abs(imaginary);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
222	[BUG]  [BUGGY]  Real  real  =  getImaginary()  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  getImaginary()  -  1;  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getImaginary()  -  1;	  Real    real    =    getInfinite()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
223	[BUG]  [BUGGY]  Real  real  =  isNaN?  Math.abs(real):  Math.abs(imaginary,  isZero);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isNaN?  Math.abs(real):  Math.abs(imaginary,  isZero);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Math.abs(real):  Math.abs(imaginary,  isZero);	  Real    real    =    isNaN?    Math.abs(real):    Math.abs(imaginary);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
224	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  -  Double.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  return  Double.POSITIVE_INFINITY  -  Double.MIN_VALUE;  [BUGGY]      }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  -  Double.MIN_VALUE;	  return    Double.POSITIVE_INFINITY    -    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
225	[BUG]  [BUGGY]  Real  real  =  isInfinite?  Math.abs(real):  Math.abs(real);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {      [BUGGY]  Real  real  =  isInfinite?  Math.abs(real):  Math.abs(real);  [BUGGY]      return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite?  Math.abs(real):  Math.abs(real);	  Real    real    =    isNaN?    Math.abs(real):    Math.abs(real);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
