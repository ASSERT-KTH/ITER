bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Real  real  =  isInfinite()?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]    Real  real  =  isInfinite()?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]  return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	    Real  real  =  isInfinite()?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;		non-compiled	[CE]  not  a  statement	26	None	add
2	[BUG]  [BUGGY]    Real  real  =  isInfinite()?  Double.POSITIVE_INFINITY  :  Double.NaN;  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]    Real  real  =  isInfinite()?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]  return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	    Real  real  =  isInfinite()?  Double.POSITIVE_INFINITY  :  Double.NaN;		non-compiled	[CE]  not  a  statement	26	None	add
3	[BUG]  [BUGGY]    Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.NaN;  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]    Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.NaN;  [BUGGY]  return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	    Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.NaN;		non-compiled	[CE]  not  a  statement	26	None	add
4	[BUG]  [BUGGY]    Double.POSITIVE_INFINITY  =  isNaN?  Infinite.valueOf(real):  Infinite.valueOf(real);  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]    Double.POSITIVE_INFINITY  =  isNaN?  Infinite.valueOf(real):  Infinite.valueOf(real);  [BUGGY]  return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	    Double.POSITIVE_INFINITY  =  isNaN?  Infinite.valueOf(real):  Infinite.valueOf(real);		non-compiled	[CE]  not  a  statement	26	None	add
5	[BUG]  [BUGGY]    Real  real  =  isInfinite()?  Double.POSITIVE_INFINITY  :  Infinite.NaN;  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]    Real  real  =  isInfinite()?  Double.POSITIVE_INFINITY  :  Infinite.NaN;  [BUGGY]  return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	    Real  real  =  isInfinite()?  Double.POSITIVE_INFINITY  :  Infinite.NaN;		non-compiled	[CE]  not  a  statement	26	None	add
6	[BUG]  [BUGGY]  return  Infinite.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]  return  Infinite.POSITIVE_INFINITY;  [BUGGY]  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.POSITIVE_INFINITY;	return  Double.POSITIVE_INFINITY;  	non-compiled	[CE]  not  a  statement	25	None	replace
7	[BUG]  [BUGGY]  return  NaN.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]  return  NaN.POSITIVE_INFINITY;  [BUGGY]  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.POSITIVE_INFINITY;	return  Double.POSITIVE_INFINITY;  	non-compiled	[CE]  not  a  statement	25	None	replace
8	[BUG]  [BUGGY]  return  Infinite.POSITIVE;  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]  return  Infinite.POSITIVE;  [BUGGY]  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.POSITIVE;	return  Double.POSITIVE_INFINITY;  	non-compiled	[CE]  not  a  statement	25	None	replace
9	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  2.0;  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]  return  Double.POSITIVE_INFINITY  /  2.0;  [BUGGY]  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  /  2.0;	return  Double.POSITIVE_INFINITY;  	non-compiled	[CE]  not  a  statement	25	None	replace
10	[BUG]  [BUGGY]    double  real  =  isNaN?  NaN.doubleToInfinite()  :  Infinite.doubleToInfinite();  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]    double  real  =  isNaN?  NaN.doubleToInfinite()  :  Infinite.doubleToInfinite();  [BUGGY]  return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	    double  real  =  isNaN?  NaN.doubleToInfinite()  :  Infinite.doubleToInfinite();		non-compiled	[CE]  not  a  statement	26	None	add
11	[BUG]  [BUGGY]    double  real  =  isNaN?  NaN.doubleValue()  :  Integer.MAX_VALUE;  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]    double  real  =  isNaN?  NaN.doubleValue()  :  Integer.MAX_VALUE;  [BUGGY]  return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	    double  real  =  isNaN?  NaN.doubleValue()  :  Integer.MAX_VALUE;		non-compiled	[CE]  not  a  statement	26	None	add
12	[BUG]  [BUGGY]    Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.getInfinite();  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]    Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.getInfinite();  [BUGGY]  return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	    Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.getInfinite();		non-compiled	[CE]  not  a  statement	26	None	add
13	[BUG]  [BUGGY]    double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(real);  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]    double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(real);  [BUGGY]  return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	    double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(real);		non-compiled	[CE]  not  a  statement	26	None	add
14	[BUG]  [BUGGY]    double  real  =  isNaN?  NaN.doubleValue()  :  Integer.MIN_VALUE;  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]    double  real  =  isNaN?  NaN.doubleValue()  :  Integer.MIN_VALUE;  [BUGGY]  return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	    double  real  =  isNaN?  NaN.doubleValue()  :  Integer.MIN_VALUE;		non-compiled	[CE]  not  a  statement	26	None	add
15	[BUG]  [BUGGY]    Real  real  =  isInfinite?  Math.abs(imaginary):  Infinite.NaN;  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]    Real  real  =  isInfinite?  Math.abs(imaginary):  Infinite.NaN;  [BUGGY]  return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	    Real  real  =  isInfinite?  Math.abs(imaginary):  Infinite.NaN;		non-compiled	[CE]  not  a  statement	26	None	add
16	[BUG]  [BUGGY]    Real  real  =  isZero()?  Math.abs(imaginary):  Infinite.NaN;  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]    Real  real  =  isZero()?  Math.abs(imaginary):  Infinite.NaN;  [BUGGY]  return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	    Real  real  =  isZero()?  Math.abs(imaginary):  Infinite.NaN;		non-compiled	[CE]  not  a  statement	26	None	add
17	[BUG]  [BUGGY]    Real  real  =  isZero()?  Math.abs(real):  Math.abs(real);  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]    Real  real  =  isZero()?  Math.abs(real):  Math.abs(real);  [BUGGY]  return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	    Real  real  =  isZero()?  Math.abs(real):  Math.abs(real);		non-compiled	[CE]  not  a  statement	26	None	add
18	[BUG]  [BUGGY]    Real  real  =  getInfinite();  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]    Real  real  =  getInfinite();  [BUGGY]  return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	    Real  real  =  getInfinite();		non-compiled	[CE]  not  a  statement	26	None	add
19	[BUG]  [BUGGY]    Real  real  =  isZero()?  Math.abs(real):  Math.abs(imaginary);  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]    Real  real  =  isZero()?  Math.abs(real):  Math.abs(imaginary);  [BUGGY]  return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	    Real  real  =  isZero()?  Math.abs(real):  Math.abs(imaginary);		non-compiled	[CE]  not  a  statement	26	None	add
20	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  -  1;  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]  return  Double.POSITIVE_INFINITY  -  1;  [BUGGY]  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  -  1;	return  Double.POSITIVE_INFINITY;  	non-compiled	[CE]  not  a  statement	25	None	replace
21	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {  [BUGGY]  return  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY;  [BUGGY]  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY;	return  Double.POSITIVE_INFINITY;  	non-compiled	[CE]  not  a  statement	25	None	replace
