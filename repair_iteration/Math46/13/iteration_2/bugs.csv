bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Math.abs(imaginary):  Infinite.NaN;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isInfinite()?  Math.abs(imaginary):  Infinite.NaN;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Math.abs(imaginary):  Infinite.NaN;	      Real    real    =    isZero()?    Math.abs(imaginary):    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	16	None	replace
2	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Math.abs(imaginary):  Infinite.NaN;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isNaN()?  Math.abs(imaginary):  Infinite.NaN;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Math.abs(imaginary):  Infinite.NaN;	      Real    real    =    isZero()?    Math.abs(imaginary):    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	16	None	replace
3	[BUG]  [BUGGY]  Real  real  =  isZero()?  Math.abs(imaginary)/  Infinite.NaN;  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isZero()?  Math.abs(imaginary)/  Infinite.NaN;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Math.abs(imaginary)/  Infinite.NaN;	      Real    real    =    isZero()?    Math.abs(imaginary):    Infinite.NaN;    	non-compiled	[CE]  :  expected	16	None	replace
4	[BUG]  [BUGGY]  return  Infinite.NaN;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  Infinite.NaN;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.NaN;	  return    Infinite.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	6	None	replace
5	[BUG]  [BUGGY]  return  Infinite.INFINITY;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  Infinite.INFINITY;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.INFINITY;	  return    Infinite.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	6	None	replace
6	[BUG]  [BUGGY]  return  Infinite.POSITIVE_INFINITY  +  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  Infinite.POSITIVE_INFINITY  +  1;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.POSITIVE_INFINITY  +  1;	  return    Infinite.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	6	None	replace
7	[BUG]  [BUGGY]  double  real  =  isNaN?  Infinite.doubleToInfinite()  :  NaN.doubleToInfinite();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  double  real  =  isNaN?  Infinite.doubleToInfinite()  :  NaN.doubleToInfinite();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Infinite.doubleToInfinite()  :  NaN.doubleToInfinite();	      double    real    =    isNaN?    NaN.doubleToInfinite()    :    Infinite.doubleToInfinite();    	non-compiled	[CE]  not  a  statement	10	None	replace
8	[BUG]  [BUGGY]  Double  real  =  isNaN?  NaN.doubleToInfinite()  :  Infinite.doubleToInfinite();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Double  real  =  isNaN?  NaN.doubleToInfinite()  :  Infinite.doubleToInfinite();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double  real  =  isNaN?  NaN.doubleToInfinite()  :  Infinite.doubleToInfinite();	      double    real    =    isNaN?    NaN.doubleToInfinite()    :    Infinite.doubleToInfinite();    	non-compiled	[CE]  not  a  statement	10	None	replace
9	[BUG]  [BUGGY]  double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(real));  [CE]  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(real));  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(real));	      double    real    =    isNaN?    NaN.doubleValue()    :    Integer.parseInt(real);    	non-compiled	[CE]  	13	None	replace
10	[BUG]  [BUGGY]  double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(imaginary);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(imaginary);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  NaN.doubleValue()  :  Integer.parseInt(imaginary);	      double    real    =    isNaN?    NaN.doubleValue()    :    Integer.parseInt(real);    	non-compiled	[CE]  not  a  statement	13	None	replace
11	[BUG]  [BUGGY]  Real  real  =  isNaN?  Math.abs(imaginary):  Infinite.NaN;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isNaN?  Math.abs(imaginary):  Infinite.NaN;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Math.abs(imaginary):  Infinite.NaN;	      Real    real    =    isInfinite?    Math.abs(imaginary):    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	15	None	replace
12	[BUG]  [BUGGY]  Real  real  =  isInfinite?  Math.abs(real):  Infinite.NaN;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isInfinite?  Math.abs(real):  Infinite.NaN;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite?  Math.abs(real):  Infinite.NaN;	      Real    real    =    isInfinite?    Math.abs(imaginary):    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	15	None	replace
13	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Math.abs(real):  Math.abs(imaginary);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isNaN()?  Math.abs(real):  Math.abs(imaginary);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Math.abs(real):  Math.abs(imaginary);	      Real    real    =    isZero()?    Math.abs(real):    Math.abs(imaginary);    	non-compiled	[CE]  not  a  statement	19	None	replace
14	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Math.abs(real):  Math.abs(imaginary);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isInfinite()?  Math.abs(real):  Math.abs(imaginary);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Math.abs(real):  Math.abs(imaginary);	      Real    real    =    isZero()?    Math.abs(real):    Math.abs(imaginary);    	non-compiled	[CE]  not  a  statement	19	None	replace
15	[BUG]  [BUGGY]  Real  real  =  isZero()?  Math.abs(imaginary):  Math.abs(imaginary);  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isZero()?  Math.abs(imaginary):  Math.abs(imaginary);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Math.abs(imaginary):  Math.abs(imaginary);	      Real    real    =    isZero()?    Math.abs(real):    Math.abs(imaginary);    	non-compiled	[CE]  not  a  statement	19	None	replace
16	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Math.abs(imaginary):  Math.abs(imaginary);  [CE]  not  a  statement  [FE]                      AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isNaN()?  Math.abs(imaginary):  Math.abs(imaginary);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Math.abs(imaginary):  Math.abs(imaginary);	      Real    real    =    isZero()?    Math.abs(real):    Math.abs(imaginary);    	non-compiled	[CE]  not  a  statement	19	None	replace
17	[BUG]  [BUGGY]  return  Infinite.INFINITE;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  Infinite.INFINITE;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.INFINITE;	  return    Infinite.POSITIVE;    	non-compiled	[CE]  not  a  statement	8	None	replace
18	[BUG]  [BUGGY]  return  Infinite.ONE;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  Infinite.ONE;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.ONE;	  return    Infinite.POSITIVE;    	non-compiled	[CE]  not  a  statement	8	None	replace
19	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Double.NaN;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Double.NaN;	      Real    real    =    isInfinite()?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  not  a  statement	2	None	replace
20	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Double.NaN  :  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isInfinite()?  Double.NaN  :  Double.POSITIVE_INFINITY;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Double.NaN  :  Double.POSITIVE_INFINITY;	      Real    real    =    isInfinite()?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  not  a  statement	2	None	replace
21	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isInfinite()?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	      Real    real    =    isInfinite()?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  not  a  statement	2	None	replace
22	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.valueOf(imaginary):  Infinite.valueOf(real);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.valueOf(imaginary):  Infinite.valueOf(real);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.valueOf(imaginary):  Infinite.valueOf(real);	      Double.POSITIVE_INFINITY    =    isNaN?    Infinite.valueOf(real):    Infinite.valueOf(real);    	non-compiled	[CE]  not  a  statement	4	None	replace
23	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(real):  Infinite.valueOf(real);  [CE]  [FE]                AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(real):  Infinite.valueOf(real);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(real):  Infinite.valueOf(real);	      Double.POSITIVE_INFINITY    =    isNaN?    Infinite.valueOf(real):    Infinite.valueOf(real);    	non-compiled	[CE]  	4	None	replace
24	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.valueOf(real);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.valueOf(real);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.MIN_VALUE  :  Infinite.valueOf(real);	      Double.POSITIVE_INFINITY    =    isNaN?    Infinite.valueOf(real):    Infinite.valueOf(real);    	non-compiled	[CE]  not  a  statement	4	None	replace
25	[BUG]  [BUGGY]  double  real  =  isNaN?  Integer.MIN_VALUE  :  NaN.doubleValue();  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  double  real  =  isNaN?  Integer.MIN_VALUE  :  NaN.doubleValue();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Integer.MIN_VALUE  :  NaN.doubleValue();	      double    real    =    isNaN?    NaN.doubleValue()    :    Integer.MIN_VALUE;    	non-compiled	[CE]  not  a  statement	14	None	replace
26	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY  /  2.0;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY  /  2.0;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY  /  2.0;	  return    Double.POSITIVE_INFINITY    /    2.0;    	non-compiled	[CE]  not  a  statement	9	None	replace
27	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  2.0L;  [CE]  [FE]          AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  Double.POSITIVE_INFINITY  /  2.0L;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  /  2.0L;	  return    Double.POSITIVE_INFINITY    /    2.0;    	non-compiled	[CE]  	9	None	replace
28	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  *  2.0;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  Double.POSITIVE_INFINITY  *  2.0;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  *  2.0;	  return    Double.POSITIVE_INFINITY    /    2.0;    	non-compiled	[CE]  not  a  statement	9	None	replace
29	[BUG]  [BUGGY]  return  NaN.INFINITY;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  NaN.INFINITY;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.INFINITY;	  return    NaN.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	7	None	replace
30	[BUG]  [BUGGY]  return  NaN.POSITIVE_INFINITY  -  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  NaN.POSITIVE_INFINITY  -  1;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.POSITIVE_INFINITY  -  1;	  return    NaN.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	7	None	replace
31	[BUG]  [BUGGY]  return  NaN.POSITIVE_INFINITY  +  1;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  NaN.POSITIVE_INFINITY  +  1;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.POSITIVE_INFINITY  +  1;	  return    NaN.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	7	None	replace
32	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isInfinite?  Infinite.NaN  :  Infinite.NaN;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Double.POSITIVE_INFINITY  =  isInfinite?  Infinite.NaN  :  Infinite.NaN;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isInfinite?  Infinite.NaN  :  Infinite.NaN;	      Double.POSITIVE_INFINITY    =    isNaN?    Infinite.NaN    :    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	3	None	replace
33	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.ZERO;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.ZERO;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.ZERO;	      Double.POSITIVE_INFINITY    =    isNaN?    Infinite.NaN    :    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	3	None	replace
34	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.Zero;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.Zero;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.Zero;	      Double.POSITIVE_INFINITY    =    isNaN?    Infinite.NaN    :    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	3	None	replace
35	[BUG]  [BUGGY]  double  real  =  isNaN?  Infinite.doubleValue()  :  Integer.MAX_VALUE;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  double  real  =  isNaN?  Infinite.doubleValue()  :  Integer.MAX_VALUE;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Infinite.doubleValue()  :  Integer.MAX_VALUE;	      double    real    =    isNaN?    NaN.doubleValue()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	11	None	replace
36	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.getZero();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.getZero();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.getInfinite()  :  NaN.getZero();	      Real    real    =    isNaN?    NaN.getInfinite()    :    NaN.getInfinite();    	non-compiled	[CE]  not  a  statement	12	None	replace
37	[BUG]  [BUGGY]  Real  real  =  NaN.getInfinite()  :  NaN.getInfinite();  [CE]  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  NaN.getInfinite()  :  NaN.getInfinite();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  NaN.getInfinite()  :  NaN.getInfinite();	      Real    real    =    isNaN?    NaN.getInfinite()    :    NaN.getInfinite();    	non-compiled	[CE]  	12	None	replace
38	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  1;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  Double.POSITIVE_INFINITY  /  1;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  /  1;	  return    Double.POSITIVE_INFINITY    -    1;    	non-compiled	[CE]  not  a  statement	20	None	replace
39	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  *  1;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  Double.POSITIVE_INFINITY  *  1;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  *  1;	  return    Double.POSITIVE_INFINITY    -    1;    	non-compiled	[CE]  not  a  statement	20	None	replace
40	[BUG]  [BUGGY]  Real  real  =  isZero()?  Math.abs(imaginary):  Math.abs(real);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isZero()?  Math.abs(imaginary):  Math.abs(real);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Math.abs(imaginary):  Math.abs(real);	      Real    real    =    isZero()?    Math.abs(real):    Math.abs(real);    	non-compiled	[CE]  not  a  statement	17	None	replace
41	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Math.abs(real):  Math.abs(real);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isInfinite()?  Math.abs(real):  Math.abs(real);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Math.abs(real):  Math.abs(real);	      Real    real    =    isZero()?    Math.abs(real):    Math.abs(real);    	non-compiled	[CE]  not  a  statement	17	None	replace
42	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Math.abs(real):  Math.abs(real);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isNaN()?  Math.abs(real):  Math.abs(real);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Math.abs(real):  Math.abs(real);	      Real    real    =    isZero()?    Math.abs(real):    Math.abs(real);    	non-compiled	[CE]  not  a  statement	17	None	replace
43	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.POSITIVE_INFINITY;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  /  Double.POSITIVE_INFINITY;	  return    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	21	None	replace
44	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  &  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  Double.POSITIVE_INFINITY  &  Double.POSITIVE_INFINITY;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  &  Double.POSITIVE_INFINITY;	  return    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	21	None	replace
45	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  -  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  Double.POSITIVE_INFINITY  -  Double.POSITIVE_INFINITY;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Double.POSITIVE_INFINITY  -  Double.POSITIVE_INFINITY;	  return    Double.POSITIVE_INFINITY    |    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	21	None	replace
46	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	      Real    real    =    isInfinite()?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	1	None	replace
47	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Infinite.POSITIVE_INFINITY  :  Infinite.NaN;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isInfinite()?  Infinite.POSITIVE_INFINITY  :  Infinite.NaN;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Infinite.POSITIVE_INFINITY  :  Infinite.NaN;	      Real    real    =    isInfinite()?    Double.POSITIVE_INFINITY    :    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	5	None	replace
48	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Infinite.POSITIVE_INFINITY  :  Infinite.ZERO;  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isInfinite()?  Infinite.POSITIVE_INFINITY  :  Infinite.ZERO;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Infinite.POSITIVE_INFINITY  :  Infinite.ZERO;	      Real    real    =    isInfinite()?    Double.POSITIVE_INFINITY    :    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	5	None	replace
49	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Infinite.POSITIVE_INFINITY  :  Infinite.ONE;  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isInfinite()?  Infinite.POSITIVE_INFINITY  :  Infinite.ONE;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Infinite.POSITIVE_INFINITY  :  Infinite.ONE;	      Real    real    =    isInfinite()?    Double.POSITIVE_INFINITY    :    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	5	None	replace
50	[BUG]  [BUGGY]  Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Infinite.NaN;  [CE]  not  a  statement  [FE]                      AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Infinite.NaN;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN()?  Double.POSITIVE_INFINITY  :  Infinite.NaN;	      Real    real    =    isInfinite()?    Double.POSITIVE_INFINITY    :    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	5	None	replace
51	[BUG]  [BUGGY]  Real  real  =  getNaN();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  getNaN();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getNaN();	      Real    real    =    getInfinite();    	non-compiled	[CE]  not  a  statement	18	None	replace
52	[BUG]  [BUGGY]  Real  real  =  getFunctionInfinite();  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  getFunctionInfinite();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getFunctionInfinite();	      Real    real    =    getInfinite();    	non-compiled	[CE]  not  a  statement	18	None	replace
53	[BUG]  [BUGGY]  Real  real  =  getInfinite()  -  1;  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  getInfinite()  -  1;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getInfinite()  -  1;	      Real    real    =    getInfinite();    	non-compiled	[CE]  not  a  statement	18	None	replace
54	[BUG]  [BUGGY]  double  real  =  NaN.doubleValue()  :  Integer.parseInt(real);  [CE]  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  double  real  =  NaN.doubleValue()  :  Integer.parseInt(real);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  NaN.doubleValue()  :  Integer.parseInt(real);	      double    real    =    isNaN?    NaN.doubleValue()    :    Integer.parseInt(real);    	non-compiled	[CE]  	13	None	replace
55	[BUG]  [BUGGY]  Real  real  =  isZero()?  Math.abs(NaN):  Infinite.NaN;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isZero()?  Math.abs(NaN):  Infinite.NaN;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Math.abs(NaN):  Infinite.NaN;	      Real    real    =    isZero()?    Math.abs(imaginary):    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	16	None	replace
56	[BUG]  [BUGGY]  Real  real  =  isNaN?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isNaN?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	      Real    real    =    isInfinite()?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	1	None	replace
57	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.INFINITY  :  NaN.getInfinite();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isNaN?  NaN.INFINITY  :  NaN.getInfinite();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.INFINITY  :  NaN.getInfinite();	      Real    real    =    isNaN?    NaN.getInfinite()    :    NaN.getInfinite();    	non-compiled	[CE]  not  a  statement	12	None	replace
58	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.infinite()  :  NaN.getInfinite();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isNaN?  NaN.infinite()  :  NaN.getInfinite();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.infinite()  :  NaN.getInfinite();	      Real    real    =    isNaN?    NaN.getInfinite()    :    NaN.getInfinite();    	non-compiled	[CE]  not  a  statement	12	None	replace
59	[BUG]  [BUGGY]  Real  real  =  isNaN?  Math.abs(real):  Math.abs(imaginary);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isNaN?  Math.abs(real):  Math.abs(imaginary);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Math.abs(real):  Math.abs(imaginary);	      Real    real    =    isZero()?    Math.abs(real):    Math.abs(imaginary);    	non-compiled	[CE]  not  a  statement	19	None	replace
60	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.ONE;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.ONE;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.NaN  :  Infinite.ONE;	      Double.POSITIVE_INFINITY    =    isNaN?    Infinite.NaN    :    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	3	None	replace
61	[BUG]  [BUGGY]  return  isNaN?  Infinite.POSITIVE  :  Infinite.ONE;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  isNaN?  Infinite.POSITIVE  :  Infinite.ONE;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.POSITIVE  :  Infinite.ONE;	  return    Infinite.POSITIVE;    	non-compiled	[CE]  not  a  statement	8	None	replace
62	[BUG]  [BUGGY]  return  isNaN?  Infinite.POSITIVE  :  Infinite.ZERO;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  isNaN?  Infinite.POSITIVE  :  Infinite.ZERO;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.POSITIVE  :  Infinite.ZERO;	  return    Infinite.POSITIVE;    	non-compiled	[CE]  not  a  statement	8	None	replace
63	[BUG]  [BUGGY]  double  real  =  isNaN?  Integer.MAX_VALUE  :  NaN.doubleValue();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  double  real  =  isNaN?  Integer.MAX_VALUE  :  NaN.doubleValue();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Integer.MAX_VALUE  :  NaN.doubleValue();	      double    real    =    isNaN?    NaN.doubleValue()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	11	None	replace
64	[BUG]  [BUGGY]  double  real  =  isNaN?  Integer.doubleValue()  :  Integer.MAX_VALUE;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  double  real  =  isNaN?  Integer.doubleValue()  :  Integer.MAX_VALUE;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Integer.doubleValue()  :  Integer.MAX_VALUE;	      double    real    =    isNaN?    NaN.doubleValue()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	11	None	replace
65	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.valueOf(real):  Infinite.valueOf(imaginary);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.valueOf(real):  Infinite.valueOf(imaginary);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.valueOf(real):  Infinite.valueOf(imaginary);	      Double.POSITIVE_INFINITY    =    isNaN?    Infinite.valueOf(real):    Infinite.valueOf(real);    	non-compiled	[CE]  not  a  statement	4	None	replace
66	[BUG]  [BUGGY]  Real  real  =  getZero();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  getZero();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getZero();	      Real    real    =    getInfinite();    	non-compiled	[CE]  not  a  statement	18	None	replace
67	[BUG]  [BUGGY]  Real  real  =  getInfinite()  +  1;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  getInfinite()  +  1;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getInfinite()  +  1;	      Real    real    =    getInfinite();    	non-compiled	[CE]  not  a  statement	18	None	replace
68	[BUG]  [BUGGY]  return  isNaN?  Infinite.POSITIVE_INFINITY  :  Infinite.ONE;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  isNaN?  Infinite.POSITIVE_INFINITY  :  Infinite.ONE;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  isNaN?  Infinite.POSITIVE_INFINITY  :  Infinite.ONE;	  return    Infinite.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	6	None	replace
69	[BUG]  [BUGGY]  return  Infinite.POSITIVE_INFINITY  -  1;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  Infinite.POSITIVE_INFINITY  -  1;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.POSITIVE_INFINITY  -  1;	  return    Infinite.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	6	None	replace
70	[BUG]  [BUGGY]  Real  real  =  isInfinite?  Math.abs(imaginary):  Infinite.ZERO;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isInfinite?  Math.abs(imaginary):  Infinite.ZERO;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite?  Math.abs(imaginary):  Infinite.ZERO;	      Real    real    =    isInfinite?    Math.abs(imaginary):    Infinite.NaN;    	non-compiled	[CE]  not  a  statement	15	None	replace
71	[BUG]  [BUGGY]  return  NaN.POSITIVE_INFINITY  /  2.0;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  NaN.POSITIVE_INFINITY  /  2.0;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  NaN.POSITIVE_INFINITY  /  2.0;	  return    NaN.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	7	None	replace
72	[BUG]  [BUGGY]  Real  real  =  isInfinite()?  Math.abs(imaginary):  Math.abs(imaginary);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isInfinite()?  Math.abs(imaginary):  Math.abs(imaginary);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isInfinite()?  Math.abs(imaginary):  Math.abs(imaginary);	      Real    real    =    isZero()?    Math.abs(real):    Math.abs(imaginary);    	non-compiled	[CE]  not  a  statement	19	None	replace
73	[BUG]  [BUGGY]  Real  real  =  isZero()?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isZero()?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	      Real    real    =    isInfinite()?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	1	None	replace
74	[BUG]  [BUGGY]  Real  real  =  isZero()?  Double.POSITIVE_INFINITY  :  Double.NaN;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isZero()?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isZero()?  Double.POSITIVE_INFINITY  :  Double.NaN;	      Real    real    =    isInfinite()?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  not  a  statement	2	None	replace
75	[BUG]  [BUGGY]  Real  real  =  isNaN?  NaN.INFINITE  :  NaN.getInfinite();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isNaN?  NaN.INFINITE  :  NaN.getInfinite();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  NaN.INFINITE  :  NaN.getInfinite();	      Real    real    =    isNaN?    NaN.getInfinite()    :    NaN.getInfinite();    	non-compiled	[CE]  not  a  statement	12	None	replace
76	[BUG]  [BUGGY]  double  real  =  isNaN?  Integer.MIN_VALUE  :  Integer.MAX_VALUE;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  double  real  =  isNaN?  Integer.MIN_VALUE  :  Integer.MAX_VALUE;  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Integer.MIN_VALUE  :  Integer.MAX_VALUE;	      double    real    =    isNaN?    NaN.doubleValue()    :    Integer.MIN_VALUE;    	non-compiled	[CE]  not  a  statement	14	None	replace
77	[BUG]  [BUGGY]  double  real  =  real?  NaN.doubleValue()  :  Integer.parseInt(real);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  double  real  =  real?  NaN.doubleValue()  :  Integer.parseInt(real);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  real?  NaN.doubleValue()  :  Integer.parseInt(real);	      double    real    =    isNaN?    NaN.doubleValue()    :    Integer.parseInt(real);    	non-compiled	[CE]  not  a  statement	13	None	replace
78	[BUG]  [BUGGY]  Real  real  =  isNaN?  Math.abs(real):  Math.abs(real);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  isNaN?  Math.abs(real):  Math.abs(real);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  isNaN?  Math.abs(real):  Math.abs(real);	      Real    real    =    isZero()?    Math.abs(real):    Math.abs(real);    	non-compiled	[CE]  not  a  statement	17	None	replace
79	[BUG]  [BUGGY]  Real  real  =  getImaginary();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  getImaginary();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getImaginary();	      Real    real    =    getInfinite();    	non-compiled	[CE]  not  a  statement	18	None	replace
80	[BUG]  [BUGGY]  Real  real  =  getReal();  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Real  real  =  getReal();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Real  real  =  getReal();	      Real    real    =    getInfinite();    	non-compiled	[CE]  not  a  statement	18	None	replace
81	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(real);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(real);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.ZERO  :  Infinite.valueOf(real);	      Double.POSITIVE_INFINITY    =    isNaN?    Infinite.valueOf(real):    Infinite.valueOf(real);    	non-compiled	[CE]  not  a  statement	4	None	replace
82	[BUG]  [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.FALSE  :  Infinite.valueOf(real);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  Double.POSITIVE_INFINITY  =  isNaN?  Infinite.FALSE  :  Infinite.valueOf(real);  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	Double.POSITIVE_INFINITY  =  isNaN?  Infinite.FALSE  :  Infinite.valueOf(real);	      Double.POSITIVE_INFINITY    =    isNaN?    Infinite.valueOf(real):    Infinite.valueOf(real);    	non-compiled	[CE]  not  a  statement	4	None	replace
83	[BUG]  [BUGGY]  return  Infinite.ZERO;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  return  Infinite.ZERO;  [BUGGY]    }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	return  Infinite.ZERO;	  return    Infinite.POSITIVE;    	non-compiled	[CE]  not  a  statement	8	None	replace
84	[BUG]  [BUGGY]  double  real  =  isNaN?  Infinite.doubleToInfinite()  :  Infinite.doubleToInfinite();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  double  real  =  isNaN?  Infinite.doubleToInfinite()  :  Infinite.doubleToInfinite();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isNaN?  Infinite.doubleToInfinite()  :  Infinite.doubleToInfinite();	      double    real    =    isNaN?    NaN.doubleToInfinite()    :    Infinite.doubleToInfinite();    	non-compiled	[CE]  not  a  statement	10	None	replace
85	[BUG]  [BUGGY]  double  real  =  isInfinite?  NaN.doubleToInfinite()  :  Infinite.doubleToInfinite();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  double  abs()  {  if  (isNaN)  {  return  Double.NaN;  }  if  (isInfinite())  {    [BUGGY]  double  real  =  isInfinite?  NaN.doubleToInfinite()  :  Infinite.doubleToInfinite();  [BUGGY]    return  Double.POSITIVE_INFINITY;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  if  (imaginary  ==  0.0)  {  return  FastMath.abs(real);  }  double  q  =  real  /  imaginary;  return  FastMath.abs(imaginary)  *  FastMath.sqrt(1  +  q  *  q);  }  else  {  if  (real  ==  0.0)  {  return  FastMath.abs(imaginary);  [CLASS]  Complex  [METHOD]  abs  [RETURN_TYPE]  double  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	double  real  =  isInfinite?  NaN.doubleToInfinite()  :  Infinite.doubleToInfinite();	      double    real    =    isNaN?    NaN.doubleToInfinite()    :    Infinite.doubleToInfinite();    	non-compiled	[CE]  not  a  statement	10	None	replace
